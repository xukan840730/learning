

# 1. design a polycurve/ polypath class
# 2. design algorithm to find curved strip
# 3. use segmentation to find lane block.

# 4. object class hierarchy:
animal <- cat, dog
animal has 4 legs, 1 body and 1 head (all connected)
human has 2 legs, 2 hands, and 1 head (all connected)

define leg: limb usually lower than body, long shape, has 1 thigh and 1 xiaotui
define hand: limb at 1/3 obdy, long shape, has 1 forearm and 1 upperarm
define body: big chunk, capsule shape

define head: has 2 eyes, 1 nose, 1 mouth, skull shape.


# scaledown test: when scaled down to (60, 80), road can still be recognized
# tiny_canny = cv2.resize(canny, (0,0), fx=0.125, fy=0.125, interpolation=cv2.INTER_AREA)
# tiny_canny = cv2.resize(canny, (0,0), fx=0.125, fy=0.125)
#
# title = "result_%d" % tiny_canny.shape[0]
# # cv2.imshow(title, tiny_canny)
# # cv2.waitKey(0)
# # cv2.destroyAllWindows()
#
# print(np.count_nonzero(tiny_canny))
# print(np.count_nonzero(tiny_canny > 64))
# print(np.count_nonzero(tiny_canny > 80))
# print(np.count_nonzero(tiny_canny > 96))
# print(np.count_nonzero(tiny_canny > 128))
# print(np.count_nonzero(tiny_canny > 240))
#
# # tiny_canny2 = tiny_canny.copy()
# # tiny_canny2[tiny_canny2 <= 128] = 0
# # cv2.imshow(title, tiny_canny2)
# # cv2.waitKey(0)
# # cv2.destroyAllWindows()
#
# def retrieve_sample_points(image, threshold):
#     num_points = np.count_nonzero(image > threshold)
#
#     # retrieve points coordinates
#     coords = np.zeros((num_points, 2))
#
#     idx = 0
#     for idx_i in range(image.shape[0]):
#         for idx_j in range(image.shape[1]):
#             if image[idx_i, idx_j] > threshold:
#                 coords[idx] = np.array((idx_i, idx_j))
#                 idx = idx + 1
#
#     return coords
#
#
# # now we have a much simpler image to do line/curve fitting.
# threshold = 128
# sample_points = retrieve_sample_points(tiny_canny, threshold)
#
# def generate_line_candidates(scatter_points):
#     lines = ()
#
#     # brute force generate all lines
#     for ii in range(scatter_points.shape[0]):
#         for jj in range(ii, scatter_points.shape[0]):
#             line = ()
#
#     return lines
#
# line_candidates = generate_line_candidates(sample_points)
