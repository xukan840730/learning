.pragma argument(target=common)
.shader Ps_CopyRefraction
  type(PS)
  sgpr_count(22)
  vgpr_count(8)
  user_sgpr_count(2)                            // s_userdata[0:1] in s[0:1]
                                                // s_ps_state in s2
  set_shader_type("pixel")
  ps_persp_center_en(1)                         // v_i_persp_center, v_j_persp_center or v_ij_persp_center[0:1] in v[0:1]
  ps_pos_en("xy")                               // v_x in v2, v_y in v3
  float_mode(kFloatModeRoundNearestEven|kFloatModeFlushDenormIn|kFloatModeFlushDenormOut, kFloatModeRoundNearestEven|kFloatModeAllowDenormIn|kFloatModeAllowDenormOut)
  dx10_clamp(1)
  ps_export_color_en(mrt_color0, "xyz")
  ps_export_color_en(mrt_color1, "xy")
  ps_export_format(mrt_color0, kPsExportFormatFp16ABGR) //mrt0
  ps_export_format(mrt_color1, kPsExportFormatFp16ABGR) //mrt1
  ps_z_order(kZOrderEarlyZThenLateZ)
  user_sgpr_usage(s[0:1], kShaderInputUsageImmShaderResourceTable, 0)
  shader_resource_table_usage([0:1], kShaderInputUsagePtrExtendedUserData, 1, "pSrt", "CopyRefractionSrt", kShaderResourceTableUsageUsed)
  dcl_struct(1, [0:31], kBufferTypeTexture2d, "m_tex_color", kShaderResourceTableUsageDereferenced)
  dcl_struct(1, [32:63], kBufferTypeTexture2d, "m_tex_motionVector", kShaderResourceTableUsageDereferenced)

  // CopyRefractionPsOutput Ps_CopyRefraction(float2 screenPos : S_POSITION, CopyRefractionSrt *pSrt : S_SRT_DATA)
  s_mov_b32                vcc_hi, #0 shader_binary_info_offset

  // load color and motion vector T#s from SRT
  s_load_dwordx16          s[0:15], s[0:1], 0x0

  // screen coordinates
  v_cvt_i32_f32            v0, v2
  v_cvt_i32_f32            v1, v3
  v_mov_b32                v2, 0

  // load color rgb
  s_waitcnt                lgkmcnt(0)
  image_load_mip           v[5:7], v[0:3], s[0:7] dmask:0x7

  // load motion vector rg
  image_load_mip           v[3:4], v[0:3], s[8:15] dmask:0x3

  // export color
  s_waitcnt                vmcnt(1)
  v_cvt_pkrtz_f16_f32      v0, v5, v6
  v_cvt_pkrtz_f16_f32      v1, v7, v7
  exp                      mrt0, v0, v1 compr vm

  // conditionally export motion vector (in the copy src we write 1000.0f for motion vectors that shouldn't be exported at this stage)
  s_waitcnt                vmcnt(0) & expcnt(0)
  v_cmp_gt_f32             vcc, #0x44610000, v3		// 0x44610000 = 900.0f
  s_and_saveexec_b64       vcc, vcc
  v_cvt_pkrtz_f16_f32      v3, v3, v4
  exp                      mrt1, v3, off compr done

   s_endpgm
.end