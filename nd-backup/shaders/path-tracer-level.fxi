#ifndef PATH_TRACER_LEVEL_FXI
#define PATH_TRACER_LEVEL_FXI

#include "path-tracer-kd-tree.fxi"

static const uint kNumPrototypes = 8;
static const uint kNumMeshes = 8;
static const uint kNumInstances = 8192;
static const uint kNumTrees = 8;

struct PtInstance
{
	float4x4	m_objToWorld;
	float4x4	m_worldToObj;
	int			m_protoIdx;
	uint		pad[3];
};

enum PtLightType
{
	kLightPoint,
	kLightArea,
};

struct PtLight
{
	float4x4						m_objToWorld;
	float4x4						m_worldToObj;
	float4							m_color;
	uint							m_type;
	uint							pad[3];
};

struct PtKdTreeArray
{
	KdTree							m_kdTrees[kNumTrees];
};

struct PtPrototype
{
	uint							m_meshStart;
	uint							m_meshEnd;
	uint							m_numTrees;
	uint							pad;

	PtKdTreeArray*					m_kdTreeArray;
};

struct PtMesh
{
	DataBuffer<uint>				m_idx;
	DataBuffer<float4>				m_pos;
	DataBuffer<float4>				m_norm;
};

struct PtPrototypeArray
{
	PtPrototype						m_protos[kNumPrototypes];
};

struct PtMeshArray
{
	PtMesh							m_meshes[kNumMeshes];
};

struct PtLevel
{
	StructuredBuffer<float4>		m_boundSpheres;
	StructuredBuffer<float4>		m_lightSpheres;
	StructuredBuffer<PtInstance>	m_inst;
	StructuredBuffer<PtLight>		m_lights;
	KdTree*							m_kdTree;

	PtPrototypeArray*				m_protoArray;
	PtMeshArray*					m_meshArray;

	uint2							m_levelId;
	uint							m_numProtos;
	uint							m_numMeshes;
	uint							m_numInst;
	uint							m_numLights;

	StructuredBuffer<uint>			m_protoHidden;
};

#endif