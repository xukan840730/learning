float3 UnderWaterFogCalculation(out float3 absorptionFactor,
								out float lightDistance,
								out float scatteringAttenuation,
								float WaterPlaneHeight, 
								float PixelHeight, 
								float CameraHeight, 
								float SceneDepth,
								float DrakeDepth,
								float ScatteringAmount,
								float NearColorPreservation,
								float CameraVectorY,
								float fogBrightnessMultiplier,
								float3 pixelColor,
								float3 AbsorptionCoefficient,
								float3 sunlightColor)
{
	float3 lightColor = sunlightColor;

	// Find what percentage of the line from the camera to the pixel is underwater vs above water
	float pixelUnderwaterHeight = WaterPlaneHeight - PixelHeight;

	float3 fogColor = 0;
	absorptionFactor = 1.0f;
	scatteringAttenuation = 0;
	float cameraHeight = WaterPlaneHeight - CameraHeight;

	if (cameraHeight > 0.0f || pixelUnderwaterHeight > 0.0f)
	{
		pixelUnderwaterHeight = max(pixelUnderwaterHeight, 0.0f);

		float differenceHeight = abs(PixelHeight - CameraHeight) + 0.00001f;
		float percentageUnderWater = abs(max(0,cameraHeight)-max(0, pixelUnderwaterHeight))/differenceHeight ;

		float DrakeDepthHack = abs(SceneDepth-DrakeDepth);
		float StartDistanceHack = lerp(pixelUnderwaterHeight, DrakeDepthHack, NearColorPreservation);
		pixelUnderwaterHeight = min(StartDistanceHack, pixelUnderwaterHeight);

		// Find the total distance light travels through the water
		lightDistance = max(0, pixelUnderwaterHeight) + DrakeDepthHack*percentageUnderWater;

		// Calculate color absorption attenuation
		float rAbsorption = pixelColor.r / (pixelColor.r + pixelColor.g + pixelColor.b);
		float3 biasedAbsorption =float3(lerp(AbsorptionCoefficient.g, AbsorptionCoefficient.r, rAbsorption), AbsorptionCoefficient.g, AbsorptionCoefficient.b);
		float3 absorptionAttenuation = exp(-lightDistance*biasedAbsorption);

		// Calculate fogging effect
		float3 FogExtinction = AbsorptionCoefficient+ScatteringAmount;

		float slope = CameraVectorY;

		float CameraHeightUnder = max(0, cameraHeight);
		float SceneDepthUnder = SceneDepth*percentageUnderWater;
		float3 integral1 = exp(-FogExtinction*CameraHeightUnder)/(FogExtinction*slope+FogExtinction);
		float3 integral2 = exp(-FogExtinction*CameraHeightUnder-FogExtinction*slope*SceneDepthUnder-FogExtinction*SceneDepthUnder)/(FogExtinction*slope+FogExtinction);
		fogColor = (integral1- integral2)*lightColor*ScatteringAmount*fogBrightnessMultiplier;

		// Calculate final attenuation
		scatteringAttenuation = saturate(exp(-SceneDepth*ScatteringAmount*percentageUnderWater));
		absorptionFactor = absorptionAttenuation*scatteringAttenuation;
	}

	return fogColor;
}
