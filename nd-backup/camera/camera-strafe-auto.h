/*
* Copyright (c) 2019 Naughty Dog, Inc.
* A Wholly Owned Subsidiary of Sony Computer Entertainment, Inc.
* Use and distribution without consent strictly prohibited
*/

#pragma once

#include "gamelib/camera/camera-strafe-base.h"

/// ------------------------------------------------------------------------------------------------- ///
/// For auto generating strafe camera settings
/// ------------------------------------------------------------------------------------------------- ///
struct CameraStrafeAutoGenStartInfo : public CameraStrafeStartInfo
{
	CameraStrafeAutoGenStartInfo()
		: CameraStrafeStartInfo(SID("CameraStrafeAutoGenStartInfo"))
	{}

	AutoGenCamParams m_params;
	bool m_immediate = false;
};

///---------------------------------------------------------------------------------///
/// CameraControlStrafeAutoGenerated: auto-generated camera settings to match desired camera location.
///---------------------------------------------------------------------------------///
class CameraControlStrafeAutoGenerated : public CameraControlStrafeBase
{
	typedef CameraControlStrafeBase ParentClass;

public:

	FROM_PROCESS_DECLARE(CameraControlStrafeAutoGenerated);

	CameraControlStrafeAutoGenerated()
		: ParentClass()
		, m_targetOffset(kZero)
	{
		//m_bestMatching.Reset();
	}

	float GetFadeOutDist() const { return m_params.m_fadeOutDist; }
	float GetFadeOutDistBlendTime() const { return m_fadeOutDistBlendTime; }
	void SetFadeOutDistBlendTime(float f) { m_fadeOutDistBlendTime = f; }

	StringId64 GetIgcName() const { return m_params.m_igcName; }

protected:

	virtual bool AllowRemap() const override { return true; }
	virtual CameraRemapSettings RemapSettingsId(StringId64 baseDcSettingsId, bool includeDistRemap) const override;

	virtual void Initialize(const CameraStartInfo& baseStartInfo) override;
	virtual void CalcInitArcAndYaw(const CameraStartInfo& baseStartInfo) override;
	virtual CameraBlendInfo CalcBlendInfo(const CameraStartInfo& baseStartInfo) const override;

	virtual Point GetBaseLookAtPointWs() const override;
	virtual Point GetTargetPosition(const NdGameObject* pFocusGo) const override;

	// give desired character locator and desired camera locator, calculate the settings to match it.
	// it doesn't change the current yaw or arc (pitch)
	void CalculateMatchingSettings(const Locator& desiredCharLoc, 
								   const Locator& desiredCamLoc,
								   const Vector& yawCtrlCameraDirXZ,		// This is NOT camera's forward!!!
								   const Vector& baseTargetOffsetFromChar,
								   float* pOutSideOffset,
								   Vec2* pOutNewArcOffsetDelta) const;

	static Point GetTargetPositionFromBaseLoc(const Locator& baseLoc, Vector_arg targetOffset);

	///--------------------------------------------------------------------------------------///
	virtual void PrepareFinalize(bool isTopControl, const CameraControl* pPrevControl) override;

	///--------------------------------------------------------------------------------------///
	virtual float GetFov() const override;

private:

	AutoGenCamParams m_params;

	Vector	m_targetOffset;

	float	m_fadeOutDistBlendTime = -1.f;

	// best matching camera angle and look-at.
	//struct BestMatching
	//{
	//	void Reset()
	//	{
	//		m_cameraDirXZ = kZero;
	//		m_arc = 0.f;
	//		m_charLoc = Locator(kIdentity);

	//		m_baseTargetPos = Point(kOrigin);
	//		m_preparedTargetPos = Point(kOrigin);
	//		m_cameraPosWoSideOffset = Point(kOrigin);
	//		m_finalCameraPos = Point(kOrigin);
	//	}

	//	// input.
	//	Vector	m_cameraDirXZ;
	//	float	m_arc;
	//	Locator m_charLoc;

	//	// output.
	//	Point	m_baseTargetPos;
	//	Point	m_preparedTargetPos;
	//	Point	m_cameraPosWoSideOffset;
	//	Point	m_finalCameraPos;
	//};
	//BestMatching m_bestMatching;
};

PROCESS_DECLARE(CameraControlStrafeAutoGenerated);
