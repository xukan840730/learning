/*
 * Copyright (c) 2019 Naughty Dog, Inc.
 * A Wholly Owned Subsidiary of Sony Computer Entertainment, Inc.
 * Use and distribution without consent strictly prohibited
 */

#pragma once

#include "gamelib/camera/nd-camera-utility.h"
#include "gamelib/camera/camera-animated.h"

class CameraManager;
struct CameraRequest;

struct CameraRemapSettings
{
	bool				m_valid = false;
	CameraRemapParams	m_params;
	StringId64			m_remapSettingsId = INVALID_STRING_ID_64;
	TimeFrame			m_requestStartTime;
};

CameraRemapSettings RemapCameraSettingsId(StringId64 baseSettingsId, StringId64 forceOverlayId);
CameraRemapSettings RemapCameraSettingsId(StringId64 baseSettingsId, I32 playerIndex, bool includeDistRemap = false);

// Camera Remap functions:
void CameraSetRemap(U32 playerIndex, StringId64 sid, const CameraRemapParams& remapParams, const char* szDbgSrc);
void CameraClearRemap(U32 playerIndex);
StringId64 DebugCameraRemap(U32 playerIndex, bool debug = false);
U64 GetCameraRemapHash(U32 playerIndex);
void SetCameraRemapSpawnTime(U32 playerIndex, const TimeFrame& timeFrame);
TimeFrame GetCameraRemapSpawnTime(U32 playerIndex);

bool TryAutoGenerateIntroCamera(I32 playerIndex,
								const CameraControl* pCurrCamera,
								DistCameraParams* pOutParams1,
								AutoGenCamParams* pOutParams2);

// create auto-gen camera and fade by dist.
bool TryAutoGenerateOutroCamera(const CameraRequest* pBestRequest,
								const CameraControlAnimated* pCurrCameraAnimated,
								AutoGenCamParams* pOutParams);

// create auto-gen camera and use dist-camera-remap.
bool TryAutoGenerateDistRemapCamera(I32 playerIndex,
									const CameraRequest* pBestRequest,
									AutoGenCamParams* pOutParams);

// create time-based camera and use dist-camera-remap.
bool TryTimeBasedDistRemapCamera(I32 playerIndex,
								 const CameraRequest* pBestRequest,
								 DistCameraParams* pOutParams);
