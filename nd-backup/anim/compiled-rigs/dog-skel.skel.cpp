#include <orbisanim/structs.h>
#include <orbisanim/joints.h>
#include <orbisanim/anim_perf.h>
#include <orbisanim/animhierarchy.h>
#include <orbisanim/commands.h>
#include <vectormath.h>
#include "ndlib/anim/rig-nodes/rig-nodes.h"

using namespace OrbisAnim;

namespace sceMath = sce::Vectormath::Simd;

#define max(a,b)	(((a) > (b)) ? (a) : (b))
#define min(a,b)	(((a) < (b)) ? (a) : (b))

extern "C" {
	void OrbisAnim_Parenting(uint16_t numJointQuads, OrbisAnim::HierarchyHeader const* const pHierarchyHeader, OrbisAnim::JointParentingQuad const* const pIndexTable);
}

static sceMath::Aos::Matrix3 Orthonormalize(sceMath::Aos::Transform3_arg mtx)
{
	sceMath::Aos::Vector3 vX = mtx.getCol0(), vY = mtx.getCol1(), vZ;
	vX = normalize(vX);
	vZ = normalize(cross(vX, vY));
	vY = cross(vZ, vX);	// should be normalized
	return sceMath::Aos::Matrix3(vX, vY, vZ);
}

static sceMath::Soa::Matrix3 Orthonormalize(sceMath::Soa::Transform3_arg mtx)
{
	sceMath::Soa::Vector3 vX = mtx.getCol0(), vY = mtx.getCol1(), vZ;
	vX = normalize(vX);
	vZ = normalize(cross(vX, vY));
	vY = cross(vZ, vX);	// should be normalized
	return sceMath::Soa::Matrix3(vX, vY, vZ);
}

static SMath::Quat QuaternionFromMatrix(SMath::Mat44 const &mtx)
{
	float trace = mtx[0][0] + mtx[1][1] + mtx[2][2];
	if (trace > 0.0f) {
		float s = 0.5f / sqrtf(1.0f + trace);
		return SMath::Quat(
			s * (mtx[1][2] - mtx[2][1]),
			s * (mtx[2][0] - mtx[0][2]),
			s * (mtx[0][1] - mtx[1][0]),
			0.25f / s);
	}
	else if (mtx[0][0] > mtx[1][1] && mtx[0][0] > mtx[2][2]) {
		float s = 0.5f / sqrtf(1.0f + mtx[0][0] - mtx[1][1] - mtx[2][2]);
		return SMath::Quat(
			0.25f / s,
			s * (mtx[0][1] + mtx[1][0]),
			s * (mtx[2][0] + mtx[0][2]),
			s * (mtx[1][2] - mtx[2][1]));
	}
	else if (mtx[1][1] > mtx[2][2]) {
		float s = 0.5f / sqrtf(1.0f + mtx[1][1] - mtx[0][0] - mtx[2][2]);
		return SMath::Quat(
			s * (mtx[0][1] + mtx[1][0]),
			0.25f / s,
			s * (mtx[1][2] + mtx[2][1]),
			s * (mtx[2][0] - mtx[0][2]));
	}
	else {
		float s = 0.5f / sqrtf(1.0f + mtx[2][2] - mtx[0][0] - mtx[1][1]);
		return SMath::Quat(
			s * (mtx[2][0] + mtx[0][2]),
			s * (mtx[1][2] + mtx[2][1]),
			0.25f / s,
			s * (mtx[0][1] - mtx[1][0]));
	}
}

static SMath::Quat AimQuaternion(SMath::Vec4 const& aim, SMath::Vec4 const& up)
{
	const float kEpsilon = 0.00000011921f;
	float aim_sqr = Dot3(aim, aim);
	SMath::Vec4 a = (aim_sqr == 0.0f) ? SMath::Vec4(SMath::kZero) : aim / sqrtf(aim_sqr);
	float a_dot_up = Dot3(a, up);
	float up_sqr = Dot3(up, up);
	float up_cross_a_sqr = up_sqr - a_dot_up * a_dot_up;

	if (up_cross_a_sqr * aim_sqr <= kEpsilon * up_sqr * aim_sqr) {
		//If aim cross up is 0 (if aim and up are parallel or either is 0), return the shortest rotation quaternion:
		SMath::Quat qAim0(0.0f, -a.Z(), a.Y(), 1.0f + a.X()); // shortest rotation quaternion
		return Normalize(qAim0);
	}
	SMath::Vec4 u = (up - a_dot_up * a) / sqrtf(up_cross_a_sqr);
	SMath::Mat44 mAim(a, u, Cross(a, u), SMath::Vec4(0, 0, 0, 1));
	return QuaternionFromMatrix(mAim);	// shouldn't need normalization, since we're passing an orthonormal matrix
}

// Joint[0]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind
// Joint[1]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind
// Joint[2]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind
// Joint[3]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind
// Joint[4]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind
// Joint[5]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind
// Joint[6]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind
// Joint[7]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind
// Joint[8]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind
// Joint[9]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind
// Joint[10]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|jaw_bind
// Joint[11]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|ear_l_a_bind
// Joint[12]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|ear_r_a_bind
// Joint[13]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|ear_l_a_bind|ear_l_b_bind
// Joint[14]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|ear_r_a_bind|ear_r_b_bind
// Joint[15]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|ear_l_a_bind|ear_l_b_bind|ear_l_c_bind
// Joint[16]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|ear_r_a_bind|ear_r_b_bind|ear_r_c_bind
// Joint[17]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|l_eyeball_bind
// Joint[18]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|r_eyeball_bind
// Joint[19]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|l_clavicle_bind
// Joint[20]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|r_clavicle_bind
// Joint[21]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|l_clavicle_bind|l_scapula_bind
// Joint[22]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|r_clavicle_bind|r_scapula_bind
// Joint[23]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|l_clavicle_bind|l_scapula_bind|l_shoulder_bind
// Joint[24]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|r_clavicle_bind|r_scapula_bind|r_shoulder_bind
// Joint[25]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|l_clavicle_bind|l_scapula_bind|l_shoulder_bind|l_elbow_bind
// Joint[26]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|r_clavicle_bind|r_scapula_bind|r_shoulder_bind|r_elbow_bind
// Joint[27]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|l_clavicle_bind|l_scapula_bind|l_shoulder_bind|l_elbow_bind|l_wrist_bind
// Joint[28]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|r_clavicle_bind|r_scapula_bind|r_shoulder_bind|r_elbow_bind|r_wrist_bind
// Joint[29]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|l_clavicle_bind|l_scapula_bind|l_shoulder_bind|l_elbow_bind|l_wrist_bind|l_hand_bind
// Joint[30]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|r_clavicle_bind|r_scapula_bind|r_shoulder_bind|r_elbow_bind|r_wrist_bind|r_hand_bind
// Joint[31]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|l_clavicle_bind|l_scapula_bind|l_shoulder_bind|l_elbow_bind|l_wrist_bind|l_hand_bind|l_finger_bind
// Joint[32]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|r_clavicle_bind|r_scapula_bind|r_shoulder_bind|r_elbow_bind|r_wrist_bind|r_hand_bind|r_finger_bind
// Joint[33]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|l_clavicle_bind|l_scapula_bind|l_shoulder_bind|l_elbow_bind|l_wrist_bind|l_hand_bind|l_hand_ik_bind
// Joint[34]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|r_clavicle_bind|r_scapula_bind|r_shoulder_bind|r_elbow_bind|r_wrist_bind|r_hand_bind|r_hand_ik_bind
// Joint[35]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|pelvis_bind
// Joint[36]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|pelvis_bind|tail_a_bind
// Joint[37]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|pelvis_bind|tail_a_bind|tail_b_bind
// Joint[38]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|pelvis_bind|tail_a_bind|tail_b_bind|tail_c_bind
// Joint[39]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|pelvis_bind|tail_a_bind|tail_b_bind|tail_c_bind|tail_d_bind
// Joint[40]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|pelvis_bind|tail_a_bind|tail_b_bind|tail_c_bind|tail_d_bind|tail_e_bind
// Joint[41]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|pelvis_bind|tail_a_bind|tail_b_bind|tail_c_bind|tail_d_bind|tail_e_bind|tail_f_bind
// Joint[42]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|pelvis_bind|tail_a_bind|tail_b_bind|tail_c_bind|tail_d_bind|tail_e_bind|tail_f_bind|tail_g_bind
// Joint[43]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|pelvis_bind|tail_a_bind|tail_b_bind|tail_c_bind|tail_d_bind|tail_e_bind|tail_f_bind|tail_g_bind|tail_h_bind
// Joint[44]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|pelvis_bind|tail_a_bind|tail_b_bind|tail_c_bind|tail_d_bind|tail_e_bind|tail_f_bind|tail_g_bind|tail_h_bind|tail_i_bind
// Joint[45]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|pelvis_bind|tail_a_bind|tail_b_bind|tail_c_bind|tail_d_bind|tail_e_bind|tail_f_bind|tail_g_bind|tail_h_bind|tail_i_bind|tail_j_bind
// Joint[46]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|pelvis_bind|tail_a_bind|tail_b_bind|tail_c_bind|tail_d_bind|tail_e_bind|tail_f_bind|tail_g_bind|tail_h_bind|tail_i_bind|tail_j_bind|tail_k_bind
// Joint[47]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|pelvis_bind|l_hip_bind
// Joint[48]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|pelvis_bind|r_hip_bind
// Joint[49]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|pelvis_bind|l_hip_bind|l_knee_bind
// Joint[50]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|pelvis_bind|r_hip_bind|r_knee_bind
// Joint[51]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|pelvis_bind|l_hip_bind|l_knee_bind|l_upAnkle_bind
// Joint[52]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|pelvis_bind|r_hip_bind|r_knee_bind|r_upAnkle_bind
// Joint[53]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|pelvis_bind|l_hip_bind|l_knee_bind|l_upAnkle_bind|l_ankle_bind
// Joint[54]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|pelvis_bind|r_hip_bind|r_knee_bind|r_upAnkle_bind|r_ankle_bind
// Joint[55]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|pelvis_bind|l_hip_bind|l_knee_bind|l_upAnkle_bind|l_ankle_bind|l_toe_bind
// Joint[56]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|pelvis_bind|r_hip_bind|r_knee_bind|r_upAnkle_bind|r_ankle_bind|r_toe_bind
// Joint[57]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|pelvis_bind|l_hip_bind|l_knee_bind|l_upAnkle_bind|l_ankle_bind|l_foot_ik_bind
// Joint[58]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|pelvis_bind|r_hip_bind|r_knee_bind|r_upAnkle_bind|r_ankle_bind|r_foot_ik_bind
// Joint[59]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper
// Joint[60]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper
// Joint[61]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper
// Joint[62]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper
// Joint[63]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper
// Joint[64]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper
// Joint[65]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|neck_a_helper
// Joint[66]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|neck_a_helper|neck_b_helper
// Joint[67]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|neck_a_helper|neck_b_helper|neck_c_helper
// Joint[68]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|neck_a_helper|neck_b_helper|neck_c_helper|head_helper
// Joint[69]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|l_clavicle_helper
// Joint[70]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|l_clavicle_helper|l_scapula_helper
// Joint[71]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|l_clavicle_helper|l_scapula_helper|l_shoulder_helper
// Joint[72]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|l_clavicle_helper|l_scapula_helper|l_shoulder_helper|l_elbow_helper
// Joint[73]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|l_clavicle_helper|l_scapula_helper|l_shoulder_helper|l_elbow_helper|l_wrist_helper
// Joint[74]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|l_clavicle_helper|l_scapula_helper|l_shoulder_helper|l_elbow_helper|l_wrist_helper|l_hand_helper
// Joint[75]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|l_clavicle_helper|l_scapula_helper|l_shoulder_helper|l_elbow_helper|l_wrist_helper|l_hand_helper|l_finger_helper
// Joint[76]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|l_clavicle_helper|l_scapula_helper|l_shoulder_helper|l_elbow_helper|l_wrist_helper|l_hand_helperTwist
// Joint[77]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|l_clavicle_helper|l_scapula_helper|l_shoulder_helper|l_elbow_helper|l_wrist_helper|l_hand_helperTwist|l_hand_helperBend
// Joint[78]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|l_clavicle_helper|l_scapula_helper|l_shoulder_helper|l_elbow_helper_weighted_01
// Joint[79]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|l_clavicle_helper|l_scapula_helper|l_shoulder_helperBend
// Joint[80]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|l_clavicle_helper|l_scapula_helper|l_shoulder_helperBend|l_shoulder_helperTwist
// Joint[81]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|l_clavicle_helper|l_scapula_helperBend
// Joint[82]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|l_clavicle_helper|l_scapula_helperBend|l_scapula_helperTwist
// Joint[83]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|r_clavicle_helper
// Joint[84]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|r_clavicle_helper|r_scapula_helper
// Joint[85]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|r_clavicle_helper|r_scapula_helper|r_shoulder_helper
// Joint[86]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|r_clavicle_helper|r_scapula_helper|r_shoulder_helper|r_elbow_helper
// Joint[87]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|r_clavicle_helper|r_scapula_helper|r_shoulder_helper|r_elbow_helper|r_wrist_helper
// Joint[88]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|r_clavicle_helper|r_scapula_helper|r_shoulder_helper|r_elbow_helper|r_wrist_helper|r_hand_helper
// Joint[89]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|r_clavicle_helper|r_scapula_helper|r_shoulder_helper|r_elbow_helper|r_wrist_helper|r_hand_helper|r_finger_helper
// Joint[90]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|r_clavicle_helper|r_scapula_helper|r_shoulder_helper|r_elbow_helper|r_wrist_helper|r_hand_helperTwist
// Joint[91]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|r_clavicle_helper|r_scapula_helper|r_shoulder_helper|r_elbow_helper|r_wrist_helper|r_hand_helperTwist|r_hand_helperBend
// Joint[92]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|r_clavicle_helper|r_scapula_helper|r_shoulder_helper|r_elbow_helper_weighted_01
// Joint[93]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|r_clavicle_helper|r_scapula_helper|r_shoulder_helperBend
// Joint[94]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|r_clavicle_helper|r_scapula_helper|r_shoulder_helperBend|r_shoulder_helperTwist
// Joint[95]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|r_clavicle_helper|r_scapula_helperBend
// Joint[96]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|r_clavicle_helper|r_scapula_helperBend|r_scapula_helperTwist
// Joint[97]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper
// Joint[98]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|l_hip_helper
// Joint[99]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|l_hip_helper|l_knee_helper
// Joint[100]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|l_hip_helper|l_knee_helper|l_upAnkle_helper
// Joint[101]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|l_hip_helper|l_knee_helper|l_upAnkle_helper|l_ankle_helper
// Joint[102]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|l_hip_helper|l_knee_helper|l_upAnkle_helper|l_ankle_helper|l_toe_helper
// Joint[103]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|l_hip_helper|l_knee_helper|l_upAnkle_helper|l_ankle_helperTwist
// Joint[104]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|l_hip_helper|l_knee_helper|l_upAnkle_helper|l_ankle_helperTwist|l_ankle_helperBend
// Joint[105]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|l_hip_helper|l_knee_helper_weighted_01
// Joint[106]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|r_hip_helper
// Joint[107]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|r_hip_helper|r_knee_helper
// Joint[108]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|r_hip_helper|r_knee_helper|r_upAnkle_helper
// Joint[109]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|r_hip_helper|r_knee_helper|r_upAnkle_helper|r_ankle_helper
// Joint[110]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|r_hip_helper|r_knee_helper|r_upAnkle_helper|r_ankle_helper|r_toe_helper
// Joint[111]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|r_hip_helper|r_knee_helper|r_upAnkle_helper|r_ankle_helperTwist
// Joint[112]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|r_hip_helper|r_knee_helper|r_upAnkle_helper|r_ankle_helperTwist|r_ankle_helperBend
// Joint[113]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|r_hip_helper|r_knee_helper_weighted_01
// Joint[114]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|l_hip_helperBend
// Joint[115]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|l_hip_helperBend|l_hip_helperTwist
// Joint[116]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|l_hip_helperBend|l_hip_helperTwist_weighted_01
// Joint[117]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|l_hip_helperBend|l_hip_helperTwist_weighted_02
// Joint[118]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|l_hip_helperBend|l_hip_helperTwist_weighted_03
// Joint[119]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|r_hip_helperBend
// Joint[120]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|r_hip_helperBend|r_hip_helperTwist
// Joint[121]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|r_hip_helperBend|r_hip_helperTwist_weighted_01
// Joint[122]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|r_hip_helperBend|r_hip_helperTwist_weighted_02
// Joint[123]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|r_hip_helperBend|r_hip_helperTwist_weighted_03
// Joint[124]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|jaw_bind|tongue_a_bind
// Joint[125]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|jaw_bind|tongue_a_bind|tongue_b_bind
// Joint[126]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|jaw_bind|tongue_a_bind|tongue_b_bind|tongue_c_bind
// Joint[127]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|jaw_bind|tongue_a_bind|tongue_b_bind|tongue_c_bind|tongue_d_bind
// Joint[128]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|jaw_bind|tongue_a_bind|tongue_b_bind|tongue_c_bind|tongue_d_bind|tongue_e_bind
// Joint[129]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp
// Joint[130]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|m_brow_07_bind
// Joint[131]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_08_bind
// Joint[132]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_10_bind
// Joint[133]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_12_bind
// Joint[134]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_18_bind
// Joint[135]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_24_bind
// Joint[136]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_26_bind
// Joint[137]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_30_bind
// Joint[138]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_35_bind
// Joint[139]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_37_bind
// Joint[140]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_38_bind
// Joint[141]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_40_bind
// Joint[142]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_42_bind
// Joint[143]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_43_bind
// Joint[144]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_45_bind
// Joint[145]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_08_bind
// Joint[146]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_10_bind
// Joint[147]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_12_bind
// Joint[148]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_18_bind
// Joint[149]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_24_bind
// Joint[150]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_26_bind
// Joint[151]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_30_bind
// Joint[152]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_35_bind
// Joint[153]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_37_bind
// Joint[154]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_38_bind
// Joint[155]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_40_bind
// Joint[156]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_42_bind
// Joint[157]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_43_bind
// Joint[158]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_45_bind
// Joint[159]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp
// Joint[160]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|m_mouth_10_bind
// Joint[161]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|m_mouth_14_bind
// Joint[162]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_07_bind
// Joint[163]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_17_bind
// Joint[164]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_21_bind
// Joint[165]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_24_bind
// Joint[166]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_26_bind
// Joint[167]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_28_bind
// Joint[168]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_34_bind
// Joint[169]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_35_bind
// Joint[170]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_07_bind
// Joint[171]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_17_bind
// Joint[172]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_21_bind
// Joint[173]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_24_bind
// Joint[174]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_26_bind
// Joint[175]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_28_bind
// Joint[176]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_34_bind
// Joint[177]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_35_bind
// Joint[178]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|m_brow_02_bind
// Joint[179]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|m_brow_03_bind
// Joint[180]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|m_brow_06_bind
// Joint[181]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_01_bind
// Joint[182]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_03_bind
// Joint[183]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_05_bind
// Joint[184]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_06_bind
// Joint[185]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_20_bind
// Joint[186]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_23_bind
// Joint[187]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_33_bind
// Joint[188]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_34_bind
// Joint[189]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_36_bind
// Joint[190]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_41_bind
// Joint[191]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_01_bind
// Joint[192]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_03_bind
// Joint[193]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_05_bind
// Joint[194]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_06_bind
// Joint[195]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_20_bind
// Joint[196]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_23_bind
// Joint[197]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_33_bind
// Joint[198]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_34_bind
// Joint[199]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_36_bind
// Joint[200]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_41_bind
// Joint[201]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|m_mouth_02_bind
// Joint[202]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|m_mouth_05_bind
// Joint[203]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|m_mouth_08_bind
// Joint[204]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|m_mouth_09_bind
// Joint[205]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|m_mouth_11_bind
// Joint[206]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|m_mouth_13_bind
// Joint[207]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_02_bind
// Joint[208]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_04_bind
// Joint[209]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_06_bind
// Joint[210]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_08_bind
// Joint[211]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_12_bind
// Joint[212]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_27_bind
// Joint[213]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_39_bind
// Joint[214]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_42_bind
// Joint[215]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_02_bind
// Joint[216]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_04_bind
// Joint[217]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_06_bind
// Joint[218]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_08_bind
// Joint[219]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_12_bind
// Joint[220]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_27_bind
// Joint[221]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_39_bind
// Joint[222]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_42_bind
// Joint[223]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|l_clavicle_helper|l_scapula_helper|l_shoulder_helperBend|l_shoulder_helperBend_pose_02
// Joint[224]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|r_clavicle_helper|r_scapula_helper|r_shoulder_helperBend|r_shoulder_helperBend_pose_02
// Joint[225]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_c_helper_pose_01
// Joint[226]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_c_helper_pose_02
// Joint[227]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_a_helper_pose_01
// Joint[228]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_a_helper_pose_02
// Joint[229]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_a_helper_pose_03
// Joint[230]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_a_helper_pose_04
// Joint[231]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|l_hip_helperBend|l_hip_helperTwist_weighted_01|l_hip_helperTwist_weighted_01_pose_01
// Joint[232]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|r_hip_helperBend|r_hip_helperTwist_weighted_01|r_hip_helperTwist_weighted_01_pose_01
// Joint[233]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|m_brow_01_bind
// Joint[234]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|m_brow_05_bind
// Joint[235]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_09_bind
// Joint[236]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_11_bind
// Joint[237]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_13_bind
// Joint[238]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_15_bind
// Joint[239]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_16_bind
// Joint[240]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_17_bind
// Joint[241]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_19_bind
// Joint[242]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_22_bind
// Joint[243]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_25_bind
// Joint[244]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_27_bind
// Joint[245]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_32_bind
// Joint[246]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_39_bind
// Joint[247]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_09_bind
// Joint[248]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_11_bind
// Joint[249]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_13_bind
// Joint[250]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_15_bind
// Joint[251]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_16_bind
// Joint[252]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_17_bind
// Joint[253]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_19_bind
// Joint[254]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_22_bind
// Joint[255]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_25_bind
// Joint[256]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_27_bind
// Joint[257]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_32_bind
// Joint[258]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_39_bind
// Joint[259]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|m_mouth_01_bind
// Joint[260]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|m_mouth_03_bind
// Joint[261]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|m_mouth_04_bind
// Joint[262]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|m_mouth_07_bind
// Joint[263]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|m_mouth_12_bind
// Joint[264]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_01_bind
// Joint[265]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_05_bind
// Joint[266]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_10_bind
// Joint[267]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_13_bind
// Joint[268]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_16_bind
// Joint[269]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_20_bind
// Joint[270]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_29_bind
// Joint[271]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_38_bind
// Joint[272]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_41_bind
// Joint[273]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_01_bind
// Joint[274]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_05_bind
// Joint[275]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_10_bind
// Joint[276]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_13_bind
// Joint[277]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_16_bind
// Joint[278]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_20_bind
// Joint[279]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_29_bind
// Joint[280]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_38_bind
// Joint[281]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_41_bind
// Joint[282]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|neck_a_helper|neck_b_helper|neck_c_helper|neck_c_helper_pose_01
// Joint[283]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|neck_a_helper|neck_b_helper|neck_c_helper|neck_c_helper_pose_02
// Joint[284]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|neck_a_helper|neck_b_helper|neck_b_helper_pose_01
// Joint[285]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|neck_a_helper|neck_b_helper|neck_b_helper_pose_02
// Joint[286]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|l_clavicle_helper|l_scapula_helper|l_shoulder_helper|l_elbow_helper|l_elbow_helper_pose_01
// Joint[287]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|l_clavicle_helper|l_scapula_helper|l_shoulder_helper|l_elbow_helper|l_elbow_helper_pose_02
// Joint[288]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|l_clavicle_helper|l_scapula_helper|l_shoulder_helper|l_elbow_helper|l_elbow_helper_pose_03
// Joint[289]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|l_clavicle_helper|l_scapula_helper|l_shoulder_helperBend|l_shoulder_helperBend_pose_01
// Joint[290]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|l_clavicle_helper|l_scapula_helper|l_shoulder_helperBend|l_shoulder_helperBend_pose_04
// Joint[291]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|r_clavicle_helper|r_scapula_helper|r_shoulder_helper|r_elbow_helper|r_elbow_helper_pose_01
// Joint[292]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|r_clavicle_helper|r_scapula_helper|r_shoulder_helper|r_elbow_helper|r_elbow_helper_pose_02
// Joint[293]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|r_clavicle_helper|r_scapula_helper|r_shoulder_helper|r_elbow_helper|r_elbow_helper_pose_03
// Joint[294]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|r_clavicle_helper|r_scapula_helper|r_shoulder_helperBend|r_shoulder_helperBend_pose_01
// Joint[295]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|r_clavicle_helper|r_scapula_helper|r_shoulder_helperBend|r_shoulder_helperBend_pose_04
// Joint[296]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|spine_e_helper_pose_01
// Joint[297]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|spine_e_helper_pose_02
// Joint[298]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|l_hip_helper|l_knee_helper|l_knee_helper_pose_01
// Joint[299]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|l_hip_helper|l_knee_helper|l_knee_helper_pose_02
// Joint[300]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|l_hip_helper|l_knee_helper_weighted_01|l_knee_helper_weighted_01_pose_01
// Joint[301]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|r_hip_helper|r_knee_helper|r_knee_helper_pose_01
// Joint[302]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|r_hip_helper|r_knee_helper|r_knee_helper_pose_02
// Joint[303]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|r_hip_helper|r_knee_helper_weighted_01|r_knee_helper_weighted_01_pose_01
// Joint[304]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|l_hip_helperBend|l_hip_helperTwist_weighted_02|l_hip_helperTwist_weighted_02_pose_01
// Joint[305]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|l_hip_helperBend|l_hip_helperTwist_weighted_02|l_hip_helperTwist_weighted_02_pose_02
// Joint[306]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|l_hip_helperBend|l_hip_helperBend_pose_01
// Joint[307]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|r_hip_helperBend|r_hip_helperTwist_weighted_02|r_hip_helperTwist_weighted_02_pose_01
// Joint[308]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|r_hip_helperBend|r_hip_helperTwist_weighted_02|r_hip_helperTwist_weighted_02_pose_02
// Joint[309]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|r_hip_helperBend|r_hip_helperBend_pose_01
// Joint[310]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|m_brow_04_bind
// Joint[311]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_02_bind
// Joint[312]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_04_bind
// Joint[313]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_07_bind
// Joint[314]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_14_bind
// Joint[315]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_21_bind
// Joint[316]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_28_bind
// Joint[317]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_29_bind
// Joint[318]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_31_bind
// Joint[319]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|l_brow_44_bind
// Joint[320]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_02_bind
// Joint[321]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_04_bind
// Joint[322]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_07_bind
// Joint[323]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_14_bind
// Joint[324]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_21_bind
// Joint[325]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_28_bind
// Joint[326]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_29_bind
// Joint[327]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_31_bind
// Joint[328]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|brow_grp|r_brow_44_bind
// Joint[329]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|m_mouth_06_bind
// Joint[330]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_03_bind
// Joint[331]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_09_bind
// Joint[332]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_11_bind
// Joint[333]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_14_bind
// Joint[334]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_15_bind
// Joint[335]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_18_bind
// Joint[336]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_19_bind
// Joint[337]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_22_bind
// Joint[338]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_23_bind
// Joint[339]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_25_bind
// Joint[340]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_30_bind
// Joint[341]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_31_bind
// Joint[342]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_32_bind
// Joint[343]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_33_bind
// Joint[344]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_36_bind
// Joint[345]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_37_bind
// Joint[346]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_40_bind
// Joint[347]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|l_mouth_43_bind
// Joint[348]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_03_bind
// Joint[349]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_09_bind
// Joint[350]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_11_bind
// Joint[351]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_14_bind
// Joint[352]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_15_bind
// Joint[353]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_18_bind
// Joint[354]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_19_bind
// Joint[355]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_22_bind
// Joint[356]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_23_bind
// Joint[357]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_25_bind
// Joint[358]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_30_bind
// Joint[359]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_31_bind
// Joint[360]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_32_bind
// Joint[361]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_33_bind
// Joint[362]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_36_bind
// Joint[363]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_37_bind
// Joint[364]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_40_bind
// Joint[365]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|root_bind|spine_a_bind|spine_b_bind|spine_c_bind|spine_d_bind|spine_e_bind|neck_a_bind|neck_b_bind|neck_c_bind|head_bind|mouth_grp|r_mouth_43_bind
// Joint[366]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|neck_a_helper|neck_b_helper|neck_c_helper|head_helper|head_helper_pose_01
// Joint[367]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|neck_a_helper|neck_b_helper|neck_c_helper|head_helper|head_helper_pose_02
// Joint[368]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|l_clavicle_helper|l_scapula_helper|l_shoulder_helper|l_elbow_helper|l_wrist_helper|l_wrist_helper_pose_02
// Joint[369]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|l_clavicle_helper|l_scapula_helper|l_shoulder_helper|l_elbow_helper|l_wrist_helper|l_wrist_helper_pose_01
// Joint[370]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|l_clavicle_helper|l_scapula_helper|l_shoulder_helper|l_elbow_helper_weighted_01|l_elbow_helper_weighted_01_pose_01
// Joint[371]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|l_clavicle_helper|l_scapula_helper|l_shoulder_helperBend|l_shoulder_helperBend_pose_03
// Joint[372]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|r_clavicle_helper|r_scapula_helper|r_shoulder_helper|r_elbow_helper|r_wrist_helper|r_wrist_helper_pose_01
// Joint[373]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|r_clavicle_helper|r_scapula_helper|r_shoulder_helper|r_elbow_helper|r_wrist_helper|r_wrist_helper_pose_02
// Joint[374]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|r_clavicle_helper|r_scapula_helper|r_shoulder_helper|r_elbow_helper_weighted_01|r_elbow_helper_weighted_01_pose_01
// Joint[375]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_e_helper|r_clavicle_helper|r_scapula_helper|r_shoulder_helperBend|r_shoulder_helperBend_pose_03
// Joint[376]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_d_helper_pose_01
// Joint[377]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|spine_a_helper|spine_b_helper|spine_c_helper|spine_d_helper|spine_d_helper_pose_02
// Joint[378]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|l_hip_helper|l_knee_helper|l_upAnkle_helper|l_upAnkle_helper_pose_01
// Joint[379]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|l_hip_helper|l_knee_helper|l_upAnkle_helper|l_upAnkle_helper_pose_02
// Joint[380]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|l_hip_helper|l_knee_helper_weighted_01|l_knee_helper_weighted_01_pose_02
// Joint[381]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|r_hip_helper|r_knee_helper|r_upAnkle_helper|r_upAnkle_helper_pose_01
// Joint[382]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|r_hip_helper|r_knee_helper|r_upAnkle_helper|r_upAnkle_helper_pose_02
// Joint[383]: |character_def_grp|rigging_grp|bind_grp|anim_scale_grp|helper_grp|root_helper|pelvis_helper|r_hip_helper|r_knee_helper_weighted_01|r_knee_helper_weighted_01_pose_02

static void HierarchyParentingCommand_Seg0Cmd0(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0010, 0x0000 + 1 },	// Child[0]: root_bind, Parent[-1]: <none>
		{ 0x0010, 0x0000 + 1 },	// Child[0]: root_bind, Parent[-1]: <none>
		{ 0x0010, 0x0000 + 1 },	// Child[0]: root_bind, Parent[-1]: <none>
		{ 0x0010, 0x0000 + 1 },	// Child[0]: root_bind, Parent[-1]: <none>
		{ 0x0020, 0x0040 + 1 },	// Child[1]: spine_a_bind, Parent[0]: root_bind
		{ 0x0240, 0x0040 + 1 },	// Child[35]: pelvis_bind, Parent[0]: root_bind
		{ 0x0240, 0x0040 + 1 },	// Child[35]: pelvis_bind, Parent[0]: root_bind
		{ 0x0240, 0x0040 + 1 },	// Child[35]: pelvis_bind, Parent[0]: root_bind
		{ 0x0030, 0x0080 + 1 },	// Child[2]: spine_b_bind, Parent[1]: spine_a_bind
		{ 0x0250, 0x0900 + 1 },	// Child[36]: tail_a_bind, Parent[35]: pelvis_bind
		{ 0x0300, 0x0900 + 1 },	// Child[47]: l_hip_bind, Parent[35]: pelvis_bind
		{ 0x0310, 0x0900 + 1 },	// Child[48]: r_hip_bind, Parent[35]: pelvis_bind
		{ 0x0040, 0x00C0 + 1 },	// Child[3]: spine_c_bind, Parent[2]: spine_b_bind
		{ 0x0260, 0x0940 + 1 },	// Child[37]: tail_b_bind, Parent[36]: tail_a_bind
		{ 0x0320, 0x0C00 + 1 },	// Child[49]: l_knee_bind, Parent[47]: l_hip_bind
		{ 0x0330, 0x0C40 + 1 },	// Child[50]: r_knee_bind, Parent[48]: r_hip_bind
		{ 0x0050, 0x0100 + 1 },	// Child[4]: spine_d_bind, Parent[3]: spine_c_bind
		{ 0x0270, 0x0980 + 1 },	// Child[38]: tail_c_bind, Parent[37]: tail_b_bind
		{ 0x0340, 0x0C80 + 1 },	// Child[51]: l_upAnkle_bind, Parent[49]: l_knee_bind
		{ 0x0350, 0x0CC0 + 1 },	// Child[52]: r_upAnkle_bind, Parent[50]: r_knee_bind
		{ 0x0060, 0x0140 + 1 },	// Child[5]: spine_e_bind, Parent[4]: spine_d_bind
		{ 0x0280, 0x09C0 + 1 },	// Child[39]: tail_d_bind, Parent[38]: tail_c_bind
		{ 0x0360, 0x0D00 + 1 },	// Child[53]: l_ankle_bind, Parent[51]: l_upAnkle_bind
		{ 0x0370, 0x0D40 + 1 },	// Child[54]: r_ankle_bind, Parent[52]: r_upAnkle_bind
		{ 0x0070, 0x0180 + 1 },	// Child[6]: neck_a_bind, Parent[5]: spine_e_bind
		{ 0x0140, 0x0180 + 1 },	// Child[19]: l_clavicle_bind, Parent[5]: spine_e_bind
		{ 0x0150, 0x0180 + 1 },	// Child[20]: r_clavicle_bind, Parent[5]: spine_e_bind
		{ 0x0290, 0x0A00 + 1 },	// Child[40]: tail_e_bind, Parent[39]: tail_d_bind
		{ 0x0080, 0x01C0 + 1 },	// Child[7]: neck_b_bind, Parent[6]: neck_a_bind
		{ 0x0160, 0x0500 + 1 },	// Child[21]: l_scapula_bind, Parent[19]: l_clavicle_bind
		{ 0x0170, 0x0540 + 1 },	// Child[22]: r_scapula_bind, Parent[20]: r_clavicle_bind
		{ 0x02A0, 0x0A40 + 1 },	// Child[41]: tail_f_bind, Parent[40]: tail_e_bind
		{ 0x0090, 0x0200 + 1 },	// Child[8]: neck_c_bind, Parent[7]: neck_b_bind
		{ 0x0180, 0x0580 + 1 },	// Child[23]: l_shoulder_bind, Parent[21]: l_scapula_bind
		{ 0x0190, 0x05C0 + 1 },	// Child[24]: r_shoulder_bind, Parent[22]: r_scapula_bind
		{ 0x02B0, 0x0A80 + 1 },	// Child[42]: tail_g_bind, Parent[41]: tail_f_bind
		{ 0x00A0, 0x0240 + 1 },	// Child[9]: head_bind, Parent[8]: neck_c_bind
		{ 0x01A0, 0x0600 + 1 },	// Child[25]: l_elbow_bind, Parent[23]: l_shoulder_bind
		{ 0x01B0, 0x0640 + 1 },	// Child[26]: r_elbow_bind, Parent[24]: r_shoulder_bind
		{ 0x02C0, 0x0AC0 + 1 },	// Child[43]: tail_h_bind, Parent[42]: tail_g_bind
		{ 0x00C0, 0x0280 + 1 },	// Child[11]: ear_l_a_bind, Parent[9]: head_bind
		{ 0x00D0, 0x0280 + 1 },	// Child[12]: ear_r_a_bind, Parent[9]: head_bind
		{ 0x01C0, 0x0680 + 1 },	// Child[27]: l_wrist_bind, Parent[25]: l_elbow_bind
		{ 0x01D0, 0x06C0 + 1 },	// Child[28]: r_wrist_bind, Parent[26]: r_elbow_bind
		{ 0x02D0, 0x0B00 + 1 },	// Child[44]: tail_i_bind, Parent[43]: tail_h_bind
		{ 0x00E0, 0x0300 + 1 },	// Child[13]: ear_l_b_bind, Parent[11]: ear_l_a_bind
		{ 0x00F0, 0x0340 + 1 },	// Child[14]: ear_r_b_bind, Parent[12]: ear_r_a_bind
		{ 0x01E0, 0x0700 + 1 },	// Child[29]: l_hand_bind, Parent[27]: l_wrist_bind
		{ 0x01F0, 0x0740 + 1 },	// Child[30]: r_hand_bind, Parent[28]: r_wrist_bind
		{ 0x02E0, 0x0B40 + 1 },	// Child[45]: tail_j_bind, Parent[44]: tail_i_bind
		{ 0x00B0, 0x0280 + 1 },	// Child[10]: jaw_bind, Parent[9]: head_bind
		{ 0x0100, 0x0380 + 1 },	// Child[15]: ear_l_c_bind, Parent[13]: ear_l_b_bind
		{ 0x0110, 0x03C0 + 1 },	// Child[16]: ear_r_c_bind, Parent[14]: ear_r_b_bind
		{ 0x0120, 0x0280 + 1 },	// Child[17]: l_eyeball_bind, Parent[9]: head_bind
		{ 0x0130, 0x0280 + 1 },	// Child[18]: r_eyeball_bind, Parent[9]: head_bind
		{ 0x0200, 0x0780 + 1 },	// Child[31]: l_finger_bind, Parent[29]: l_hand_bind
		{ 0x0210, 0x07C0 + 1 },	// Child[32]: r_finger_bind, Parent[30]: r_hand_bind
		{ 0x0220, 0x0780 + 1 },	// Child[33]: l_hand_ik_bind, Parent[29]: l_hand_bind
		{ 0x0230, 0x07C0 + 1 },	// Child[34]: r_hand_ik_bind, Parent[30]: r_hand_bind
		{ 0x02F0, 0x0B80 + 1 },	// Child[46]: tail_k_bind, Parent[45]: tail_j_bind
		{ 0x0380, 0x0D80 + 1 },	// Child[55]: l_toe_bind, Parent[53]: l_ankle_bind
		{ 0x0390, 0x0DC0 + 1 },	// Child[56]: r_toe_bind, Parent[54]: r_ankle_bind
		{ 0x03A0, 0x0D80 + 1 },	// Child[57]: l_foot_ik_bind, Parent[53]: l_ankle_bind
		{ 0x03B0, 0x0DC0 + 1 }	// Child[58]: r_foot_ik_bind, Parent[54]: r_ankle_bind
	};

	OrbisAnim_Parenting(16, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

static void HierarchyCopyCommand_Seg0Cmd1(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locJointTransforms = (const char*)pContext->m_locJointTransforms;
	const char* __restrict pDependencyTable = (const char*)pContext->m_pDependencyTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(SMath::Vec4*)(pDependencyTable + 0x0000) = *(SMath::Vec4*)(locJointParams + 0x0000);
	*(SMath::Vec4*)(pDependencyTable + 0x0010) = *(SMath::Vec4*)(locJointParams + 0x0010);
	*(SMath::Vec4*)(pDependencyTable + 0x0020) = *(SMath::Vec4*)(locJointParams + 0x0020);
	*(SMath::Vec4*)(pDependencyTable + 0x0630) = *(SMath::Vec4*)(locJointTransforms + 0x0040);
	*(SMath::Vec4*)(pDependencyTable + 0x0640) = *(SMath::Vec4*)(locJointTransforms + 0x0050);
	*(SMath::Vec4*)(pDependencyTable + 0x0650) = *(SMath::Vec4*)(locJointTransforms + 0x0060);
	*(SMath::Vec4*)(pDependencyTable + 0x0660) = *(SMath::Vec4*)(locJointTransforms + 0x0070);
	*(SMath::Vec4*)(pDependencyTable + 0x0030) = *(SMath::Vec4*)(locJointParams + 0x0030);
	*(SMath::Vec4*)(pDependencyTable + 0x0040) = *(SMath::Vec4*)(locJointParams + 0x0040);
	*(SMath::Vec4*)(pDependencyTable + 0x0050) = *(SMath::Vec4*)(locJointParams + 0x0050);
	*(SMath::Vec4*)(pDependencyTable + 0x0670) = *(SMath::Vec4*)(locJointTransforms + 0x0080);
	*(SMath::Vec4*)(pDependencyTable + 0x0680) = *(SMath::Vec4*)(locJointTransforms + 0x0090);
	*(SMath::Vec4*)(pDependencyTable + 0x0690) = *(SMath::Vec4*)(locJointTransforms + 0x00A0);
	*(SMath::Vec4*)(pDependencyTable + 0x06A0) = *(SMath::Vec4*)(locJointTransforms + 0x00B0);
	*(SMath::Vec4*)(pDependencyTable + 0x0060) = *(SMath::Vec4*)(locJointParams + 0x0060);
	*(SMath::Vec4*)(pDependencyTable + 0x0070) = *(SMath::Vec4*)(locJointParams + 0x0070);
	*(SMath::Vec4*)(pDependencyTable + 0x0080) = *(SMath::Vec4*)(locJointParams + 0x0080);
	*(SMath::Vec4*)(pDependencyTable + 0x06B0) = *(SMath::Vec4*)(locJointTransforms + 0x00C0);
	*(SMath::Vec4*)(pDependencyTable + 0x06C0) = *(SMath::Vec4*)(locJointTransforms + 0x00D0);
	*(SMath::Vec4*)(pDependencyTable + 0x06D0) = *(SMath::Vec4*)(locJointTransforms + 0x00E0);
	*(SMath::Vec4*)(pDependencyTable + 0x06E0) = *(SMath::Vec4*)(locJointTransforms + 0x00F0);
	*(SMath::Vec4*)(pDependencyTable + 0x0090) = *(SMath::Vec4*)(locJointParams + 0x0090);
	*(SMath::Vec4*)(pDependencyTable + 0x00A0) = *(SMath::Vec4*)(locJointParams + 0x00A0);
	*(SMath::Vec4*)(pDependencyTable + 0x00B0) = *(SMath::Vec4*)(locJointParams + 0x00B0);
	*(SMath::Vec4*)(pDependencyTable + 0x06F0) = *(SMath::Vec4*)(locJointTransforms + 0x0100);
	*(SMath::Vec4*)(pDependencyTable + 0x0700) = *(SMath::Vec4*)(locJointTransforms + 0x0110);
	*(SMath::Vec4*)(pDependencyTable + 0x0710) = *(SMath::Vec4*)(locJointTransforms + 0x0120);
	*(SMath::Vec4*)(pDependencyTable + 0x0720) = *(SMath::Vec4*)(locJointTransforms + 0x0130);
	*(SMath::Vec4*)(pDependencyTable + 0x00C0) = *(SMath::Vec4*)(locJointParams + 0x00C0);
	*(SMath::Vec4*)(pDependencyTable + 0x00D0) = *(SMath::Vec4*)(locJointParams + 0x00D0);
	*(SMath::Vec4*)(pDependencyTable + 0x00E0) = *(SMath::Vec4*)(locJointParams + 0x00E0);
	*(SMath::Vec4*)(pDependencyTable + 0x0730) = *(SMath::Vec4*)(locJointTransforms + 0x0140);
	*(SMath::Vec4*)(pDependencyTable + 0x0740) = *(SMath::Vec4*)(locJointTransforms + 0x0150);
	*(SMath::Vec4*)(pDependencyTable + 0x0750) = *(SMath::Vec4*)(locJointTransforms + 0x0160);
	*(SMath::Vec4*)(pDependencyTable + 0x0760) = *(SMath::Vec4*)(locJointTransforms + 0x0170);
	*(SMath::Vec4*)(pDependencyTable + 0x00F0) = *(SMath::Vec4*)(locJointParams + 0x00F0);
	*(SMath::Vec4*)(pDependencyTable + 0x0100) = *(SMath::Vec4*)(locJointParams + 0x0100);
	*(SMath::Vec4*)(pDependencyTable + 0x0110) = *(SMath::Vec4*)(locJointParams + 0x0110);
	*(SMath::Vec4*)(pDependencyTable + 0x0770) = *(SMath::Vec4*)(locJointTransforms + 0x0180);
	*(SMath::Vec4*)(pDependencyTable + 0x0780) = *(SMath::Vec4*)(locJointTransforms + 0x0190);
	*(SMath::Vec4*)(pDependencyTable + 0x0790) = *(SMath::Vec4*)(locJointTransforms + 0x01A0);
	*(SMath::Vec4*)(pDependencyTable + 0x07A0) = *(SMath::Vec4*)(locJointTransforms + 0x01B0);
	*(SMath::Vec4*)(pDependencyTable + 0x0120) = *(SMath::Vec4*)(locJointParams + 0x0120);
	*(SMath::Vec4*)(pDependencyTable + 0x0130) = *(SMath::Vec4*)(locJointParams + 0x0130);
	*(SMath::Vec4*)(pDependencyTable + 0x0140) = *(SMath::Vec4*)(locJointParams + 0x0140);
	*(SMath::Vec4*)(pDependencyTable + 0x07B0) = *(SMath::Vec4*)(locJointTransforms + 0x01C0);
	*(SMath::Vec4*)(pDependencyTable + 0x07C0) = *(SMath::Vec4*)(locJointTransforms + 0x01D0);
	*(SMath::Vec4*)(pDependencyTable + 0x07D0) = *(SMath::Vec4*)(locJointTransforms + 0x01E0);
	*(SMath::Vec4*)(pDependencyTable + 0x07E0) = *(SMath::Vec4*)(locJointTransforms + 0x01F0);
	*(SMath::Vec4*)(pDependencyTable + 0x0150) = *(SMath::Vec4*)(locJointParams + 0x0150);
	*(SMath::Vec4*)(pDependencyTable + 0x0160) = *(SMath::Vec4*)(locJointParams + 0x0160);
	*(SMath::Vec4*)(pDependencyTable + 0x0170) = *(SMath::Vec4*)(locJointParams + 0x0170);
	*(SMath::Vec4*)(pDependencyTable + 0x07F0) = *(SMath::Vec4*)(locJointTransforms + 0x0200);
	*(SMath::Vec4*)(pDependencyTable + 0x0800) = *(SMath::Vec4*)(locJointTransforms + 0x0210);
	*(SMath::Vec4*)(pDependencyTable + 0x0810) = *(SMath::Vec4*)(locJointTransforms + 0x0220);
	*(SMath::Vec4*)(pDependencyTable + 0x0820) = *(SMath::Vec4*)(locJointTransforms + 0x0230);
	*(SMath::Vec4*)(pDependencyTable + 0x0180) = *(SMath::Vec4*)(locJointParams + 0x0180);
	*(SMath::Vec4*)(pDependencyTable + 0x0190) = *(SMath::Vec4*)(locJointParams + 0x0190);
	*(SMath::Vec4*)(pDependencyTable + 0x01A0) = *(SMath::Vec4*)(locJointParams + 0x01A0);
	*(SMath::Vec4*)(pDependencyTable + 0x0830) = *(SMath::Vec4*)(locJointTransforms + 0x0240);
	*(SMath::Vec4*)(pDependencyTable + 0x0840) = *(SMath::Vec4*)(locJointTransforms + 0x0250);
	*(SMath::Vec4*)(pDependencyTable + 0x0850) = *(SMath::Vec4*)(locJointTransforms + 0x0260);
	*(SMath::Vec4*)(pDependencyTable + 0x0860) = *(SMath::Vec4*)(locJointTransforms + 0x0270);
	*(SMath::Vec4*)(pDependencyTable + 0x01B0) = *(SMath::Vec4*)(locJointParams + 0x01B0);
	*(SMath::Vec4*)(pDependencyTable + 0x01C0) = *(SMath::Vec4*)(locJointParams + 0x01C0);
	*(SMath::Vec4*)(pDependencyTable + 0x01D0) = *(SMath::Vec4*)(locJointParams + 0x01D0);
	*(SMath::Vec4*)(pDependencyTable + 0x0870) = *(SMath::Vec4*)(locJointTransforms + 0x0280);
	*(SMath::Vec4*)(pDependencyTable + 0x0880) = *(SMath::Vec4*)(locJointTransforms + 0x0290);
	*(SMath::Vec4*)(pDependencyTable + 0x0890) = *(SMath::Vec4*)(locJointTransforms + 0x02A0);
	*(SMath::Vec4*)(pDependencyTable + 0x08A0) = *(SMath::Vec4*)(locJointTransforms + 0x02B0);
	*(SMath::Vec4*)(pDependencyTable + 0x08B0) = *(SMath::Vec4*)(locJointTransforms + 0x02C0);
	*(SMath::Vec4*)(pDependencyTable + 0x08C0) = *(SMath::Vec4*)(locJointTransforms + 0x02D0);
	*(SMath::Vec4*)(pDependencyTable + 0x08D0) = *(SMath::Vec4*)(locJointTransforms + 0x02E0);
	*(SMath::Vec4*)(pDependencyTable + 0x08E0) = *(SMath::Vec4*)(locJointTransforms + 0x02F0);
	*(SMath::Vec4*)(pDependencyTable + 0x08F0) = *(SMath::Vec4*)(locJointTransforms + 0x0500);
	*(SMath::Vec4*)(pDependencyTable + 0x0900) = *(SMath::Vec4*)(locJointTransforms + 0x0510);
	*(SMath::Vec4*)(pDependencyTable + 0x0910) = *(SMath::Vec4*)(locJointTransforms + 0x0520);
	*(SMath::Vec4*)(pDependencyTable + 0x0920) = *(SMath::Vec4*)(locJointTransforms + 0x0530);
	*(SMath::Vec4*)(pDependencyTable + 0x0930) = *(SMath::Vec4*)(locJointTransforms + 0x0540);
	*(SMath::Vec4*)(pDependencyTable + 0x0940) = *(SMath::Vec4*)(locJointTransforms + 0x0550);
	*(SMath::Vec4*)(pDependencyTable + 0x0950) = *(SMath::Vec4*)(locJointTransforms + 0x0560);
	*(SMath::Vec4*)(pDependencyTable + 0x0960) = *(SMath::Vec4*)(locJointTransforms + 0x0570);
	*(SMath::Vec4*)(pDependencyTable + 0x01E0) = *(SMath::Vec4*)(locJointParams + 0x03F0);
	*(SMath::Vec4*)(pDependencyTable + 0x01F0) = *(SMath::Vec4*)(locJointParams + 0x0400);
	*(SMath::Vec4*)(pDependencyTable + 0x0200) = *(SMath::Vec4*)(locJointParams + 0x0410);
	*(SMath::Vec4*)(pDependencyTable + 0x0970) = *(SMath::Vec4*)(locJointTransforms + 0x0580);
	*(SMath::Vec4*)(pDependencyTable + 0x0980) = *(SMath::Vec4*)(locJointTransforms + 0x0590);
	*(SMath::Vec4*)(pDependencyTable + 0x0990) = *(SMath::Vec4*)(locJointTransforms + 0x05A0);
	*(SMath::Vec4*)(pDependencyTable + 0x09A0) = *(SMath::Vec4*)(locJointTransforms + 0x05B0);
	*(SMath::Vec4*)(pDependencyTable + 0x0210) = *(SMath::Vec4*)(locJointParams + 0x0420);
	*(SMath::Vec4*)(pDependencyTable + 0x0220) = *(SMath::Vec4*)(locJointParams + 0x0430);
	*(SMath::Vec4*)(pDependencyTable + 0x0230) = *(SMath::Vec4*)(locJointParams + 0x0440);
	*(SMath::Vec4*)(pDependencyTable + 0x09B0) = *(SMath::Vec4*)(locJointTransforms + 0x05C0);
	*(SMath::Vec4*)(pDependencyTable + 0x09C0) = *(SMath::Vec4*)(locJointTransforms + 0x05D0);
	*(SMath::Vec4*)(pDependencyTable + 0x09D0) = *(SMath::Vec4*)(locJointTransforms + 0x05E0);
	*(SMath::Vec4*)(pDependencyTable + 0x09E0) = *(SMath::Vec4*)(locJointTransforms + 0x05F0);
	*(SMath::Vec4*)(pDependencyTable + 0x0240) = *(SMath::Vec4*)(locJointParams + 0x0450);
	*(SMath::Vec4*)(pDependencyTable + 0x0250) = *(SMath::Vec4*)(locJointParams + 0x0460);
	*(SMath::Vec4*)(pDependencyTable + 0x0260) = *(SMath::Vec4*)(locJointParams + 0x0470);
	*(SMath::Vec4*)(pDependencyTable + 0x09F0) = *(SMath::Vec4*)(locJointTransforms + 0x0600);
	*(SMath::Vec4*)(pDependencyTable + 0x0A00) = *(SMath::Vec4*)(locJointTransforms + 0x0610);
	*(SMath::Vec4*)(pDependencyTable + 0x0A10) = *(SMath::Vec4*)(locJointTransforms + 0x0620);
	*(SMath::Vec4*)(pDependencyTable + 0x0A20) = *(SMath::Vec4*)(locJointTransforms + 0x0630);
	*(SMath::Vec4*)(pDependencyTable + 0x0270) = *(SMath::Vec4*)(locJointParams + 0x0480);
	*(SMath::Vec4*)(pDependencyTable + 0x0280) = *(SMath::Vec4*)(locJointParams + 0x0490);
	*(SMath::Vec4*)(pDependencyTable + 0x0290) = *(SMath::Vec4*)(locJointParams + 0x04A0);
	*(SMath::Vec4*)(pDependencyTable + 0x0A30) = *(SMath::Vec4*)(locJointTransforms + 0x0640);
	*(SMath::Vec4*)(pDependencyTable + 0x0A40) = *(SMath::Vec4*)(locJointTransforms + 0x0650);
	*(SMath::Vec4*)(pDependencyTable + 0x0A50) = *(SMath::Vec4*)(locJointTransforms + 0x0660);
	*(SMath::Vec4*)(pDependencyTable + 0x0A60) = *(SMath::Vec4*)(locJointTransforms + 0x0670);
	*(SMath::Vec4*)(pDependencyTable + 0x02A0) = *(SMath::Vec4*)(locJointParams + 0x04B0);
	*(SMath::Vec4*)(pDependencyTable + 0x02B0) = *(SMath::Vec4*)(locJointParams + 0x04C0);
	*(SMath::Vec4*)(pDependencyTable + 0x02C0) = *(SMath::Vec4*)(locJointParams + 0x04D0);
	*(SMath::Vec4*)(pDependencyTable + 0x0A70) = *(SMath::Vec4*)(locJointTransforms + 0x0680);
	*(SMath::Vec4*)(pDependencyTable + 0x0A80) = *(SMath::Vec4*)(locJointTransforms + 0x0690);
	*(SMath::Vec4*)(pDependencyTable + 0x0A90) = *(SMath::Vec4*)(locJointTransforms + 0x06A0);
	*(SMath::Vec4*)(pDependencyTable + 0x0AA0) = *(SMath::Vec4*)(locJointTransforms + 0x06B0);
	*(SMath::Vec4*)(pDependencyTable + 0x02D0) = *(SMath::Vec4*)(locJointParams + 0x04E0);
	*(SMath::Vec4*)(pDependencyTable + 0x02E0) = *(SMath::Vec4*)(locJointParams + 0x04F0);
	*(SMath::Vec4*)(pDependencyTable + 0x02F0) = *(SMath::Vec4*)(locJointParams + 0x0500);
	*(SMath::Vec4*)(pDependencyTable + 0x0AB0) = *(SMath::Vec4*)(locJointTransforms + 0x06C0);
	*(SMath::Vec4*)(pDependencyTable + 0x0AC0) = *(SMath::Vec4*)(locJointTransforms + 0x06D0);
	*(SMath::Vec4*)(pDependencyTable + 0x0AD0) = *(SMath::Vec4*)(locJointTransforms + 0x06E0);
	*(SMath::Vec4*)(pDependencyTable + 0x0AE0) = *(SMath::Vec4*)(locJointTransforms + 0x06F0);
	*(SMath::Vec4*)(pDependencyTable + 0x0300) = *(SMath::Vec4*)(locJointParams + 0x0510);
	*(SMath::Vec4*)(pDependencyTable + 0x0310) = *(SMath::Vec4*)(locJointParams + 0x0520);
	*(SMath::Vec4*)(pDependencyTable + 0x0320) = *(SMath::Vec4*)(locJointParams + 0x0530);
	*(SMath::Vec4*)(pDependencyTable + 0x0AF0) = *(SMath::Vec4*)(locJointTransforms + 0x0700);
	*(SMath::Vec4*)(pDependencyTable + 0x0B00) = *(SMath::Vec4*)(locJointTransforms + 0x0710);
	*(SMath::Vec4*)(pDependencyTable + 0x0B10) = *(SMath::Vec4*)(locJointTransforms + 0x0720);
	*(SMath::Vec4*)(pDependencyTable + 0x0B20) = *(SMath::Vec4*)(locJointTransforms + 0x0730);
	*(SMath::Vec4*)(pDependencyTable + 0x0330) = *(SMath::Vec4*)(locJointParams + 0x0540);
	*(SMath::Vec4*)(pDependencyTable + 0x0340) = *(SMath::Vec4*)(locJointParams + 0x0550);
	*(SMath::Vec4*)(pDependencyTable + 0x0350) = *(SMath::Vec4*)(locJointParams + 0x0560);
	*(SMath::Vec4*)(pDependencyTable + 0x0B30) = *(SMath::Vec4*)(locJointTransforms + 0x0740);
	*(SMath::Vec4*)(pDependencyTable + 0x0B40) = *(SMath::Vec4*)(locJointTransforms + 0x0750);
	*(SMath::Vec4*)(pDependencyTable + 0x0B50) = *(SMath::Vec4*)(locJointTransforms + 0x0760);
	*(SMath::Vec4*)(pDependencyTable + 0x0B60) = *(SMath::Vec4*)(locJointTransforms + 0x0770);
	*(SMath::Vec4*)(pDependencyTable + 0x0360) = *(SMath::Vec4*)(locJointParams + 0x0570);
	*(SMath::Vec4*)(pDependencyTable + 0x0370) = *(SMath::Vec4*)(locJointParams + 0x0580);
	*(SMath::Vec4*)(pDependencyTable + 0x0380) = *(SMath::Vec4*)(locJointParams + 0x0590);
	*(SMath::Vec4*)(pDependencyTable + 0x0B70) = *(SMath::Vec4*)(locJointTransforms + 0x0780);
	*(SMath::Vec4*)(pDependencyTable + 0x0B80) = *(SMath::Vec4*)(locJointTransforms + 0x0790);
	*(SMath::Vec4*)(pDependencyTable + 0x0B90) = *(SMath::Vec4*)(locJointTransforms + 0x07A0);
	*(SMath::Vec4*)(pDependencyTable + 0x0BA0) = *(SMath::Vec4*)(locJointTransforms + 0x07B0);
	*(SMath::Vec4*)(pDependencyTable + 0x0390) = *(SMath::Vec4*)(locJointParams + 0x05A0);
	*(SMath::Vec4*)(pDependencyTable + 0x03A0) = *(SMath::Vec4*)(locJointParams + 0x05B0);
	*(SMath::Vec4*)(pDependencyTable + 0x03B0) = *(SMath::Vec4*)(locJointParams + 0x05C0);
	*(SMath::Vec4*)(pDependencyTable + 0x0BB0) = *(SMath::Vec4*)(locJointTransforms + 0x07C0);
	*(SMath::Vec4*)(pDependencyTable + 0x0BC0) = *(SMath::Vec4*)(locJointTransforms + 0x07D0);
	*(SMath::Vec4*)(pDependencyTable + 0x0BD0) = *(SMath::Vec4*)(locJointTransforms + 0x07E0);
	*(SMath::Vec4*)(pDependencyTable + 0x0BE0) = *(SMath::Vec4*)(locJointTransforms + 0x07F0);
	*(SMath::Vec4*)(pDependencyTable + 0x03C0) = *(SMath::Vec4*)(locJointParams + 0x05D0);
	*(SMath::Vec4*)(pDependencyTable + 0x03D0) = *(SMath::Vec4*)(locJointParams + 0x05E0);
	*(SMath::Vec4*)(pDependencyTable + 0x03E0) = *(SMath::Vec4*)(locJointParams + 0x05F0);
	*(SMath::Vec4*)(pDependencyTable + 0x03F0) = *(SMath::Vec4*)(locJointParams + 0x0600);
	*(SMath::Vec4*)(pDependencyTable + 0x0400) = *(SMath::Vec4*)(locJointParams + 0x0610);
	*(SMath::Vec4*)(pDependencyTable + 0x0410) = *(SMath::Vec4*)(locJointParams + 0x0620);
	*(SMath::Vec4*)(pDependencyTable + 0x0420) = *(SMath::Vec4*)(locJointParams + 0x0690);
	*(SMath::Vec4*)(pDependencyTable + 0x0430) = *(SMath::Vec4*)(locJointParams + 0x06A0);
	*(SMath::Vec4*)(pDependencyTable + 0x0440) = *(SMath::Vec4*)(locJointParams + 0x06B0);
	*(SMath::Vec4*)(pDependencyTable + 0x0BF0) = *(SMath::Vec4*)(locJointTransforms + 0x0900);
	*(SMath::Vec4*)(pDependencyTable + 0x0C00) = *(SMath::Vec4*)(locJointTransforms + 0x0910);
	*(SMath::Vec4*)(pDependencyTable + 0x0C10) = *(SMath::Vec4*)(locJointTransforms + 0x0920);
	*(SMath::Vec4*)(pDependencyTable + 0x0C20) = *(SMath::Vec4*)(locJointTransforms + 0x0930);
	*(SMath::Vec4*)(pDependencyTable + 0x0450) = *(SMath::Vec4*)(locJointParams + 0x08D0);
	*(SMath::Vec4*)(pDependencyTable + 0x0460) = *(SMath::Vec4*)(locJointParams + 0x08E0);
	*(SMath::Vec4*)(pDependencyTable + 0x0470) = *(SMath::Vec4*)(locJointParams + 0x08F0);
	*(SMath::Vec4*)(pDependencyTable + 0x0C30) = *(SMath::Vec4*)(locJointTransforms + 0x0C00);
	*(SMath::Vec4*)(pDependencyTable + 0x0C40) = *(SMath::Vec4*)(locJointTransforms + 0x0C10);
	*(SMath::Vec4*)(pDependencyTable + 0x0C50) = *(SMath::Vec4*)(locJointTransforms + 0x0C20);
	*(SMath::Vec4*)(pDependencyTable + 0x0C60) = *(SMath::Vec4*)(locJointTransforms + 0x0C30);
	*(SMath::Vec4*)(pDependencyTable + 0x0480) = *(SMath::Vec4*)(locJointParams + 0x0900);
	*(SMath::Vec4*)(pDependencyTable + 0x0490) = *(SMath::Vec4*)(locJointParams + 0x0910);
	*(SMath::Vec4*)(pDependencyTable + 0x04A0) = *(SMath::Vec4*)(locJointParams + 0x0920);
	*(SMath::Vec4*)(pDependencyTable + 0x0C70) = *(SMath::Vec4*)(locJointTransforms + 0x0C40);
	*(SMath::Vec4*)(pDependencyTable + 0x0C80) = *(SMath::Vec4*)(locJointTransforms + 0x0C50);
	*(SMath::Vec4*)(pDependencyTable + 0x0C90) = *(SMath::Vec4*)(locJointTransforms + 0x0C60);
	*(SMath::Vec4*)(pDependencyTable + 0x0CA0) = *(SMath::Vec4*)(locJointTransforms + 0x0C70);
	*(SMath::Vec4*)(pDependencyTable + 0x04B0) = *(SMath::Vec4*)(locJointParams + 0x0930);
	*(SMath::Vec4*)(pDependencyTable + 0x04C0) = *(SMath::Vec4*)(locJointParams + 0x0940);
	*(SMath::Vec4*)(pDependencyTable + 0x04D0) = *(SMath::Vec4*)(locJointParams + 0x0950);
	*(SMath::Vec4*)(pDependencyTable + 0x0CB0) = *(SMath::Vec4*)(locJointTransforms + 0x0C80);
	*(SMath::Vec4*)(pDependencyTable + 0x0CC0) = *(SMath::Vec4*)(locJointTransforms + 0x0C90);
	*(SMath::Vec4*)(pDependencyTable + 0x0CD0) = *(SMath::Vec4*)(locJointTransforms + 0x0CA0);
	*(SMath::Vec4*)(pDependencyTable + 0x0CE0) = *(SMath::Vec4*)(locJointTransforms + 0x0CB0);
	*(SMath::Vec4*)(pDependencyTable + 0x04E0) = *(SMath::Vec4*)(locJointParams + 0x0960);
	*(SMath::Vec4*)(pDependencyTable + 0x04F0) = *(SMath::Vec4*)(locJointParams + 0x0970);
	*(SMath::Vec4*)(pDependencyTable + 0x0500) = *(SMath::Vec4*)(locJointParams + 0x0980);
	*(SMath::Vec4*)(pDependencyTable + 0x0CF0) = *(SMath::Vec4*)(locJointTransforms + 0x0CC0);
	*(SMath::Vec4*)(pDependencyTable + 0x0D00) = *(SMath::Vec4*)(locJointTransforms + 0x0CD0);
	*(SMath::Vec4*)(pDependencyTable + 0x0D10) = *(SMath::Vec4*)(locJointTransforms + 0x0CE0);
	*(SMath::Vec4*)(pDependencyTable + 0x0D20) = *(SMath::Vec4*)(locJointTransforms + 0x0CF0);
	*(SMath::Vec4*)(pDependencyTable + 0x0510) = *(SMath::Vec4*)(locJointParams + 0x0990);
	*(SMath::Vec4*)(pDependencyTable + 0x0520) = *(SMath::Vec4*)(locJointParams + 0x09A0);
	*(SMath::Vec4*)(pDependencyTable + 0x0530) = *(SMath::Vec4*)(locJointParams + 0x09B0);
	*(SMath::Vec4*)(pDependencyTable + 0x0D30) = *(SMath::Vec4*)(locJointTransforms + 0x0D00);
	*(SMath::Vec4*)(pDependencyTable + 0x0D40) = *(SMath::Vec4*)(locJointTransforms + 0x0D10);
	*(SMath::Vec4*)(pDependencyTable + 0x0D50) = *(SMath::Vec4*)(locJointTransforms + 0x0D20);
	*(SMath::Vec4*)(pDependencyTable + 0x0D60) = *(SMath::Vec4*)(locJointTransforms + 0x0D30);
	*(SMath::Vec4*)(pDependencyTable + 0x0540) = *(SMath::Vec4*)(locJointParams + 0x09C0);
	*(SMath::Vec4*)(pDependencyTable + 0x0550) = *(SMath::Vec4*)(locJointParams + 0x09D0);
	*(SMath::Vec4*)(pDependencyTable + 0x0560) = *(SMath::Vec4*)(locJointParams + 0x09E0);
	*(SMath::Vec4*)(pDependencyTable + 0x0D70) = *(SMath::Vec4*)(locJointTransforms + 0x0D40);
	*(SMath::Vec4*)(pDependencyTable + 0x0D80) = *(SMath::Vec4*)(locJointTransforms + 0x0D50);
	*(SMath::Vec4*)(pDependencyTable + 0x0D90) = *(SMath::Vec4*)(locJointTransforms + 0x0D60);
	*(SMath::Vec4*)(pDependencyTable + 0x0DA0) = *(SMath::Vec4*)(locJointTransforms + 0x0D70);
	*(SMath::Vec4*)(pDependencyTable + 0x0570) = *(SMath::Vec4*)(locJointParams + 0x09F0);
	*(SMath::Vec4*)(pDependencyTable + 0x0580) = *(SMath::Vec4*)(locJointParams + 0x0A00);
	*(SMath::Vec4*)(pDependencyTable + 0x0590) = *(SMath::Vec4*)(locJointParams + 0x0A10);
	*(SMath::Vec4*)(pDependencyTable + 0x0DB0) = *(SMath::Vec4*)(locJointTransforms + 0x0D80);
	*(SMath::Vec4*)(pDependencyTable + 0x0DC0) = *(SMath::Vec4*)(locJointTransforms + 0x0D90);
	*(SMath::Vec4*)(pDependencyTable + 0x0DD0) = *(SMath::Vec4*)(locJointTransforms + 0x0DA0);
	*(SMath::Vec4*)(pDependencyTable + 0x0DE0) = *(SMath::Vec4*)(locJointTransforms + 0x0DB0);
	*(SMath::Vec4*)(pDependencyTable + 0x05A0) = *(SMath::Vec4*)(locJointParams + 0x0A20);
	*(SMath::Vec4*)(pDependencyTable + 0x05B0) = *(SMath::Vec4*)(locJointParams + 0x0A30);
	*(SMath::Vec4*)(pDependencyTable + 0x05C0) = *(SMath::Vec4*)(locJointParams + 0x0A40);
	*(SMath::Vec4*)(pDependencyTable + 0x0DF0) = *(SMath::Vec4*)(locJointTransforms + 0x0DC0);
	*(SMath::Vec4*)(pDependencyTable + 0x0E00) = *(SMath::Vec4*)(locJointTransforms + 0x0DD0);
	*(SMath::Vec4*)(pDependencyTable + 0x0E10) = *(SMath::Vec4*)(locJointTransforms + 0x0DE0);
	*(SMath::Vec4*)(pDependencyTable + 0x0E20) = *(SMath::Vec4*)(locJointTransforms + 0x0DF0);
	*(SMath::Vec4*)(pDependencyTable + 0x05D0) = *(SMath::Vec4*)(locJointParams + 0x0A50);
	*(SMath::Vec4*)(pDependencyTable + 0x05E0) = *(SMath::Vec4*)(locJointParams + 0x0A60);
	*(SMath::Vec4*)(pDependencyTable + 0x05F0) = *(SMath::Vec4*)(locJointParams + 0x0A70);
	*(SMath::Vec4*)(pDependencyTable + 0x0600) = *(SMath::Vec4*)(locJointParams + 0x0A80);
	*(SMath::Vec4*)(pDependencyTable + 0x0610) = *(SMath::Vec4*)(locJointParams + 0x0A90);
	*(SMath::Vec4*)(pDependencyTable + 0x0620) = *(SMath::Vec4*)(locJointParams + 0x0AA0);
	*(SMath::Vec4*)(pDependencyTable + 0x0620) = *(SMath::Vec4*)(locJointParams + 0x0AA0);
}

static void HierarchyConstantCommand_Seg1Cmd0(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Const", OrbisAnim::Perf::kBlue);
	*(vec_float4*)(locJointParams + 0x0000) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0020) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0030) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0050) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0060) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0080) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0090) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x00B0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x00C0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x00E0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x00F0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0110) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0120) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0140) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0150) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0170) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0180) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x01A0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x01B0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x01D0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x07D0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x07E0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0800) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0210) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0230) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0240) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0260) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0270) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0290) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x02A0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x02C0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x02D0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x02F0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0300) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0320) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0810) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0830) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x08D0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x08F0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0900) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0920) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0930) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x03E0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0950) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0960) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0570) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0440) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0980) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0990) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x09B0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0A70) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0B60) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x04B0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x04D0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x04E0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0500) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0510) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0530) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0540) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0560) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x06E0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0590) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x05A0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x05C0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0680) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0720) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0740) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0750) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0770) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0780) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x07A0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x07B0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x01E0) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0C00) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0A20) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0330) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0B40) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0360) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0450) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0390) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0A50) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x03C0) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x03F0) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x06C0) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0A80) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0420) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0480) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0AB0) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0B70) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x06F0) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0840) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0AE0) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0870) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0BD0) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x08A0) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0BA0) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0660) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0600) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0630) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x05D0) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0690) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x09C0) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0B10) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x09F0) = sce_vectormath_hexfloat4i(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000);	// (1.000000f, 1.000000f, 1.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x01F0) = sce_vectormath_hexfloat4i(0xb304bad8, 0x3f350c81, 0xbf34fd65, 0xb304c5ed);	// (-0.000000f, 0.707222f, -0.706991f, -0.000000f)
	*(vec_float4*)(locJointParams + 0x0200) = sce_vectormath_hexfloat4i(0x3afb8239, 0x272ec76c, 0xa5b7ed92, 0x3f800000);	// (0.001919f, 0.000000f, -0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0350) = sce_vectormath_hexfloat4i(0x24133333, 0xa5133333, 0x3d42cde1, 0x3f800000);	// (0.000000f, -0.000000f, 0.047560f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0380) = sce_vectormath_hexfloat4i(0x2480cccd, 0, 0x3d42cde1, 0x3f800000);	// (0.000000f, 0.000000f, 0.047560f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x03B0) = sce_vectormath_hexfloat4i(0x36e5bdec, 0xb8ec2bd8, 0x3e476bf4, 0x3f800000);	// (0.000007f, -0.000113f, 0.194748f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0410) = sce_vectormath_hexfloat4i(0xa3dccccc, 0x266f3333, 0x3dc7353d, 0x3f800000);	// (-0.000000f, 0.000000f, 0.097270f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0470) = sce_vectormath_hexfloat4i(0xa4ef3333, 0x25933333, 0x3d8a9231, 0x3f800000);	// (-0.000000f, 0.000000f, 0.067662f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0490) = sce_vectormath_hexfloat4i(0xb304bad8, 0x3f34fd65, 0x3f350c81, 0xb304c5ed);	// (-0.000000f, 0.706991f, 0.707222f, -0.000000f)
	*(vec_float4*)(locJointParams + 0x04A0) = sce_vectormath_hexfloat4i(0xbafb821b, 0x340a7376, 0xb4e8ab5c, 0x3f800000);	// (-0.001919f, 0.000000f, -0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0620) = sce_vectormath_hexfloat4i(0xb2e1e684, 0xb3ed51fa, 0xbd42ce10, 0x3f800000);	// (-0.000000f, -0.000000f, -0.047560f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x05F0) = sce_vectormath_hexfloat4i(0xb2e1e684, 0xb3ed51fa, 0xbd42ce10, 0x3f800000);	// (-0.000000f, -0.000000f, -0.047560f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0650) = sce_vectormath_hexfloat4i(0xb6e20946, 0x38ec4a14, 0xbe476c13, 0x3f800000);	// (-0.000007f, 0.000113f, -0.194748f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x06B0) = sce_vectormath_hexfloat4i(0x3306842a, 0xb3294271, 0xbdc73554, 0x3f800000);	// (0.000000f, -0.000000f, -0.097270f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0710) = sce_vectormath_hexfloat4i(0xb1ca2b7f, 0x344d7e2a, 0xbd8a9218, 0x3f800000);	// (-0.000000f, 0.000000f, -0.067661f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0860) = sce_vectormath_hexfloat4i(0xa45ccccc, 0xa5133333, 0x3d8ae977, 0x3f800000);	// (-0.000000f, -0.000000f, 0.067828f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0890) = sce_vectormath_hexfloat4i(0xa3933333, 0xa500cccd, 0x3d8ae977, 0x3f800000);	// (-0.000000f, -0.000000f, 0.067828f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x08C0) = sce_vectormath_hexfloat4i(0x37249e27, 0x3918c806, 0x3e905ecd, 0x3f800000);	// (0.000010f, 0.000146f, 0.281973f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x09E0) = sce_vectormath_hexfloat4i(0xb486184b, 0xb4823b6c, 0xbd8ae99b, 0x3f800000);	// (-0.000000f, -0.000000f, -0.067828f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0A10) = sce_vectormath_hexfloat4i(0xb486184b, 0xb4823b6c, 0xbd8ae99b, 0x3f800000);	// (-0.000000f, -0.000000f, -0.067828f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0A40) = sce_vectormath_hexfloat4i(0xb722dd21, 0xb918d3cb, 0xbe905ecc, 0x3f800000);	// (-0.000010f, -0.000146f, -0.281973f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0AA0) = sce_vectormath_hexfloat4i(0xa54a6666, 0xa4ef3333, 0x3e104a90, 0x3f800000);	// (-0.000000f, -0.000000f, 0.140909f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0AD0) = sce_vectormath_hexfloat4i(0x25f86666, 0xa5660000, 0x3d904a90, 0x3f800000);	// (0.000000f, -0.000000f, 0.070455f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0B00) = sce_vectormath_hexfloat4i(0x25ef3333, 0xa580cccd, 0x3e104a90, 0x3f800000);	// (0.000000f, -0.000000f, 0.140909f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0B30) = sce_vectormath_hexfloat4i(0x25e60000, 0xa58e9999, 0x3e586fd8, 0x3f800000);	// (0.000000f, -0.000000f, 0.211364f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0B90) = sce_vectormath_hexfloat4i(0x34216775, 0xb209b8c4, 0xbe104a92, 0x3f800000);	// (0.000000f, -0.000000f, -0.140909f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0BC0) = sce_vectormath_hexfloat4i(0x330ece79, 0x329546f4, 0xbd904a60, 0x3f800000);	// (0.000000f, 0.000000f, -0.070454f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0BF0) = sce_vectormath_hexfloat4i(0x3374f44f, 0xb1511aea, 0xbe104a7f, 0x3f800000);	// (0.000000f, -0.000000f, -0.140909f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0C20) = sce_vectormath_hexfloat4i(0x33ad8d12, 0xb2c98daf, 0xbe586fcf, 0x3f800000);	// (0.000000f, -0.000000f, -0.211364f, 1.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x09C0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0CF0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0D00) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0D10) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0D20) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0D30) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0D40) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0D50) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0D60) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0D70) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0D80) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0D90) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0DA0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0DB0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0DC0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0DD0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0DE0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0DF0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0E00) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0E10) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0E20) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0E30) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0E40) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0E50) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0E60) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0E70) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0E80) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0E90) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0EA0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0EB0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0EC0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0ED0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0EE0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0EF0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0F00) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0F10) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0F20) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0F30) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0F40) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0F50) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0F60) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0F70) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0F80) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0F90) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0FA0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0FB0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0FC0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0FD0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0FE0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x0FF0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1000) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1010) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1020) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1030) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1040) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1050) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1060) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1070) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1080) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1090) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x10A0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x10B0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x10C0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x10D0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x10E0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x10F0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1100) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1110) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1120) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1130) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1140) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1150) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1160) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1170) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1180) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1190) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x11A0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x11B0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x11C0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x11D0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x11E0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x11F0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1200) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1210) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1220) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1230) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1240) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1250) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1260) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1270) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1280) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1290) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x12A0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x12B0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x12C0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x12D0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x12E0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x12F0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1300) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1310) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1320) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1330) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1340) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1350) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1360) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1370) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1380) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1390) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x13A0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x13B0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x13C0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x13D0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x13E0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x13F0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1400) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1410) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1420) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1430) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1440) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1450) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1460) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1460) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1460) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x1460) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(uint32_t*)(locSdkScalarTable + 0x0ACC) = 0;
	*(uint32_t*)(locSdkScalarTable + 0x0AD0) = 0;
	*(uint32_t*)(locSdkScalarTable + 0x0AD4) = 0;
	*(uint32_t*)(locSdkScalarTable + 0x0AD8) = 0;
	*(uint32_t*)(locSdkScalarTable + 0x0BD8) = 0;
	*(uint32_t*)(locSdkScalarTable + 0x0BDC) = 0;
	*(uint32_t*)(locSdkScalarTable + 0x0BE0) = 0;
	*(uint32_t*)(locSdkScalarTable + 0x0BE4) = 0;
	*(uint32_t*)(locSdkScalarTable + 0x0CE4) = 0;
	*(uint32_t*)(locSdkScalarTable + 0x0CE8) = 0;
	*(uint32_t*)(locSdkScalarTable + 0x0CEC) = 0;
	*(uint32_t*)(locSdkScalarTable + 0x0CEC) = 0;
}

// root_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd1(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		3,
		0,
		OrbisAnim::Location(0x0002)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.595116f, 0.000332f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x0003),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

static void HierarchySdkDriverRotCommand_Seg1Cmd2(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;
	const char* __restrict pDependencyTable = (const char*)pContext->m_pDependencyTable;

	// SdkDriverRotOperation (QuatToEuler)
	{
		ORBISANIM_MARKER_SCOPED("Quat2Euler", OrbisAnim::Perf::kCyan);
		sceMath::Aos::Quat q = *(sceMath::Aos::Quat const*)(pDependencyTable + 0x02B0);
		sceMath::Aos::Quat conjOrient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbe7b1872, 0x3bec5ade, 0x3b0a71ca, 0x3f782d44));
		q = conjOrient * q;
		sceMath::Aos::Vector3 euler = sceMath::Aos::Quat::euler(q, sceMath::kXYZ);
		*(float*)(locSdkScalarTable + 0x09C0) = RADIANS_TO_DEGREES(euler.getX().getAsFloat());
		*(float*)(locSdkScalarTable + 0x0ACC) = RADIANS_TO_DEGREES(euler.getY().getAsFloat());
		*(float*)(locSdkScalarTable + 0x0BD8) = RADIANS_TO_DEGREES(euler.getZ().getAsFloat());
	}
	// SdkDriverRotOperation (QuatToEuler)
	{
		ORBISANIM_MARKER_SCOPED("Quat2Euler", OrbisAnim::Perf::kCyan);
		sceMath::Aos::Quat q = *(sceMath::Aos::Quat const*)(pDependencyTable + 0x02E0);
		sceMath::Aos::Quat conjOrient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbe7b1872, 0x3bec5ade, 0x3b0a71ca, 0x3f782d44));
		q = conjOrient * q;
		sceMath::Aos::Vector3 euler = sceMath::Aos::Quat::euler(q, sceMath::kXYZ);
		*(float*)(locSdkScalarTable + 0x09C4) = RADIANS_TO_DEGREES(euler.getX().getAsFloat());
		*(float*)(locSdkScalarTable + 0x0AD0) = RADIANS_TO_DEGREES(euler.getY().getAsFloat());
		*(float*)(locSdkScalarTable + 0x0BDC) = RADIANS_TO_DEGREES(euler.getZ().getAsFloat());
	}
	// SdkDriverRotOperation (QuatToEuler)
	{
		ORBISANIM_MARKER_SCOPED("Quat2Euler", OrbisAnim::Perf::kCyan);
		sceMath::Aos::Quat q = *(sceMath::Aos::Quat const*)(pDependencyTable + 0x04C0);
		sceMath::Aos::Quat conjOrient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3ebcc8f1, 0xbce32fab, 0xbbee6e16, 0x3f6dd95e));
		q = conjOrient * q;
		sceMath::Aos::Vector3 euler = sceMath::Aos::Quat::euler(q, sceMath::kXYZ);
		*(float*)(locSdkScalarTable + 0x09C8) = RADIANS_TO_DEGREES(euler.getX().getAsFloat());
		*(float*)(locSdkScalarTable + 0x0AD4) = RADIANS_TO_DEGREES(euler.getY().getAsFloat());
		*(float*)(locSdkScalarTable + 0x0BE0) = RADIANS_TO_DEGREES(euler.getZ().getAsFloat());
	}
	// SdkDriverRotOperation (QuatToEuler)
	{
		ORBISANIM_MARKER_SCOPED("Quat2Euler", OrbisAnim::Perf::kCyan);
		sceMath::Aos::Quat q = *(sceMath::Aos::Quat const*)(pDependencyTable + 0x04F0);
		sceMath::Aos::Quat conjOrient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3ebcc8f1, 0xbce32fab, 0xbbee6e16, 0x3f6dd95e));
		q = conjOrient * q;
		sceMath::Aos::Vector3 euler = sceMath::Aos::Quat::euler(q, sceMath::kXYZ);
		*(float*)(locSdkScalarTable + 0x09CC) = RADIANS_TO_DEGREES(euler.getX().getAsFloat());
		*(float*)(locSdkScalarTable + 0x0AD8) = RADIANS_TO_DEGREES(euler.getY().getAsFloat());
		*(float*)(locSdkScalarTable + 0x0BE4) = RADIANS_TO_DEGREES(euler.getZ().getAsFloat());
	}
}

// root_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd3(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0002),
		{
			OrbisAnim::Location(0x0CE6),
			OrbisAnim::Location(0x0CEA),
			OrbisAnim::Location(0x0CEE),
		},
		{
			OrbisAnim::Location(0x0CF2),
			OrbisAnim::Location(0x0CF6),
			OrbisAnim::Location(0x0CFA),
		},
		{
			OrbisAnim::Location(0x0CFE),
			OrbisAnim::Location(0x0D02),
			OrbisAnim::Location(0x0D06)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_elbow_helper_weighted_PB_01
static void NdiPairBlendCommand_Seg1Cmd4(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::PairBlendParams params = {
		0x11BF69,
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, 0.000000f, 0.000000f },
		0.500000f,
		OrbisAnim::CommandBlock::PairBlendParams::kInRotate2Connected | OrbisAnim::CommandBlock::PairBlendParams::kOutRotateConnected,
		{
			OrbisAnim::Location(0x09C2),
			OrbisAnim::Location(0x0ACE),
			OrbisAnim::Location(0x0BDA),
			OrbisAnim::Location(0x0F3E),
			OrbisAnim::Location(0x0F42),
			OrbisAnim::Location(0x0F46),
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandPairBlendImpl(&hierarchyHeader, &params);
}

// r_elbow_helper_weighted_PB_01
static void NdiPairBlendCommand_Seg1Cmd5(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::PairBlendParams params = {
		0x11BF69,
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, 0.000000f, 0.000000f },
		0.500000f,
		OrbisAnim::CommandBlock::PairBlendParams::kInRotate2Connected | OrbisAnim::CommandBlock::PairBlendParams::kOutRotateConnected,
		{
			OrbisAnim::Location(0x09C6),
			OrbisAnim::Location(0x0AD2),
			OrbisAnim::Location(0x0BDE),
			OrbisAnim::Location(0x106A),
			OrbisAnim::Location(0x106E),
			OrbisAnim::Location(0x1072),
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandPairBlendImpl(&hierarchyHeader, &params);
}

// l_knee_helper_weighted_PB_01
static void NdiPairBlendCommand_Seg1Cmd6(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::PairBlendParams params = {
		0x11BF69,
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, 0.000000f, 0.000000f },
		0.500000f,
		OrbisAnim::CommandBlock::PairBlendParams::kInRotate2Connected | OrbisAnim::CommandBlock::PairBlendParams::kOutRotateConnected,
		{
			OrbisAnim::Location(0x09CA),
			OrbisAnim::Location(0x0AD6),
			OrbisAnim::Location(0x0BE2),
			OrbisAnim::Location(0x1196),
			OrbisAnim::Location(0x119A),
			OrbisAnim::Location(0x119E),
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandPairBlendImpl(&hierarchyHeader, &params);
}

// r_knee_helper_weighted_PB_01
static void NdiPairBlendCommand_Seg1Cmd7(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::PairBlendParams params = {
		0x11BF69,
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, 0.000000f, 0.000000f },
		0.500000f,
		OrbisAnim::CommandBlock::PairBlendParams::kInRotate2Connected | OrbisAnim::CommandBlock::PairBlendParams::kOutRotateConnected,
		{
			OrbisAnim::Location(0x09CE),
			OrbisAnim::Location(0x0ADA),
			OrbisAnim::Location(0x0BE6),
			OrbisAnim::Location(0x126E),
			OrbisAnim::Location(0x1272),
			OrbisAnim::Location(0x1276),
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandPairBlendImpl(&hierarchyHeader, &params);
}

static void HierarchyCopyCommand_Seg1Cmd8(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locJointParams + 0x0020) = *(float*)(locSdkScalarTable + 0x0CE4);
	*(float*)(locJointParams + 0x0024) = *(float*)(locSdkScalarTable + 0x0CE8);
	*(float*)(locJointParams + 0x0028) = *(float*)(locSdkScalarTable + 0x0CEC);
	*(float*)(locSdkScalarTable + 0x09D0) = *(float*)(locSdkScalarTable + 0x0CF0);
	*(float*)(locSdkScalarTable + 0x0ADC) = *(float*)(locSdkScalarTable + 0x0CF4);
	*(float*)(locSdkScalarTable + 0x0BE8) = *(float*)(locSdkScalarTable + 0x0CF8);
	*(float*)(locJointParams + 0x0000) = *(float*)(locSdkScalarTable + 0x0CFC);
	*(float*)(locJointParams + 0x0004) = *(float*)(locSdkScalarTable + 0x0D00);
	*(float*)(locJointParams + 0x0008) = *(float*)(locSdkScalarTable + 0x0D04);
	*(float*)(locSdkScalarTable + 0x0A18) = *(float*)(locSdkScalarTable + 0x0F3C);
	*(float*)(locSdkScalarTable + 0x0B24) = *(float*)(locSdkScalarTable + 0x0F40);
	*(float*)(locSdkScalarTable + 0x0C30) = *(float*)(locSdkScalarTable + 0x0F44);
	*(float*)(locSdkScalarTable + 0x0A4C) = *(float*)(locSdkScalarTable + 0x1068);
	*(float*)(locSdkScalarTable + 0x0B58) = *(float*)(locSdkScalarTable + 0x106C);
	*(float*)(locSdkScalarTable + 0x0C64) = *(float*)(locSdkScalarTable + 0x1070);
	*(float*)(locSdkScalarTable + 0x0A80) = *(float*)(locSdkScalarTable + 0x1194);
	*(float*)(locSdkScalarTable + 0x0B8C) = *(float*)(locSdkScalarTable + 0x1198);
	*(float*)(locSdkScalarTable + 0x0C98) = *(float*)(locSdkScalarTable + 0x119C);
	*(float*)(locSdkScalarTable + 0x0AA0) = *(float*)(locSdkScalarTable + 0x126C);
	*(float*)(locSdkScalarTable + 0x0BAC) = *(float*)(locSdkScalarTable + 0x1270);
	*(float*)(locSdkScalarTable + 0x0CB8) = *(float*)(locSdkScalarTable + 0x1274);
	*(float*)(locSdkScalarTable + 0x0CB8) = *(float*)(locSdkScalarTable + 0x1274);
	*(float*)(locSdkScalarTable + 0x0CB8) = *(float*)(locSdkScalarTable + 0x1274);
	*(float*)(locSdkScalarTable + 0x0CB8) = *(float*)(locSdkScalarTable + 0x1274);
}

static void HierarchySdkDrivenRotCommand_Seg1Cmd9(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x09D0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0ADC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BE8)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0010) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A18)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B24)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C30)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3e7b3390, 0x3a94db80, 0x3cfcf564, 0x3f780d2e));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x03A0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A4C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B58)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C64)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3e7b3390, 0x3a94db80, 0x3cfcf564, 0x3f780d2e));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0640) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A80)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B8C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C98)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbebcc8f1, 0x3ce32fab, 0x3bee6e16, 0x3f6dd95e));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x08B0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AA0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BAC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CB8)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbebcc8f1, 0x3ce32fab, 0x3bee6e16, 0x3f6dd95e));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0A30) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AA0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BAC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CB8)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbebcc8f1, 0x3ce32fab, 0x3bee6e16, 0x3f6dd95e));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0A30) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AA0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BAC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CB8)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbebcc8f1, 0x3ce32fab, 0x3bee6e16, 0x3f6dd95e));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0A30) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AA0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BAC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CB8)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbebcc8f1, 0x3ce32fab, 0x3bee6e16, 0x3f6dd95e));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0A30) = q;
	}
}

static void HierarchyParentingCommand_Seg1Cmd10(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0010, 0x0000 + 1 },	// Child[59]: root_helper, Parent[-1]: <none>
		{ 0x0010, 0x0000 + 1 },	// Child[59]: root_helper, Parent[-1]: <none>
		{ 0x0010, 0x0000 + 1 },	// Child[59]: root_helper, Parent[-1]: <none>
		{ 0x0010, 0x0000 + 1 }	// Child[59]: root_helper, Parent[-1]: <none>
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

// spine_a_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd11(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0042)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, -0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, -0.000000f, 0.000000f,
		-0.000000f, 0.997380f, -0.072347f, 0.000000f,
		0.000000f, 0.072347f, 0.997380f, 0.000000f,
		0.000000f, 0.000353f, 0.000244f, 1.000000f,
		1.150000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.150000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.150000f, 0.000000f,
		0.000000f, 0.684383f, 0.000381f, 1.000000f,
		1.150000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.150000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.150000f, 0.000000f,
		0.000000f, 0.684383f, 0.000381f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x0033),
		OrbisAnim::Location(0x0633),
		OrbisAnim::Location(0x0041),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// pelvis_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd12(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0582)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000199f, -0.000487f, 1.000000f,
		1.150000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.150000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.150000f, 0.000000f,
		0.000000f, 0.684383f, 0.000381f, 1.000000f,
		1.150000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.150000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.150000f, 0.000000f,
		0.000000f, 0.684383f, 0.000381f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x0423),
		OrbisAnim::Location(0x0633),
		OrbisAnim::Location(0x0041),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// spine_a_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd13(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ -0.072410f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0042),
		{
			OrbisAnim::Location(0x0D0A),
			OrbisAnim::Location(0x0D0E),
			OrbisAnim::Location(0x0D12),
		},
		{
			OrbisAnim::Location(0x0D16),
			OrbisAnim::Location(0x0D1A),
			OrbisAnim::Location(0x0D1E),
		},
		{
			OrbisAnim::Location(0x0D22),
			OrbisAnim::Location(0x0D26),
			OrbisAnim::Location(0x0D2A)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// pelvis_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd14(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0582),
		{
			OrbisAnim::Location(0x10A6),
			OrbisAnim::Location(0x10AA),
			OrbisAnim::Location(0x10AE),
		},
		{
			OrbisAnim::Location(0x10B2),
			OrbisAnim::Location(0x10B6),
			OrbisAnim::Location(0x10BA),
		},
		{
			OrbisAnim::Location(0x10BE),
			OrbisAnim::Location(0x10C2),
			OrbisAnim::Location(0x10C6)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

static void HierarchyCopyCommand_Seg1Cmd15(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locJointParams + 0x0050) = *(float*)(locSdkScalarTable + 0x0D08);
	*(float*)(locJointParams + 0x0054) = *(float*)(locSdkScalarTable + 0x0D0C);
	*(float*)(locJointParams + 0x0058) = *(float*)(locSdkScalarTable + 0x0D10);
	*(float*)(locSdkScalarTable + 0x09D4) = *(float*)(locSdkScalarTable + 0x0D14);
	*(float*)(locSdkScalarTable + 0x0AE0) = *(float*)(locSdkScalarTable + 0x0D18);
	*(float*)(locSdkScalarTable + 0x0BEC) = *(float*)(locSdkScalarTable + 0x0D1C);
	*(float*)(locJointParams + 0x0030) = *(float*)(locSdkScalarTable + 0x0D20);
	*(float*)(locJointParams + 0x0034) = *(float*)(locSdkScalarTable + 0x0D24);
	*(float*)(locJointParams + 0x0038) = *(float*)(locSdkScalarTable + 0x0D28);
	*(float*)(locJointParams + 0x0740) = *(float*)(locSdkScalarTable + 0x10A4);
	*(float*)(locJointParams + 0x0744) = *(float*)(locSdkScalarTable + 0x10A8);
	*(float*)(locJointParams + 0x0748) = *(float*)(locSdkScalarTable + 0x10AC);
	*(float*)(locSdkScalarTable + 0x0A60) = *(float*)(locSdkScalarTable + 0x10B0);
	*(float*)(locSdkScalarTable + 0x0B6C) = *(float*)(locSdkScalarTable + 0x10B4);
	*(float*)(locSdkScalarTable + 0x0C78) = *(float*)(locSdkScalarTable + 0x10B8);
	*(float*)(locJointParams + 0x0720) = *(float*)(locSdkScalarTable + 0x10BC);
	*(float*)(locJointParams + 0x0724) = *(float*)(locSdkScalarTable + 0x10C0);
	*(float*)(locJointParams + 0x0728) = *(float*)(locSdkScalarTable + 0x10C4);
	*(float*)(locJointParams + 0x0728) = *(float*)(locSdkScalarTable + 0x10C4);
	*(float*)(locJointParams + 0x0728) = *(float*)(locSdkScalarTable + 0x10C4);
}

static void HierarchySdkDrivenRotCommand_Seg1Cmd16(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x09D4)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AE0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BEC)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbd144362, 0, 0, 0x3f7fd50d));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0040) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A60)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B6C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C78)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0730) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A60)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B6C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C78)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0730) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A60)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B6C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C78)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0730) = q;
	}
}

// pelvis_helper_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd17(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0720),
		OrbisAnim::Location(0x13AE),
		OrbisAnim::Location(0x13A6),
		OrbisAnim::Location(0x13AA)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

// spine_a_helper_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd18(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ -0.072410f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0030),
		OrbisAnim::Location(0x143E),
		OrbisAnim::Location(0x1436),
		OrbisAnim::Location(0x143A)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

static void HierarchyParentingCommand_Seg1Cmd19(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0020, 0x0040 + 1 },	// Child[60]: spine_a_helper, Parent[59]: root_helper
		{ 0x0270, 0x0040 + 1 },	// Child[97]: pelvis_helper, Parent[59]: root_helper
		{ 0x0270, 0x0040 + 1 },	// Child[97]: pelvis_helper, Parent[59]: root_helper
		{ 0x0270, 0x0040 + 1 }	// Child[97]: pelvis_helper, Parent[59]: root_helper
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

static void HierarchyCopyCommand_Seg1Cmd20(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locSdkScalarTable + 0x08F4) = *(float*)(locSdkScalarTable + 0x13A4);
	*(float*)(locSdkScalarTable + 0x08F8) = *(float*)(locSdkScalarTable + 0x13A8);
	*(float*)(locSdkScalarTable + 0x08FC) = *(float*)(locSdkScalarTable + 0x13AC);
	*(float*)(locSdkScalarTable + 0x0984) = *(float*)(locSdkScalarTable + 0x1434);
	*(float*)(locSdkScalarTable + 0x0988) = *(float*)(locSdkScalarTable + 0x1438);
	*(float*)(locSdkScalarTable + 0x098C) = *(float*)(locSdkScalarTable + 0x143C);
	*(float*)(locSdkScalarTable + 0x098C) = *(float*)(locSdkScalarTable + 0x143C);
	*(float*)(locSdkScalarTable + 0x098C) = *(float*)(locSdkScalarTable + 0x143C);
}

// spine_b_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd21(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0082)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, -0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, -0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.991305f, 0.131584f, 0.000000f,
		0.000000f, -0.131584f, 0.991305f, 0.000000f,
		0.000000f, 0.000000f, 0.111938f, 1.000000f,
		1.150000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.146986f, -0.083199f, 0.000000f,
		0.000000f, 0.083199f, 1.146986f, 0.000000f,
		0.000000f, 0.684789f, 0.000662f, 1.000000f,
		1.150000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.146986f, -0.083199f, 0.000000f,
		0.000000f, 0.083199f, 1.146986f, 0.000000f,
		0.000000f, 0.684789f, 0.000662f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x0063),
		OrbisAnim::Location(0x0673),
		OrbisAnim::Location(0x0081),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_hip_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd22(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x05C2)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, -0.000000f, 0.000000f,
		-0.000000f, 1.000000f, -0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.000000f, 0.000000f, 0.000000f, 1.000000f,
		-0.998702f, -0.050723f, -0.004551f, 0.000000f,
		0.010697f, -0.121552f, -0.992527f, 0.000000f,
		0.049790f, -0.991288f, 0.121937f, 0.000000f,
		0.091145f, -0.057524f, -0.040828f, 1.000000f,
		1.150000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.150000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.150000f, 0.000000f,
		0.000000f, 0.684612f, -0.000179f, 1.000000f,
		1.150000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.150000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.150000f, 0.000000f,
		0.000000f, 0.684612f, -0.000179f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x0453),
		OrbisAnim::Location(0x0BF3),
		OrbisAnim::Location(0x09C1),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_hip_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd23(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0702)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, -0.000000f, -0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, -0.000000f, 1.000000f, 0.000000f,
		-0.000000f, -0.000000f, -0.000000f, 1.000000f,
		-0.998702f, 0.050723f, 0.004551f, 0.000000f,
		0.010697f, 0.121552f, 0.992527f, 0.000000f,
		0.049790f, 0.991288f, -0.121937f, 0.000000f,
		-0.091145f, -0.057523f, -0.040828f, 1.000000f,
		1.150000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.150000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.150000f, 0.000000f,
		0.000000f, 0.684612f, -0.000179f, 1.000000f,
		1.150000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.150000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.150000f, 0.000000f,
		0.000000f, 0.684612f, -0.000179f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x0483),
		OrbisAnim::Location(0x0BF3),
		OrbisAnim::Location(0x09C1),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// spine_b_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd24(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.131967f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0082),
		{
			OrbisAnim::Location(0x0D2E),
			OrbisAnim::Location(0x0D32),
			OrbisAnim::Location(0x0D36),
		},
		{
			OrbisAnim::Location(0x0D3A),
			OrbisAnim::Location(0x0D3E),
			OrbisAnim::Location(0x0D42),
		},
		{
			OrbisAnim::Location(0x0D46),
			OrbisAnim::Location(0x0D4A),
			OrbisAnim::Location(0x0D4E)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_hip_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd25(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ -1.448554f, 0.004551f, -3.090848f },
		OrbisAnim::Location(0x05C2),
		{
			OrbisAnim::Location(0x10CA),
			OrbisAnim::Location(0x10CE),
			OrbisAnim::Location(0x10D2),
		},
		{
			OrbisAnim::Location(0x10D6),
			OrbisAnim::Location(0x10DA),
			OrbisAnim::Location(0x10DE),
		},
		{
			OrbisAnim::Location(0x10E2),
			OrbisAnim::Location(0x10E6),
			OrbisAnim::Location(0x10EA)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_hip_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd26(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 1.693039f, -0.004551f, 3.090848f },
		OrbisAnim::Location(0x0702),
		{
			OrbisAnim::Location(0x11A2),
			OrbisAnim::Location(0x11A6),
			OrbisAnim::Location(0x11AA),
		},
		{
			OrbisAnim::Location(0x11AE),
			OrbisAnim::Location(0x11B2),
			OrbisAnim::Location(0x11B6),
		},
		{
			OrbisAnim::Location(0x11BA),
			OrbisAnim::Location(0x11BE),
			OrbisAnim::Location(0x11C2)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

static void HierarchyCopyCommand_Seg1Cmd27(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locJointParams + 0x0080) = *(float*)(locSdkScalarTable + 0x0D2C);
	*(float*)(locJointParams + 0x0084) = *(float*)(locSdkScalarTable + 0x0D30);
	*(float*)(locJointParams + 0x0088) = *(float*)(locSdkScalarTable + 0x0D34);
	*(float*)(locSdkScalarTable + 0x09D8) = *(float*)(locSdkScalarTable + 0x0D38);
	*(float*)(locSdkScalarTable + 0x0AE4) = *(float*)(locSdkScalarTable + 0x0D3C);
	*(float*)(locSdkScalarTable + 0x0BF0) = *(float*)(locSdkScalarTable + 0x0D40);
	*(float*)(locJointParams + 0x0060) = *(float*)(locSdkScalarTable + 0x0D44);
	*(float*)(locJointParams + 0x0064) = *(float*)(locSdkScalarTable + 0x0D48);
	*(float*)(locJointParams + 0x0068) = *(float*)(locSdkScalarTable + 0x0D4C);
	*(float*)(locJointParams + 0x0770) = *(float*)(locSdkScalarTable + 0x10C8);
	*(float*)(locJointParams + 0x0A70) = *(float*)(locSdkScalarTable + 0x10C8);
	*(float*)(locJointParams + 0x0774) = *(float*)(locSdkScalarTable + 0x10CC);
	*(float*)(locJointParams + 0x0A74) = *(float*)(locSdkScalarTable + 0x10CC);
	*(float*)(locJointParams + 0x0778) = *(float*)(locSdkScalarTable + 0x10D0);
	*(float*)(locJointParams + 0x0A78) = *(float*)(locSdkScalarTable + 0x10D0);
	*(float*)(locSdkScalarTable + 0x0A64) = *(float*)(locSdkScalarTable + 0x10D4);
	*(float*)(locSdkScalarTable + 0x0B70) = *(float*)(locSdkScalarTable + 0x10D8);
	*(float*)(locSdkScalarTable + 0x0C7C) = *(float*)(locSdkScalarTable + 0x10DC);
	*(float*)(locJointParams + 0x0750) = *(float*)(locSdkScalarTable + 0x10E0);
	*(float*)(locJointParams + 0x0754) = *(float*)(locSdkScalarTable + 0x10E4);
	*(float*)(locJointParams + 0x0758) = *(float*)(locSdkScalarTable + 0x10E8);
	*(float*)(locJointParams + 0x08F0) = *(float*)(locSdkScalarTable + 0x11A0);
	*(float*)(locJointParams + 0x0B60) = *(float*)(locSdkScalarTable + 0x11A0);
	*(float*)(locJointParams + 0x08F4) = *(float*)(locSdkScalarTable + 0x11A4);
	*(float*)(locJointParams + 0x0B64) = *(float*)(locSdkScalarTable + 0x11A4);
	*(float*)(locJointParams + 0x08F8) = *(float*)(locSdkScalarTable + 0x11A8);
	*(float*)(locJointParams + 0x0B68) = *(float*)(locSdkScalarTable + 0x11A8);
	*(float*)(locSdkScalarTable + 0x0A84) = *(float*)(locSdkScalarTable + 0x11AC);
	*(float*)(locSdkScalarTable + 0x0B90) = *(float*)(locSdkScalarTable + 0x11B0);
	*(float*)(locSdkScalarTable + 0x0C9C) = *(float*)(locSdkScalarTable + 0x11B4);
	*(float*)(locJointParams + 0x08D0) = *(float*)(locSdkScalarTable + 0x11B8);
	*(float*)(locJointParams + 0x08D4) = *(float*)(locSdkScalarTable + 0x11BC);
	*(float*)(locJointParams + 0x08D8) = *(float*)(locSdkScalarTable + 0x11C0);
	*(float*)(locJointParams + 0x08D8) = *(float*)(locSdkScalarTable + 0x11C0);
	*(float*)(locJointParams + 0x08D8) = *(float*)(locSdkScalarTable + 0x11C0);
	*(float*)(locJointParams + 0x08D8) = *(float*)(locSdkScalarTable + 0x11C0);
}

static void HierarchySdkDrivenRotCommand_Seg1Cmd28(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x09D8)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AE4)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BF0)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3d87094f, 0, 0, 0x3f7f7163));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0070) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A64)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B70)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C7C)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbc777ea2, 0x3f299481, 0xbf3faaa4, 0x3ca801f3));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0760) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A84)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B90)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C9C)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3ca801f3, 0x3f3faaa4, 0x3f299482, 0x3c777ea4));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x08E0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A84)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B90)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C9C)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3ca801f3, 0x3f3faaa4, 0x3f299482, 0x3c777ea4));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x08E0) = q;
	}
}

// l_hip_helper_bendTwistDriver
static void NdiBendTwistDriverCommand_Seg1Cmd29(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::BendTwistDriverParams params = {
		0x11BF63,
		0,
		0,
		1.000000f,
		{ -0.000000f, -0.000000f, 1.000000f},
		{ -1.448554f, 0.004551f, -3.090848f},
		OrbisAnim::Location(0x0750),
		OrbisAnim::Location(0x127A),
		OrbisAnim::Location(0x127E),
		OrbisAnim::Location(0x1282),
		OrbisAnim::Location(0x1286),
		OrbisAnim::Location(0x128A),
		OrbisAnim::Location(0x128E)
	};

	OrbisAnim::CommandBlock::ExecuteCommandBendTwistDriverImpl(&hierarchyHeader, &params);
}

// r_hip_helper_bendTwistDriver
static void NdiBendTwistDriverCommand_Seg1Cmd30(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::BendTwistDriverParams params = {
		0x11BF63,
		0,
		0,
		1.000000f,
		{ 0.000001f, -0.000000f, -1.000000f},
		{ 1.693039f, -0.004551f, 3.090848f},
		OrbisAnim::Location(0x08D0),
		OrbisAnim::Location(0x12B6),
		OrbisAnim::Location(0x12BA),
		OrbisAnim::Location(0x12BE),
		OrbisAnim::Location(0x12C2),
		OrbisAnim::Location(0x12C6),
		OrbisAnim::Location(0x12CA)
	};

	OrbisAnim::CommandBlock::ExecuteCommandBendTwistDriverImpl(&hierarchyHeader, &params);
}

// spine_b_helper_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd31(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ 0.131967f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0060),
		OrbisAnim::Location(0x144A),
		OrbisAnim::Location(0x1442),
		OrbisAnim::Location(0x1446)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

static void HierarchyParentingCommand_Seg1Cmd32(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0030, 0x0080 + 1 },	// Child[61]: spine_b_helper, Parent[60]: spine_a_helper
		{ 0x0280, 0x09C0 + 1 },	// Child[98]: l_hip_helper, Parent[97]: pelvis_helper
		{ 0x0300, 0x09C0 + 1 },	// Child[106]: r_hip_helper, Parent[97]: pelvis_helper
		{ 0x0300, 0x09C0 + 1 }	// Child[106]: r_hip_helper, Parent[97]: pelvis_helper
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

static void HierarchyCopyCommand_Seg1Cmd33(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locSdkScalarTable + 0x0AA4) = *(float*)(locSdkScalarTable + 0x1278);
	*(float*)(locSdkScalarTable + 0x0BB0) = *(float*)(locSdkScalarTable + 0x127C);
	*(float*)(locSdkScalarTable + 0x0CBC) = *(float*)(locSdkScalarTable + 0x1280);
	*(float*)(locSdkScalarTable + 0x0AA8) = *(float*)(locSdkScalarTable + 0x1284);
	*(float*)(locSdkScalarTable + 0x0BB4) = *(float*)(locSdkScalarTable + 0x1288);
	*(float*)(locSdkScalarTable + 0x0CC0) = *(float*)(locSdkScalarTable + 0x128C);
	*(float*)(locSdkScalarTable + 0x0AB8) = *(float*)(locSdkScalarTable + 0x12B4);
	*(float*)(locSdkScalarTable + 0x0BC4) = *(float*)(locSdkScalarTable + 0x12B8);
	*(float*)(locSdkScalarTable + 0x0CD0) = *(float*)(locSdkScalarTable + 0x12BC);
	*(float*)(locSdkScalarTable + 0x0ABC) = *(float*)(locSdkScalarTable + 0x12C0);
	*(float*)(locSdkScalarTable + 0x0BC8) = *(float*)(locSdkScalarTable + 0x12C4);
	*(float*)(locSdkScalarTable + 0x0CD4) = *(float*)(locSdkScalarTable + 0x12C8);
	*(float*)(locSdkScalarTable + 0x0990) = *(float*)(locSdkScalarTable + 0x1440);
	*(float*)(locSdkScalarTable + 0x0994) = *(float*)(locSdkScalarTable + 0x1444);
	*(float*)(locSdkScalarTable + 0x0998) = *(float*)(locSdkScalarTable + 0x1448);
	*(float*)(locSdkScalarTable + 0x0998) = *(float*)(locSdkScalarTable + 0x1448);
}

// l_hip_helperTwist_weighted_PB_01
static void NdiPairBlendCommand_Seg1Cmd34(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::PairBlendParams params = {
		0x11BF69,
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, -0.000000f, 0.000000f },
		0.250000f,
		OrbisAnim::CommandBlock::PairBlendParams::kInRotate2Connected | OrbisAnim::CommandBlock::PairBlendParams::kOutRotateConnected,
		{
			OrbisAnim::Location(0x1286),
			OrbisAnim::Location(0x128A),
			OrbisAnim::Location(0x128E),
			OrbisAnim::Location(0x1292),
			OrbisAnim::Location(0x1296),
			OrbisAnim::Location(0x129A),
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandPairBlendImpl(&hierarchyHeader, &params);
}

// l_hip_helperTwist_weighted_PB_02
static void NdiPairBlendCommand_Seg1Cmd35(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::PairBlendParams params = {
		0x11BF69,
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, -0.000000f, 0.000000f },
		0.500000f,
		OrbisAnim::CommandBlock::PairBlendParams::kInRotate2Connected | OrbisAnim::CommandBlock::PairBlendParams::kOutRotateConnected,
		{
			OrbisAnim::Location(0x1286),
			OrbisAnim::Location(0x128A),
			OrbisAnim::Location(0x128E),
			OrbisAnim::Location(0x129E),
			OrbisAnim::Location(0x12A2),
			OrbisAnim::Location(0x12A6),
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandPairBlendImpl(&hierarchyHeader, &params);
}

// l_hip_helperTwist_weighted_PB_03
static void NdiPairBlendCommand_Seg1Cmd36(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::PairBlendParams params = {
		0x11BF69,
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, -0.000000f, 0.000000f },
		0.750000f,
		OrbisAnim::CommandBlock::PairBlendParams::kInRotate2Connected | OrbisAnim::CommandBlock::PairBlendParams::kOutRotateConnected,
		{
			OrbisAnim::Location(0x1286),
			OrbisAnim::Location(0x128A),
			OrbisAnim::Location(0x128E),
			OrbisAnim::Location(0x12AA),
			OrbisAnim::Location(0x12AE),
			OrbisAnim::Location(0x12B2),
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandPairBlendImpl(&hierarchyHeader, &params);
}

// r_hip_helperTwist_weighted_PB_01
static void NdiPairBlendCommand_Seg1Cmd37(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::PairBlendParams params = {
		0x11BF69,
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, -0.000000f, 0.000000f },
		0.250000f,
		OrbisAnim::CommandBlock::PairBlendParams::kInRotate2Connected | OrbisAnim::CommandBlock::PairBlendParams::kOutRotateConnected,
		{
			OrbisAnim::Location(0x12C2),
			OrbisAnim::Location(0x12C6),
			OrbisAnim::Location(0x12CA),
			OrbisAnim::Location(0x12CE),
			OrbisAnim::Location(0x12D2),
			OrbisAnim::Location(0x12D6),
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandPairBlendImpl(&hierarchyHeader, &params);
}

// r_hip_helperTwist_weighted_PB_02
static void NdiPairBlendCommand_Seg1Cmd38(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::PairBlendParams params = {
		0x11BF69,
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, -0.000000f, 0.000000f },
		0.500000f,
		OrbisAnim::CommandBlock::PairBlendParams::kInRotate2Connected | OrbisAnim::CommandBlock::PairBlendParams::kOutRotateConnected,
		{
			OrbisAnim::Location(0x12C2),
			OrbisAnim::Location(0x12C6),
			OrbisAnim::Location(0x12CA),
			OrbisAnim::Location(0x12DA),
			OrbisAnim::Location(0x12DE),
			OrbisAnim::Location(0x12E2),
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandPairBlendImpl(&hierarchyHeader, &params);
}

// r_hip_helperTwist_weighted_PB_03
static void NdiPairBlendCommand_Seg1Cmd39(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::PairBlendParams params = {
		0x11BF69,
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, 0.000000f, 0.000000f },
		{ 0.000000f, -0.000000f, 0.000000f },
		0.750000f,
		OrbisAnim::CommandBlock::PairBlendParams::kInRotate2Connected | OrbisAnim::CommandBlock::PairBlendParams::kOutRotateConnected,
		{
			OrbisAnim::Location(0x12C2),
			OrbisAnim::Location(0x12C6),
			OrbisAnim::Location(0x12CA),
			OrbisAnim::Location(0x12E6),
			OrbisAnim::Location(0x12EA),
			OrbisAnim::Location(0x12EE),
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandPairBlendImpl(&hierarchyHeader, &params);
}

// spine_c_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd40(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x00C2)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, -0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.996620f, 0.082149f, 0.000000f,
		0.000000f, -0.082149f, 0.996620f, 0.000000f,
		0.000000f, 0.000000f, 0.118325f, 1.000000f,
		1.150000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.147961f, 0.068450f, 0.000000f,
		0.000000f, -0.068450f, 1.147961f, 0.000000f,
		0.000000f, 0.694102f, 0.129053f, 1.000000f,
		1.150000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.147961f, 0.068450f, 0.000000f,
		0.000000f, -0.068450f, 1.147961f, 0.000000f,
		0.000000f, 0.694102f, 0.129053f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x0093),
		OrbisAnim::Location(0x06B3),
		OrbisAnim::Location(0x00C1),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_knee_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd41(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0602)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, -0.000000f, -0.000000f, 0.000000f,
		-0.000000f, 1.000000f, -0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.000000f, 0.000000f, -0.000000f, 1.000000f,
		0.998356f, -0.006930f, -0.056899f, 0.000000f,
		-0.033972f, 0.727984f, -0.684751f, 0.000000f,
		0.046167f, 0.685559f, 0.726552f, 0.000000f,
		-0.000000f, -0.000000f, 0.245060f, 1.000000f,
		-1.148508f, -0.058331f, -0.005234f, 0.000000f,
		0.012301f, -0.139785f, -1.141407f, 0.000000f,
		0.057259f, -1.139981f, 0.140228f, 0.000000f,
		0.104817f, 0.618460f, -0.047131f, 1.000000f,
		-1.148508f, -0.058331f, -0.005234f, 0.000000f,
		0.012301f, -0.139785f, -1.141407f, 0.000000f,
		0.057259f, -1.139981f, 0.140228f, 0.000000f,
		0.104817f, 0.618460f, -0.047131f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x04B3),
		OrbisAnim::Location(0x0C33),
		OrbisAnim::Location(0x0A01),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_knee_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd42(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0742)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		-0.000000f, 1.000000f, 0.000000f, 0.000000f,
		-0.000000f, -0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, -0.000000f, 1.000000f,
		0.998356f, -0.006930f, -0.056899f, 0.000000f,
		-0.033972f, 0.727984f, -0.684751f, 0.000000f,
		0.046167f, 0.685559f, 0.726552f, 0.000000f,
		0.000000f, -0.000000f, -0.245060f, 1.000000f,
		-1.148508f, 0.058331f, 0.005234f, 0.000000f,
		0.012301f, 0.139785f, 1.141407f, 0.000000f,
		0.057259f, 1.139981f, -0.140228f, 0.000000f,
		-0.104817f, 0.618460f, -0.047131f, 1.000000f,
		-1.148508f, 0.058331f, 0.005234f, 0.000000f,
		0.012301f, 0.139785f, 1.141407f, 0.000000f,
		0.057259f, 1.139981f, -0.140228f, 0.000000f,
		-0.104817f, 0.618460f, -0.047131f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x04E3),
		OrbisAnim::Location(0x0C73),
		OrbisAnim::Location(0x0C01),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

static void HierarchyParentingCommand_Seg1Cmd43(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x02F0, 0x0A00 + 1 },	// Child[105]: l_knee_helper_weighted_01, Parent[98]: l_hip_helper
		{ 0x0370, 0x0C00 + 1 },	// Child[113]: r_knee_helper_weighted_01, Parent[106]: r_hip_helper
		{ 0x0370, 0x0C00 + 1 },	// Child[113]: r_knee_helper_weighted_01, Parent[106]: r_hip_helper
		{ 0x0370, 0x0C00 + 1 }	// Child[113]: r_knee_helper_weighted_01, Parent[106]: r_hip_helper
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

// spine_c_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd44(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.082241f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x00C2),
		{
			OrbisAnim::Location(0x0D52),
			OrbisAnim::Location(0x0D56),
			OrbisAnim::Location(0x0D5A),
		},
		{
			OrbisAnim::Location(0x0D5E),
			OrbisAnim::Location(0x0D62),
			OrbisAnim::Location(0x0D66),
		},
		{
			OrbisAnim::Location(0x0D6A),
			OrbisAnim::Location(0x0D6E),
			OrbisAnim::Location(0x0D72)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_knee_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd45(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ -0.755788f, 0.056929f, -0.006942f },
		OrbisAnim::Location(0x0602),
		{
			OrbisAnim::Location(0x10EE),
			OrbisAnim::Location(0x10F2),
			OrbisAnim::Location(0x10F6),
		},
		{
			OrbisAnim::Location(0x10FA),
			OrbisAnim::Location(0x10FE),
			OrbisAnim::Location(0x1102),
		},
		{
			OrbisAnim::Location(0x1106),
			OrbisAnim::Location(0x110A),
			OrbisAnim::Location(0x110E)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_knee_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd46(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ -0.755788f, 0.056929f, -0.006942f },
		OrbisAnim::Location(0x0742),
		{
			OrbisAnim::Location(0x11C6),
			OrbisAnim::Location(0x11CA),
			OrbisAnim::Location(0x11CE),
		},
		{
			OrbisAnim::Location(0x11D2),
			OrbisAnim::Location(0x11D6),
			OrbisAnim::Location(0x11DA),
		},
		{
			OrbisAnim::Location(0x11DE),
			OrbisAnim::Location(0x11E2),
			OrbisAnim::Location(0x11E6)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

static void HierarchyCopyCommand_Seg1Cmd47(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locSdkScalarTable + 0x0AAC) = *(float*)(locSdkScalarTable + 0x1290);
	*(float*)(locSdkScalarTable + 0x0BB8) = *(float*)(locSdkScalarTable + 0x1294);
	*(float*)(locSdkScalarTable + 0x0CC4) = *(float*)(locSdkScalarTable + 0x1298);
	*(float*)(locSdkScalarTable + 0x0AB0) = *(float*)(locSdkScalarTable + 0x129C);
	*(float*)(locSdkScalarTable + 0x0BBC) = *(float*)(locSdkScalarTable + 0x12A0);
	*(float*)(locSdkScalarTable + 0x0CC8) = *(float*)(locSdkScalarTable + 0x12A4);
	*(float*)(locSdkScalarTable + 0x0AB4) = *(float*)(locSdkScalarTable + 0x12A8);
	*(float*)(locSdkScalarTable + 0x0BC0) = *(float*)(locSdkScalarTable + 0x12AC);
	*(float*)(locSdkScalarTable + 0x0CCC) = *(float*)(locSdkScalarTable + 0x12B0);
	*(float*)(locSdkScalarTable + 0x0AC0) = *(float*)(locSdkScalarTable + 0x12CC);
	*(float*)(locSdkScalarTable + 0x0BCC) = *(float*)(locSdkScalarTable + 0x12D0);
	*(float*)(locSdkScalarTable + 0x0CD8) = *(float*)(locSdkScalarTable + 0x12D4);
	*(float*)(locSdkScalarTable + 0x0AC4) = *(float*)(locSdkScalarTable + 0x12D8);
	*(float*)(locSdkScalarTable + 0x0BD0) = *(float*)(locSdkScalarTable + 0x12DC);
	*(float*)(locSdkScalarTable + 0x0CDC) = *(float*)(locSdkScalarTable + 0x12E0);
	*(float*)(locSdkScalarTable + 0x0AC8) = *(float*)(locSdkScalarTable + 0x12E4);
	*(float*)(locSdkScalarTable + 0x0BD4) = *(float*)(locSdkScalarTable + 0x12E8);
	*(float*)(locSdkScalarTable + 0x0CE0) = *(float*)(locSdkScalarTable + 0x12EC);
	*(float*)(locSdkScalarTable + 0x0CE0) = *(float*)(locSdkScalarTable + 0x12EC);
	*(float*)(locSdkScalarTable + 0x0CE0) = *(float*)(locSdkScalarTable + 0x12EC);
}

static void HierarchySdkDrivenRotCommand_Seg1Cmd48(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AA4)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BB0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CBC)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbc777ea2, 0x3f299481, 0xbf3faaa4, 0x3ca801f3));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0A60) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AA8)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BB4)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CC0)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0A90) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AB8)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BC4)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CD0)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3ca801f3, 0x3f3faaa4, 0x3f299482, 0x3c777ea4));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0B50) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0ABC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BC8)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CD4)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0B80) = q;
	}
}

static void HierarchyCopyCommand_Seg1Cmd49(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locJointParams + 0x00B0) = *(float*)(locSdkScalarTable + 0x0D50);
	*(float*)(locJointParams + 0x00B4) = *(float*)(locSdkScalarTable + 0x0D54);
	*(float*)(locJointParams + 0x00B8) = *(float*)(locSdkScalarTable + 0x0D58);
	*(float*)(locSdkScalarTable + 0x09DC) = *(float*)(locSdkScalarTable + 0x0D5C);
	*(float*)(locSdkScalarTable + 0x0AE8) = *(float*)(locSdkScalarTable + 0x0D60);
	*(float*)(locSdkScalarTable + 0x0BF4) = *(float*)(locSdkScalarTable + 0x0D64);
	*(float*)(locJointParams + 0x0090) = *(float*)(locSdkScalarTable + 0x0D68);
	*(float*)(locJointParams + 0x0094) = *(float*)(locSdkScalarTable + 0x0D6C);
	*(float*)(locJointParams + 0x0098) = *(float*)(locSdkScalarTable + 0x0D70);
	*(float*)(locJointParams + 0x07A0) = *(float*)(locSdkScalarTable + 0x10EC);
	*(float*)(locJointParams + 0x07A4) = *(float*)(locSdkScalarTable + 0x10F0);
	*(float*)(locJointParams + 0x07A8) = *(float*)(locSdkScalarTable + 0x10F4);
	*(float*)(locSdkScalarTable + 0x0A68) = *(float*)(locSdkScalarTable + 0x10F8);
	*(float*)(locSdkScalarTable + 0x0B74) = *(float*)(locSdkScalarTable + 0x10FC);
	*(float*)(locSdkScalarTable + 0x0C80) = *(float*)(locSdkScalarTable + 0x1100);
	*(float*)(locJointParams + 0x0780) = *(float*)(locSdkScalarTable + 0x1104);
	*(float*)(locJointParams + 0x0784) = *(float*)(locSdkScalarTable + 0x1108);
	*(float*)(locJointParams + 0x0788) = *(float*)(locSdkScalarTable + 0x110C);
	*(float*)(locJointParams + 0x0920) = *(float*)(locSdkScalarTable + 0x11C4);
	*(float*)(locJointParams + 0x0924) = *(float*)(locSdkScalarTable + 0x11C8);
	*(float*)(locJointParams + 0x0928) = *(float*)(locSdkScalarTable + 0x11CC);
	*(float*)(locSdkScalarTable + 0x0A88) = *(float*)(locSdkScalarTable + 0x11D0);
	*(float*)(locSdkScalarTable + 0x0B94) = *(float*)(locSdkScalarTable + 0x11D4);
	*(float*)(locSdkScalarTable + 0x0CA0) = *(float*)(locSdkScalarTable + 0x11D8);
	*(float*)(locJointParams + 0x0900) = *(float*)(locSdkScalarTable + 0x11DC);
	*(float*)(locJointParams + 0x0904) = *(float*)(locSdkScalarTable + 0x11E0);
	*(float*)(locJointParams + 0x0908) = *(float*)(locSdkScalarTable + 0x11E4);
	*(float*)(locJointParams + 0x0908) = *(float*)(locSdkScalarTable + 0x11E4);
}

// l_hip_helperBend_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd50(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ -1.448554f, 0.004551f, -3.090848f },
		OrbisAnim::Location(0x0A50),
		OrbisAnim::Location(0x1336),
		OrbisAnim::Location(0x132E),
		OrbisAnim::Location(0x1332)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

// r_hip_helperBend_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd51(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ 1.693039f, -0.004551f, 3.090848f },
		OrbisAnim::Location(0x0B40),
		OrbisAnim::Location(0x13EA),
		OrbisAnim::Location(0x13E2),
		OrbisAnim::Location(0x13E6)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

static void HierarchySdkDrivenRotCommand_Seg1Cmd52(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AAC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BB8)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CC4)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0AC0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AB0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BBC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CC8)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0AF0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AB4)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BC0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CCC)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0B20) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AC0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BCC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CD8)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0BB0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AC4)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BD0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CDC)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0BE0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AC8)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BD4)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CE0)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0C10) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AC8)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BD4)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CE0)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0C10) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AC8)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BD4)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CE0)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0C10) = q;
	}
}

static void HierarchyParentingCommand_Seg1Cmd53(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0380, 0x09C0 + 1 },	// Child[114]: l_hip_helperBend, Parent[97]: pelvis_helper
		{ 0x03D0, 0x09C0 + 1 },	// Child[119]: r_hip_helperBend, Parent[97]: pelvis_helper
		{ 0x03D0, 0x09C0 + 1 },	// Child[119]: r_hip_helperBend, Parent[97]: pelvis_helper
		{ 0x03D0, 0x09C0 + 1 }	// Child[119]: r_hip_helperBend, Parent[97]: pelvis_helper
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

static void HierarchyCopyCommand_Seg1Cmd54(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locSdkScalarTable + 0x087C) = *(float*)(locSdkScalarTable + 0x132C);
	*(float*)(locSdkScalarTable + 0x0880) = *(float*)(locSdkScalarTable + 0x1330);
	*(float*)(locSdkScalarTable + 0x0884) = *(float*)(locSdkScalarTable + 0x1334);
	*(float*)(locSdkScalarTable + 0x0930) = *(float*)(locSdkScalarTable + 0x13E0);
	*(float*)(locSdkScalarTable + 0x0934) = *(float*)(locSdkScalarTable + 0x13E4);
	*(float*)(locSdkScalarTable + 0x0938) = *(float*)(locSdkScalarTable + 0x13E8);
	*(float*)(locSdkScalarTable + 0x0938) = *(float*)(locSdkScalarTable + 0x13E8);
	*(float*)(locSdkScalarTable + 0x0938) = *(float*)(locSdkScalarTable + 0x13E8);
}

static void HierarchySdkDrivenRotCommand_Seg1Cmd55(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x09DC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AE8)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BF4)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3d2861f9, 0, 0, 0x3f7fc89a));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x00A0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A68)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B74)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C80)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbebcc8f1, 0x3ce32fab, 0x3bee6e16, 0x3f6dd95e));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0790) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A88)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B94)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CA0)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbebcc8f1, 0x3ce32fab, 0x3bee6e16, 0x3f6dd95e));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0910) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A88)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B94)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CA0)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbebcc8f1, 0x3ce32fab, 0x3bee6e16, 0x3f6dd95e));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0910) = q;
	}
}

static void HierarchyParentingCommand_Seg1Cmd56(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0390, 0x0E00 + 1 },	// Child[115]: l_hip_helperTwist, Parent[114]: l_hip_helperBend
		{ 0x03A0, 0x0E00 + 1 },	// Child[116]: l_hip_helperTwist_weighted_01, Parent[114]: l_hip_helperBend
		{ 0x03B0, 0x0E00 + 1 },	// Child[117]: l_hip_helperTwist_weighted_02, Parent[114]: l_hip_helperBend
		{ 0x03C0, 0x0E00 + 1 },	// Child[118]: l_hip_helperTwist_weighted_03, Parent[114]: l_hip_helperBend
		{ 0x03E0, 0x0F40 + 1 },	// Child[120]: r_hip_helperTwist, Parent[119]: r_hip_helperBend
		{ 0x03F0, 0x0F40 + 1 },	// Child[121]: r_hip_helperTwist_weighted_01, Parent[119]: r_hip_helperBend
		{ 0x0400, 0x0F40 + 1 },	// Child[122]: r_hip_helperTwist_weighted_02, Parent[119]: r_hip_helperBend
		{ 0x0410, 0x0F40 + 1 }	// Child[123]: r_hip_helperTwist_weighted_03, Parent[119]: r_hip_helperBend
	};

	OrbisAnim_Parenting(2, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

// l_knee_helper_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd57(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ -0.755788f, 0.056929f, -0.006942f },
		OrbisAnim::Location(0x0780),
		OrbisAnim::Location(0x1342),
		OrbisAnim::Location(0x133A),
		OrbisAnim::Location(0x133E)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

// r_knee_helper_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd58(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ -0.755788f, 0.056929f, -0.006942f },
		OrbisAnim::Location(0x0900),
		OrbisAnim::Location(0x13F6),
		OrbisAnim::Location(0x13EE),
		OrbisAnim::Location(0x13F2)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

// spine_c_helper_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd59(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ 0.082241f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0090),
		OrbisAnim::Location(0x1456),
		OrbisAnim::Location(0x144E),
		OrbisAnim::Location(0x1452)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

static void HierarchyParentingCommand_Seg1Cmd60(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0040, 0x00C0 + 1 },	// Child[62]: spine_c_helper, Parent[61]: spine_b_helper
		{ 0x0290, 0x0A00 + 1 },	// Child[99]: l_knee_helper, Parent[98]: l_hip_helper
		{ 0x0310, 0x0C00 + 1 },	// Child[107]: r_knee_helper, Parent[106]: r_hip_helper
		{ 0x0310, 0x0C00 + 1 }	// Child[107]: r_knee_helper, Parent[106]: r_hip_helper
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

static void HierarchyCopyCommand_Seg1Cmd61(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locSdkScalarTable + 0x0888) = *(float*)(locSdkScalarTable + 0x1338);
	*(float*)(locSdkScalarTable + 0x088C) = *(float*)(locSdkScalarTable + 0x133C);
	*(float*)(locSdkScalarTable + 0x0890) = *(float*)(locSdkScalarTable + 0x1340);
	*(float*)(locSdkScalarTable + 0x093C) = *(float*)(locSdkScalarTable + 0x13EC);
	*(float*)(locSdkScalarTable + 0x0940) = *(float*)(locSdkScalarTable + 0x13F0);
	*(float*)(locSdkScalarTable + 0x0944) = *(float*)(locSdkScalarTable + 0x13F4);
	*(float*)(locSdkScalarTable + 0x099C) = *(float*)(locSdkScalarTable + 0x144C);
	*(float*)(locSdkScalarTable + 0x09A0) = *(float*)(locSdkScalarTable + 0x1450);
	*(float*)(locSdkScalarTable + 0x09A4) = *(float*)(locSdkScalarTable + 0x1454);
	*(float*)(locSdkScalarTable + 0x09A4) = *(float*)(locSdkScalarTable + 0x1454);
	*(float*)(locSdkScalarTable + 0x09A4) = *(float*)(locSdkScalarTable + 0x1454);
	*(float*)(locSdkScalarTable + 0x09A4) = *(float*)(locSdkScalarTable + 0x1454);
}

// spine_d_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd62(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0102)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, -0.000000f, 1.000000f, 0.000000f,
		-0.000000f, 0.000000f, -0.000000f, 1.000000f,
		1.000000f, 0.000000f, -0.000000f, 0.000000f,
		-0.000000f, 0.996805f, -0.079880f, 0.000000f,
		0.000000f, 0.079880f, 0.996805f, 0.000000f,
		0.000000f, 0.000000f, 0.125779f, 1.000000f,
		1.150000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.138458f, 0.162522f, 0.000000f,
		0.000000f, -0.162522f, 1.138458f, 0.000000f,
		0.000000f, 0.686003f, 0.264885f, 1.000000f,
		1.150000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.138458f, 0.162522f, 0.000000f,
		0.000000f, -0.162522f, 1.138458f, 0.000000f,
		0.000000f, 0.686003f, 0.264885f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x00C3),
		OrbisAnim::Location(0x06F3),
		OrbisAnim::Location(0x0101),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_upAnkle_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd63(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0642)
	};

	static CONST_EXPR float defaultValues[] = {
		0.999919f, -0.006854f, -0.010761f, 0.000000f,
		0.005687f, 0.994465f, -0.104914f, 0.000000f,
		0.011421f, 0.104845f, 0.994423f, 0.000000f,
		-0.000000f, 0.000000f, -0.000000f, 1.000000f,
		0.999536f, 0.017109f, -0.025204f, 0.000000f,
		0.009850f, 0.601410f, 0.798880f, 0.000000f,
		0.028826f, -0.798758f, 0.600962f, 0.000000f,
		0.000000f, 0.000000f, 0.184811f, 1.000000f,
		-1.149963f, 0.007597f, -0.005294f, 0.000000f,
		0.008764f, 0.680824f, -0.926770f, 0.000000f,
		-0.002988f, -0.926780f, -0.680860f, 0.000000f,
		0.118849f, 0.339096f, -0.012767f, 1.000000f,
		-1.149963f, 0.007597f, -0.005294f, 0.000000f,
		0.008764f, 0.680824f, -0.926770f, 0.000000f,
		-0.002988f, -0.926780f, -0.680860f, 0.000000f,
		0.118849f, 0.339096f, -0.012767f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x0513),
		OrbisAnim::Location(0x0CB3),
		OrbisAnim::Location(0x0A41),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_upAnkle_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd64(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0782)
	};

	static CONST_EXPR float defaultValues[] = {
		0.999919f, -0.006854f, -0.010761f, 0.000000f,
		0.005687f, 0.994465f, -0.104914f, 0.000000f,
		0.011421f, 0.104845f, 0.994423f, 0.000000f,
		0.000000f, 0.000001f, 0.000000f, 1.000000f,
		0.999536f, 0.017109f, -0.025204f, 0.000000f,
		0.009850f, 0.601410f, 0.798880f, 0.000000f,
		0.028826f, -0.798758f, 0.600962f, 0.000000f,
		-0.000000f, 0.000000f, -0.184811f, 1.000000f,
		-1.149963f, -0.007597f, 0.005294f, 0.000000f,
		0.008764f, -0.680824f, 0.926769f, 0.000000f,
		-0.002988f, 0.926780f, 0.680860f, 0.000000f,
		-0.118849f, 0.339096f, -0.012767f, 1.000000f,
		-1.149963f, -0.007597f, 0.005294f, 0.000000f,
		0.008764f, -0.680824f, 0.926770f, 0.000000f,
		-0.002988f, 0.926780f, 0.680860f, 0.000000f,
		-0.118849f, 0.339096f, -0.012767f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x0543),
		OrbisAnim::Location(0x0CF3),
		OrbisAnim::Location(0x0C41),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// spine_d_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd65(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ -0.079965f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0102),
		{
			OrbisAnim::Location(0x0D76),
			OrbisAnim::Location(0x0D7A),
			OrbisAnim::Location(0x0D7E),
		},
		{
			OrbisAnim::Location(0x0D82),
			OrbisAnim::Location(0x0D86),
			OrbisAnim::Location(0x0D8A),
		},
		{
			OrbisAnim::Location(0x0D8E),
			OrbisAnim::Location(0x0D92),
			OrbisAnim::Location(0x0D96)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_upAnkle_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd66(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.820916f, 0.037153f, 0.021598f },
		OrbisAnim::Location(0x0642),
		{
			OrbisAnim::Location(0x1112),
			OrbisAnim::Location(0x1116),
			OrbisAnim::Location(0x111A),
		},
		{
			OrbisAnim::Location(0x111E),
			OrbisAnim::Location(0x1122),
			OrbisAnim::Location(0x1126),
		},
		{
			OrbisAnim::Location(0x112A),
			OrbisAnim::Location(0x112E),
			OrbisAnim::Location(0x1132)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_upAnkle_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd67(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.820916f, 0.037153f, 0.021598f },
		OrbisAnim::Location(0x0782),
		{
			OrbisAnim::Location(0x11EA),
			OrbisAnim::Location(0x11EE),
			OrbisAnim::Location(0x11F2),
		},
		{
			OrbisAnim::Location(0x11F6),
			OrbisAnim::Location(0x11FA),
			OrbisAnim::Location(0x11FE),
		},
		{
			OrbisAnim::Location(0x1202),
			OrbisAnim::Location(0x1206),
			OrbisAnim::Location(0x120A)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

static void HierarchyCopyCommand_Seg1Cmd68(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locJointParams + 0x00E0) = *(float*)(locSdkScalarTable + 0x0D74);
	*(float*)(locJointParams + 0x00E4) = *(float*)(locSdkScalarTable + 0x0D78);
	*(float*)(locJointParams + 0x00E8) = *(float*)(locSdkScalarTable + 0x0D7C);
	*(float*)(locSdkScalarTable + 0x09E0) = *(float*)(locSdkScalarTable + 0x0D80);
	*(float*)(locSdkScalarTable + 0x0AEC) = *(float*)(locSdkScalarTable + 0x0D84);
	*(float*)(locSdkScalarTable + 0x0BF8) = *(float*)(locSdkScalarTable + 0x0D88);
	*(float*)(locJointParams + 0x00C0) = *(float*)(locSdkScalarTable + 0x0D8C);
	*(float*)(locJointParams + 0x00C4) = *(float*)(locSdkScalarTable + 0x0D90);
	*(float*)(locJointParams + 0x00C8) = *(float*)(locSdkScalarTable + 0x0D94);
	*(float*)(locJointParams + 0x07D0) = *(float*)(locSdkScalarTable + 0x1110);
	*(float*)(locJointParams + 0x07D4) = *(float*)(locSdkScalarTable + 0x1114);
	*(float*)(locJointParams + 0x07D8) = *(float*)(locSdkScalarTable + 0x1118);
	*(float*)(locSdkScalarTable + 0x0A6C) = *(float*)(locSdkScalarTable + 0x111C);
	*(float*)(locSdkScalarTable + 0x0B78) = *(float*)(locSdkScalarTable + 0x1120);
	*(float*)(locSdkScalarTable + 0x0C84) = *(float*)(locSdkScalarTable + 0x1124);
	*(float*)(locJointParams + 0x07B0) = *(float*)(locSdkScalarTable + 0x1128);
	*(float*)(locJointParams + 0x07B4) = *(float*)(locSdkScalarTable + 0x112C);
	*(float*)(locJointParams + 0x07B8) = *(float*)(locSdkScalarTable + 0x1130);
	*(float*)(locJointParams + 0x0950) = *(float*)(locSdkScalarTable + 0x11E8);
	*(float*)(locJointParams + 0x0954) = *(float*)(locSdkScalarTable + 0x11EC);
	*(float*)(locJointParams + 0x0958) = *(float*)(locSdkScalarTable + 0x11F0);
	*(float*)(locSdkScalarTable + 0x0A8C) = *(float*)(locSdkScalarTable + 0x11F4);
	*(float*)(locSdkScalarTable + 0x0B98) = *(float*)(locSdkScalarTable + 0x11F8);
	*(float*)(locSdkScalarTable + 0x0CA4) = *(float*)(locSdkScalarTable + 0x11FC);
	*(float*)(locJointParams + 0x0930) = *(float*)(locSdkScalarTable + 0x1200);
	*(float*)(locJointParams + 0x0934) = *(float*)(locSdkScalarTable + 0x1204);
	*(float*)(locJointParams + 0x0938) = *(float*)(locSdkScalarTable + 0x1208);
	*(float*)(locJointParams + 0x0938) = *(float*)(locSdkScalarTable + 0x1208);
}

static void HierarchySdkDrivenRotCommand_Seg1Cmd69(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x09E0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AEC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BF8)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbd23b967, 0, 0, 0x3f7fcba0));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x00D0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A6C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B78)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C84)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3ecc2963, 0x3caed0d0, 0x3b2315cc, 0x3f6ab3d6));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x07C0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A8C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B98)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CA4)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3ecc2963, 0x3caed0d0, 0x3b2315cc, 0x3f6ab3d6));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0940) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A8C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B98)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CA4)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3ecc2963, 0x3caed0d0, 0x3b2315cc, 0x3f6ab3d6));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0940) = q;
	}
}

// l_upAnkle_helper_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd70(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ 0.820916f, 0.037153f, 0.021598f },
		OrbisAnim::Location(0x07B0),
		OrbisAnim::Location(0x1372),
		OrbisAnim::Location(0x136A),
		OrbisAnim::Location(0x136E)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

// r_upAnkle_helper_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd71(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ 0.820916f, 0.037153f, 0.021598f },
		OrbisAnim::Location(0x0930),
		OrbisAnim::Location(0x1426),
		OrbisAnim::Location(0x141E),
		OrbisAnim::Location(0x1422)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

// spine_d_helper_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd72(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ -0.079965f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x00C0),
		OrbisAnim::Location(0x1462),
		OrbisAnim::Location(0x145A),
		OrbisAnim::Location(0x145E)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

static void HierarchyParentingCommand_Seg1Cmd73(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0050, 0x0100 + 1 },	// Child[63]: spine_d_helper, Parent[62]: spine_c_helper
		{ 0x02A0, 0x0A40 + 1 },	// Child[100]: l_upAnkle_helper, Parent[99]: l_knee_helper
		{ 0x0320, 0x0C40 + 1 },	// Child[108]: r_upAnkle_helper, Parent[107]: r_knee_helper
		{ 0x0320, 0x0C40 + 1 }	// Child[108]: r_upAnkle_helper, Parent[107]: r_knee_helper
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

static void HierarchyCopyCommand_Seg1Cmd74(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locSdkScalarTable + 0x08B8) = *(float*)(locSdkScalarTable + 0x1368);
	*(float*)(locSdkScalarTable + 0x08BC) = *(float*)(locSdkScalarTable + 0x136C);
	*(float*)(locSdkScalarTable + 0x08C0) = *(float*)(locSdkScalarTable + 0x1370);
	*(float*)(locSdkScalarTable + 0x096C) = *(float*)(locSdkScalarTable + 0x141C);
	*(float*)(locSdkScalarTable + 0x0970) = *(float*)(locSdkScalarTable + 0x1420);
	*(float*)(locSdkScalarTable + 0x0974) = *(float*)(locSdkScalarTable + 0x1424);
	*(float*)(locSdkScalarTable + 0x09A8) = *(float*)(locSdkScalarTable + 0x1458);
	*(float*)(locSdkScalarTable + 0x09AC) = *(float*)(locSdkScalarTable + 0x145C);
	*(float*)(locSdkScalarTable + 0x09B0) = *(float*)(locSdkScalarTable + 0x1460);
	*(float*)(locSdkScalarTable + 0x09B0) = *(float*)(locSdkScalarTable + 0x1460);
	*(float*)(locSdkScalarTable + 0x09B0) = *(float*)(locSdkScalarTable + 0x1460);
	*(float*)(locSdkScalarTable + 0x09B0) = *(float*)(locSdkScalarTable + 0x1460);
}

// spine_e_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd75(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0142)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, -0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, -0.000000f, 0.000000f,
		-0.000000f, 0.998069f, -0.062120f, 0.000000f,
		0.000000f, 0.062120f, 0.998069f, 0.000000f,
		-0.000000f, -0.000000f, 0.080247f, 1.000000f,
		1.150000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.147802f, 0.071064f, 0.000000f,
		0.000000f, -0.071064f, 1.147802f, 0.000000f,
		0.000000f, 0.665561f, 0.408079f, 1.000000f,
		1.150000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.147802f, 0.071064f, 0.000000f,
		0.000000f, -0.071064f, 1.147802f, 0.000000f,
		0.000000f, 0.665561f, 0.408079f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x00F3),
		OrbisAnim::Location(0x0733),
		OrbisAnim::Location(0x0141),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_ankle_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd76(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0682)
	};

	static CONST_EXPR float defaultValues[] = {
		0.990971f, 0.100430f, 0.088831f, 0.000000f,
		-0.130199f, 0.562566f, 0.816436f, 0.000000f,
		0.032021f, -0.820630f, 0.570562f, 0.000000f,
		-0.000000f, 0.000000f, -0.000000f, 1.000000f,
		0.993865f, -0.089258f, 0.065304f, 0.000000f,
		0.104208f, 0.953552f, -0.282630f, 0.000000f,
		-0.037044f, 0.287702f, 0.957003f, 0.000000f,
		0.001347f, 0.012368f, 0.117304f, 1.000000f,
		-1.149204f, 0.042600f, -0.003987f, 0.000000f,
		-0.008443f, -0.330857f, -1.101346f, 0.000000f,
		-0.041945f, -1.100554f, 0.330941f, 0.000000f,
		0.118297f, 0.167817f, -0.138597f, 1.000000f,
		-1.148601f, 0.056708f, -0.000000f, 0.000000f,
		-0.010532f, -0.213320f, -1.129993f, 0.000000f,
		-0.055721f, -1.128618f, 0.213579f, 0.000000f,
		0.118297f, 0.167817f, -0.138597f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x0573),
		OrbisAnim::Location(0x0D33),
		OrbisAnim::Location(0x0A81),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_ankle_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd77(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x07C2)
	};

	static CONST_EXPR float defaultValues[] = {
		0.990971f, 0.100430f, 0.088831f, 0.000000f,
		-0.130199f, 0.562566f, 0.816436f, 0.000000f,
		0.032021f, -0.820630f, 0.570562f, 0.000000f,
		-0.000000f, 0.000000f, -0.000000f, 1.000000f,
		0.993865f, -0.089258f, 0.065304f, 0.000000f,
		0.104208f, 0.953552f, -0.282630f, 0.000000f,
		-0.037044f, 0.287702f, 0.957003f, 0.000000f,
		-0.001347f, -0.012368f, -0.117304f, 1.000000f,
		-1.149204f, -0.042601f, 0.003987f, 0.000000f,
		-0.008443f, 0.330857f, 1.101346f, 0.000000f,
		-0.041945f, 1.100554f, -0.330941f, 0.000000f,
		-0.118297f, 0.167817f, -0.138597f, 1.000000f,
		-1.148601f, -0.056708f, 0.000000f, 0.000000f,
		-0.010532f, 0.213320f, 1.129993f, 0.000000f,
		-0.055721f, 1.128618f, -0.213579f, 0.000000f,
		-0.118297f, 0.167817f, -0.138597f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x05A3),
		OrbisAnim::Location(0x0D73),
		OrbisAnim::Location(0x0C81),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// spine_e_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd78(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ -0.062160f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0142),
		{
			OrbisAnim::Location(0x0D9A),
			OrbisAnim::Location(0x0D9E),
			OrbisAnim::Location(0x0DA2),
		},
		{
			OrbisAnim::Location(0x0DA6),
			OrbisAnim::Location(0x0DAA),
			OrbisAnim::Location(0x0DAE),
		},
		{
			OrbisAnim::Location(0x0DB2),
			OrbisAnim::Location(0x0DB6),
			OrbisAnim::Location(0x0DBA)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_ankle_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd79(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.772283f, -0.135859f, 0.025841f },
		OrbisAnim::Location(0x0682),
		{
			OrbisAnim::Location(0x1136),
			OrbisAnim::Location(0x113A),
			OrbisAnim::Location(0x113E),
		},
		{
			OrbisAnim::Location(0x1142),
			OrbisAnim::Location(0x1146),
			OrbisAnim::Location(0x114A),
		},
		{
			OrbisAnim::Location(0x114E),
			OrbisAnim::Location(0x1152),
			OrbisAnim::Location(0x1156)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_ankle_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd80(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.772283f, -0.135859f, 0.025841f },
		OrbisAnim::Location(0x07C2),
		{
			OrbisAnim::Location(0x120E),
			OrbisAnim::Location(0x1212),
			OrbisAnim::Location(0x1216),
		},
		{
			OrbisAnim::Location(0x121A),
			OrbisAnim::Location(0x121E),
			OrbisAnim::Location(0x1222),
		},
		{
			OrbisAnim::Location(0x1226),
			OrbisAnim::Location(0x122A),
			OrbisAnim::Location(0x122E)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

static void HierarchyCopyCommand_Seg1Cmd81(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locJointParams + 0x0110) = *(float*)(locSdkScalarTable + 0x0D98);
	*(float*)(locJointParams + 0x0114) = *(float*)(locSdkScalarTable + 0x0D9C);
	*(float*)(locJointParams + 0x0118) = *(float*)(locSdkScalarTable + 0x0DA0);
	*(float*)(locSdkScalarTable + 0x09E4) = *(float*)(locSdkScalarTable + 0x0DA4);
	*(float*)(locSdkScalarTable + 0x0AF0) = *(float*)(locSdkScalarTable + 0x0DA8);
	*(float*)(locSdkScalarTable + 0x0BFC) = *(float*)(locSdkScalarTable + 0x0DAC);
	*(float*)(locJointParams + 0x00F0) = *(float*)(locSdkScalarTable + 0x0DB0);
	*(float*)(locJointParams + 0x00F4) = *(float*)(locSdkScalarTable + 0x0DB4);
	*(float*)(locJointParams + 0x00F8) = *(float*)(locSdkScalarTable + 0x0DB8);
	*(float*)(locJointParams + 0x0800) = *(float*)(locSdkScalarTable + 0x1134);
	*(float*)(locJointParams + 0x0804) = *(float*)(locSdkScalarTable + 0x1138);
	*(float*)(locJointParams + 0x0808) = *(float*)(locSdkScalarTable + 0x113C);
	*(float*)(locSdkScalarTable + 0x0A70) = *(float*)(locSdkScalarTable + 0x1140);
	*(float*)(locSdkScalarTable + 0x0B7C) = *(float*)(locSdkScalarTable + 0x1144);
	*(float*)(locSdkScalarTable + 0x0C88) = *(float*)(locSdkScalarTable + 0x1148);
	*(float*)(locJointParams + 0x07E0) = *(float*)(locSdkScalarTable + 0x114C);
	*(float*)(locJointParams + 0x07E4) = *(float*)(locSdkScalarTable + 0x1150);
	*(float*)(locJointParams + 0x07E8) = *(float*)(locSdkScalarTable + 0x1154);
	*(float*)(locJointParams + 0x0980) = *(float*)(locSdkScalarTable + 0x120C);
	*(float*)(locJointParams + 0x0984) = *(float*)(locSdkScalarTable + 0x1210);
	*(float*)(locJointParams + 0x0988) = *(float*)(locSdkScalarTable + 0x1214);
	*(float*)(locSdkScalarTable + 0x0A90) = *(float*)(locSdkScalarTable + 0x1218);
	*(float*)(locSdkScalarTable + 0x0B9C) = *(float*)(locSdkScalarTable + 0x121C);
	*(float*)(locSdkScalarTable + 0x0CA8) = *(float*)(locSdkScalarTable + 0x1220);
	*(float*)(locJointParams + 0x0960) = *(float*)(locSdkScalarTable + 0x1224);
	*(float*)(locJointParams + 0x0964) = *(float*)(locSdkScalarTable + 0x1228);
	*(float*)(locJointParams + 0x0968) = *(float*)(locSdkScalarTable + 0x122C);
	*(float*)(locJointParams + 0x0968) = *(float*)(locSdkScalarTable + 0x122C);
}

static void HierarchySdkDrivenRotCommand_Seg1Cmd82(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x09E4)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AF0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BFC)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbcfe90dd, 0, 0, 0x3f7fe05a));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0100) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A70)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B7C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C88)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3ec0c86c, 0xbd6da5c2, 0x3d199c4e, 0x3f6c7fd0));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x07F0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A90)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B9C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CA8)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3ec0c86c, 0xbd6da5c2, 0x3d199c4e, 0x3f6c7fd0));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0970) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A90)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B9C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CA8)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3ec0c86c, 0xbd6da5c2, 0x3d199c4e, 0x3f6c7fd0));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0970) = q;
	}
}

// l_ankle_helper_bendTwistDriver
static void NdiBendTwistDriverCommand_Seg1Cmd83(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::BendTwistDriverParams params = {
		0x11BF63,
		1,
		0,
		1.000000f,
		{ 0.135441f, 0.691342f, 0.709719f},
		{ 0.772283f, -0.135859f, 0.025841f},
		OrbisAnim::Location(0x07E0),
		OrbisAnim::Location(0x118A),
		OrbisAnim::Location(0x118E),
		OrbisAnim::Location(0x1192),
		OrbisAnim::Location(0x117E),
		OrbisAnim::Location(0x1182),
		OrbisAnim::Location(0x1186)
	};

	OrbisAnim::CommandBlock::ExecuteCommandBendTwistDriverImpl(&hierarchyHeader, &params);
}

// r_ankle_helper_bendTwistDriver
static void NdiBendTwistDriverCommand_Seg1Cmd84(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::BendTwistDriverParams params = {
		0x11BF63,
		1,
		0,
		1.000000f,
		{ -0.135445f, -0.691345f, -0.709716f},
		{ 0.772283f, -0.135859f, 0.025841f},
		OrbisAnim::Location(0x0960),
		OrbisAnim::Location(0x1262),
		OrbisAnim::Location(0x1266),
		OrbisAnim::Location(0x126A),
		OrbisAnim::Location(0x1256),
		OrbisAnim::Location(0x125A),
		OrbisAnim::Location(0x125E)
	};

	OrbisAnim::CommandBlock::ExecuteCommandBendTwistDriverImpl(&hierarchyHeader, &params);
}

// spine_e_helper_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd85(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ -0.062160f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x00F0),
		OrbisAnim::Location(0x146E),
		OrbisAnim::Location(0x1466),
		OrbisAnim::Location(0x146A)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

static void HierarchyParentingCommand_Seg1Cmd86(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0060, 0x0140 + 1 },	// Child[64]: spine_e_helper, Parent[63]: spine_d_helper
		{ 0x02B0, 0x0A80 + 1 },	// Child[101]: l_ankle_helper, Parent[100]: l_upAnkle_helper
		{ 0x0330, 0x0C80 + 1 },	// Child[109]: r_ankle_helper, Parent[108]: r_upAnkle_helper
		{ 0x0330, 0x0C80 + 1 }	// Child[109]: r_ankle_helper, Parent[108]: r_upAnkle_helper
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

static void HierarchyCopyCommand_Seg1Cmd87(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locSdkScalarTable + 0x0A78) = *(float*)(locSdkScalarTable + 0x117C);
	*(float*)(locSdkScalarTable + 0x0B84) = *(float*)(locSdkScalarTable + 0x1180);
	*(float*)(locSdkScalarTable + 0x0C90) = *(float*)(locSdkScalarTable + 0x1184);
	*(float*)(locSdkScalarTable + 0x0A7C) = *(float*)(locSdkScalarTable + 0x1188);
	*(float*)(locSdkScalarTable + 0x0B88) = *(float*)(locSdkScalarTable + 0x118C);
	*(float*)(locSdkScalarTable + 0x0C94) = *(float*)(locSdkScalarTable + 0x1190);
	*(float*)(locSdkScalarTable + 0x0A98) = *(float*)(locSdkScalarTable + 0x1254);
	*(float*)(locSdkScalarTable + 0x0BA4) = *(float*)(locSdkScalarTable + 0x1258);
	*(float*)(locSdkScalarTable + 0x0CB0) = *(float*)(locSdkScalarTable + 0x125C);
	*(float*)(locSdkScalarTable + 0x0A9C) = *(float*)(locSdkScalarTable + 0x1260);
	*(float*)(locSdkScalarTable + 0x0BA8) = *(float*)(locSdkScalarTable + 0x1264);
	*(float*)(locSdkScalarTable + 0x0CB4) = *(float*)(locSdkScalarTable + 0x1268);
	*(float*)(locSdkScalarTable + 0x09B4) = *(float*)(locSdkScalarTable + 0x1464);
	*(float*)(locSdkScalarTable + 0x09B8) = *(float*)(locSdkScalarTable + 0x1468);
	*(float*)(locSdkScalarTable + 0x09BC) = *(float*)(locSdkScalarTable + 0x146C);
	*(float*)(locSdkScalarTable + 0x09BC) = *(float*)(locSdkScalarTable + 0x146C);
}

// neck_a_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd88(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0182)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, -0.000000f, 1.000000f, 0.000000f,
		-0.000000f, 0.000000f, -0.000000f, 1.000000f,
		1.000000f, 0.000000f, -0.000000f, 0.000000f,
		-0.000000f, 0.781911f, -0.623390f, 0.000000f,
		0.000000f, 0.623390f, 0.781911f, 0.000000f,
		-0.000000f, 0.007961f, 0.031929f, 1.000000f,
		1.150000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.150000f, -0.000375f, 0.000000f,
		0.000000f, 0.000375f, 1.150000f, 0.000000f,
		0.000000f, 0.659858f, 0.500187f, 1.000000f,
		1.150000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.150000f, -0.000375f, 0.000000f,
		0.000000f, 0.000375f, 1.150000f, 0.000000f,
		0.000000f, 0.659858f, 0.500187f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x0123),
		OrbisAnim::Location(0x0773),
		OrbisAnim::Location(0x0181),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_toe_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd89(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x06C2)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, -0.000000f, 0.000000f,
		-0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, -0.000000f, 1.000000f, 0.000000f,
		-0.000000f, -0.000000f, 0.000000f, 1.000000f,
		0.999647f, 0.023178f, -0.012946f, 0.000000f,
		0.011585f, 0.057899f, 0.998255f, 0.000000f,
		0.023887f, -0.998053f, 0.057610f, 0.000000f,
		0.001046f, -0.026809f, 0.018640f, 1.000000f,
		-1.144139f, -0.000000f, 0.115953f, 0.000000f,
		-0.115953f, -0.000000f, -1.144139f, 0.000000f,
		0.000000f, -1.150000f, 0.000000f, 0.000000f,
		0.111724f, 0.034683f, -0.113403f, 1.000000f,
		-1.145454f, -0.102156f, 0.000000f, 0.000000f,
		0.083735f, -0.938902f, -0.658750f, 0.000000f,
		0.058518f, -0.656146f, 0.942628f, 0.000000f,
		0.111724f, 0.034683f, -0.113403f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x05D3),
		OrbisAnim::Location(0x0DB3),
		OrbisAnim::Location(0x0AC1),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_toe_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd90(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0802)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, -0.000000f, -0.000000f, 0.000000f,
		0.000000f, 1.000000f, -0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.000000f, -0.000000f, 0.000000f, 1.000000f,
		0.999647f, 0.023178f, -0.012946f, 0.000000f,
		0.011585f, 0.057899f, 0.998255f, 0.000000f,
		0.023887f, -0.998053f, 0.057610f, 0.000000f,
		-0.001046f, 0.026809f, -0.018640f, 1.000000f,
		-1.144139f, 0.000000f, -0.115953f, 0.000000f,
		-0.115953f, 0.000000f, 1.144139f, 0.000000f,
		0.000000f, 1.150000f, -0.000000f, 0.000000f,
		-0.111724f, 0.034683f, -0.113403f, 1.000000f,
		-1.145454f, 0.102156f, -0.000000f, 0.000000f,
		0.083735f, 0.938902f, 0.658750f, 0.000000f,
		0.058518f, 0.656146f, -0.942628f, 0.000000f,
		-0.111724f, 0.034683f, -0.113403f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x0603),
		OrbisAnim::Location(0x0DF3),
		OrbisAnim::Location(0x0CC1),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

static void HierarchyParentingCommand_Seg1Cmd91(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x00B0, 0x0180 + 1 },	// Child[69]: l_clavicle_helper, Parent[64]: spine_e_helper
		{ 0x0190, 0x0180 + 1 },	// Child[83]: r_clavicle_helper, Parent[64]: spine_e_helper
		{ 0x0190, 0x0180 + 1 },	// Child[83]: r_clavicle_helper, Parent[64]: spine_e_helper
		{ 0x0190, 0x0180 + 1 }	// Child[83]: r_clavicle_helper, Parent[64]: spine_e_helper
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

// neck_a_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd92(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ -0.673071f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0182),
		{
			OrbisAnim::Location(0x0DBE),
			OrbisAnim::Location(0x0DC2),
			OrbisAnim::Location(0x0DC6),
		},
		{
			OrbisAnim::Location(0x0DCA),
			OrbisAnim::Location(0x0DCE),
			OrbisAnim::Location(0x0DD2),
		},
		{
			OrbisAnim::Location(0x0DD6),
			OrbisAnim::Location(0x0DDA),
			OrbisAnim::Location(0x0DDE)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_toe_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd93(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.549701f, -0.005603f, -0.128035f },
		OrbisAnim::Location(0x06C2),
		{
			OrbisAnim::Location(0x115A),
			OrbisAnim::Location(0x115E),
			OrbisAnim::Location(0x1162),
		},
		{
			OrbisAnim::Location(0x1166),
			OrbisAnim::Location(0x116A),
			OrbisAnim::Location(0x116E),
		},
		{
			OrbisAnim::Location(0x1172),
			OrbisAnim::Location(0x1176),
			OrbisAnim::Location(0x117A)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_toe_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd94(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.549701f, -0.005603f, -0.128035f },
		OrbisAnim::Location(0x0802),
		{
			OrbisAnim::Location(0x1232),
			OrbisAnim::Location(0x1236),
			OrbisAnim::Location(0x123A),
		},
		{
			OrbisAnim::Location(0x123E),
			OrbisAnim::Location(0x1242),
			OrbisAnim::Location(0x1246),
		},
		{
			OrbisAnim::Location(0x124A),
			OrbisAnim::Location(0x124E),
			OrbisAnim::Location(0x1252)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_scapula_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd95(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0282)
	};

	static CONST_EXPR float defaultValues[] = {
		0.998658f, -0.048239f, 0.018826f, 0.000000f,
		0.036103f, 0.909259f, 0.414662f, 0.000000f,
		-0.037121f, -0.413426f, 0.909781f, 0.000000f,
		0.000000f, -0.000000f, -0.000000f, 1.000000f,
		0.999822f, 0.000000f, -0.018848f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.018848f, 0.000000f, 0.999822f, 0.000000f,
		-0.064163f, -0.003437f, 0.000027f, 1.000000f,
		-1.150000f, -0.000000f, -0.000000f, 0.000000f,
		0.000000f, 0.000000f, -1.150000f, 0.000000f,
		0.000000f, -1.150000f, -0.000000f, 0.000000f,
		0.001919f, 0.659858f, 0.500187f, 1.000000f,
		-1.150000f, -0.000000f, -0.000000f, 0.000000f,
		0.000000f, 0.000000f, -1.150000f, 0.000000f,
		0.000000f, -1.150000f, -0.000000f, 0.000000f,
		0.001919f, 0.659858f, 0.500187f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x01E3),
		OrbisAnim::Location(0x08F3),
		OrbisAnim::Location(0x02C1),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_scapula_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd96(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0402)
	};

	static CONST_EXPR float defaultValues[] = {
		0.998658f, -0.048239f, 0.018826f, 0.000000f,
		0.036103f, 0.909259f, 0.414662f, 0.000000f,
		-0.037121f, -0.413426f, 0.909781f, 0.000000f,
		0.000000f, 0.000000f, -0.000001f, 1.000000f,
		0.999822f, 0.000000f, -0.018848f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.018848f, 0.000000f, 0.999822f, 0.000000f,
		0.064163f, 0.003437f, -0.000027f, 1.000000f,
		-1.150000f, 0.000000f, -0.000000f, 0.000000f,
		-0.000000f, -0.000000f, 1.150000f, 0.000000f,
		0.000000f, 1.150000f, 0.000000f, 0.000000f,
		-0.001919f, 0.659858f, 0.500187f, 1.000000f,
		-1.150000f, 0.000000f, -0.000000f, 0.000000f,
		-0.000000f, -0.000000f, 1.150000f, 0.000000f,
		0.000000f, 1.150000f, 0.000000f, 0.000000f,
		-0.001919f, 0.659859f, 0.500187f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x0213),
		OrbisAnim::Location(0x0933),
		OrbisAnim::Location(0x0641),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

static void HierarchySdkDrivenRotCommand_Seg1Cmd97(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A78)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B84)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C90)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0850) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A7C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B88)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C94)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0880) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A98)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BA4)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CB0)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x09D0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A9C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BA8)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CB4)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0A00) = q;
	}
}

static void HierarchyCopyCommand_Seg1Cmd98(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locJointParams + 0x0140) = *(float*)(locSdkScalarTable + 0x0DBC);
	*(float*)(locJointParams + 0x0144) = *(float*)(locSdkScalarTable + 0x0DC0);
	*(float*)(locJointParams + 0x0148) = *(float*)(locSdkScalarTable + 0x0DC4);
	*(float*)(locSdkScalarTable + 0x09E8) = *(float*)(locSdkScalarTable + 0x0DC8);
	*(float*)(locSdkScalarTable + 0x0AF4) = *(float*)(locSdkScalarTable + 0x0DCC);
	*(float*)(locSdkScalarTable + 0x0C00) = *(float*)(locSdkScalarTable + 0x0DD0);
	*(float*)(locJointParams + 0x0120) = *(float*)(locSdkScalarTable + 0x0DD4);
	*(float*)(locJointParams + 0x0124) = *(float*)(locSdkScalarTable + 0x0DD8);
	*(float*)(locJointParams + 0x0128) = *(float*)(locSdkScalarTable + 0x0DDC);
	*(float*)(locJointParams + 0x0830) = *(float*)(locSdkScalarTable + 0x1158);
	*(float*)(locJointParams + 0x0834) = *(float*)(locSdkScalarTable + 0x115C);
	*(float*)(locJointParams + 0x0838) = *(float*)(locSdkScalarTable + 0x1160);
	*(float*)(locSdkScalarTable + 0x0A74) = *(float*)(locSdkScalarTable + 0x1164);
	*(float*)(locSdkScalarTable + 0x0B80) = *(float*)(locSdkScalarTable + 0x1168);
	*(float*)(locSdkScalarTable + 0x0C8C) = *(float*)(locSdkScalarTable + 0x116C);
	*(float*)(locJointParams + 0x0810) = *(float*)(locSdkScalarTable + 0x1170);
	*(float*)(locJointParams + 0x0814) = *(float*)(locSdkScalarTable + 0x1174);
	*(float*)(locJointParams + 0x0818) = *(float*)(locSdkScalarTable + 0x1178);
	*(float*)(locJointParams + 0x09B0) = *(float*)(locSdkScalarTable + 0x1230);
	*(float*)(locJointParams + 0x09B4) = *(float*)(locSdkScalarTable + 0x1234);
	*(float*)(locJointParams + 0x09B8) = *(float*)(locSdkScalarTable + 0x1238);
	*(float*)(locSdkScalarTable + 0x0A94) = *(float*)(locSdkScalarTable + 0x123C);
	*(float*)(locSdkScalarTable + 0x0BA0) = *(float*)(locSdkScalarTable + 0x1240);
	*(float*)(locSdkScalarTable + 0x0CAC) = *(float*)(locSdkScalarTable + 0x1244);
	*(float*)(locJointParams + 0x0990) = *(float*)(locSdkScalarTable + 0x1248);
	*(float*)(locJointParams + 0x0994) = *(float*)(locSdkScalarTable + 0x124C);
	*(float*)(locJointParams + 0x0998) = *(float*)(locSdkScalarTable + 0x1250);
	*(float*)(locJointParams + 0x0998) = *(float*)(locSdkScalarTable + 0x1250);
}

// l_scapula_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd99(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.426743f, -0.000000f, -0.048258f },
		OrbisAnim::Location(0x0282),
		{
			OrbisAnim::Location(0x0E4E),
			OrbisAnim::Location(0x0E52),
			OrbisAnim::Location(0x0E56),
		},
		{
			OrbisAnim::Location(0x0E5A),
			OrbisAnim::Location(0x0E5E),
			OrbisAnim::Location(0x0E62),
		},
		{
			OrbisAnim::Location(0x0E66),
			OrbisAnim::Location(0x0E6A),
			OrbisAnim::Location(0x0E6E)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_scapula_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd100(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.426743f, 0.000000f, -0.048258f },
		OrbisAnim::Location(0x0402),
		{
			OrbisAnim::Location(0x0F7A),
			OrbisAnim::Location(0x0F7E),
			OrbisAnim::Location(0x0F82),
		},
		{
			OrbisAnim::Location(0x0F86),
			OrbisAnim::Location(0x0F8A),
			OrbisAnim::Location(0x0F8E),
		},
		{
			OrbisAnim::Location(0x0F92),
			OrbisAnim::Location(0x0F96),
			OrbisAnim::Location(0x0F9A)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_ankle_helperBend_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd101(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0870),
		OrbisAnim::Location(0x1306),
		OrbisAnim::Location(0x12FE),
		OrbisAnim::Location(0x1302)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

// r_ankle_helperBend_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd102(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x09F0),
		OrbisAnim::Location(0x13BA),
		OrbisAnim::Location(0x13B2),
		OrbisAnim::Location(0x13B6)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

static void HierarchyParentingCommand_Seg1Cmd103(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x02D0, 0x0A80 + 1 },	// Child[103]: l_ankle_helperTwist, Parent[100]: l_upAnkle_helper
		{ 0x0350, 0x0C80 + 1 },	// Child[111]: r_ankle_helperTwist, Parent[108]: r_upAnkle_helper
		{ 0x0350, 0x0C80 + 1 },	// Child[111]: r_ankle_helperTwist, Parent[108]: r_upAnkle_helper
		{ 0x0350, 0x0C80 + 1 }	// Child[111]: r_ankle_helperTwist, Parent[108]: r_upAnkle_helper
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

static void HierarchyCopyCommand_Seg1Cmd104(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locJointParams + 0x0230) = *(float*)(locSdkScalarTable + 0x0E4C);
	*(float*)(locJointParams + 0x0440) = *(float*)(locSdkScalarTable + 0x0E4C);
	*(float*)(locJointParams + 0x0234) = *(float*)(locSdkScalarTable + 0x0E50);
	*(float*)(locJointParams + 0x0444) = *(float*)(locSdkScalarTable + 0x0E50);
	*(float*)(locJointParams + 0x0238) = *(float*)(locSdkScalarTable + 0x0E54);
	*(float*)(locJointParams + 0x0448) = *(float*)(locSdkScalarTable + 0x0E54);
	*(float*)(locSdkScalarTable + 0x09F8) = *(float*)(locSdkScalarTable + 0x0E58);
	*(float*)(locSdkScalarTable + 0x0B04) = *(float*)(locSdkScalarTable + 0x0E5C);
	*(float*)(locSdkScalarTable + 0x0C10) = *(float*)(locSdkScalarTable + 0x0E60);
	*(float*)(locJointParams + 0x0210) = *(float*)(locSdkScalarTable + 0x0E64);
	*(float*)(locJointParams + 0x0214) = *(float*)(locSdkScalarTable + 0x0E68);
	*(float*)(locJointParams + 0x0218) = *(float*)(locSdkScalarTable + 0x0E6C);
	*(float*)(locJointParams + 0x04D0) = *(float*)(locSdkScalarTable + 0x0F78);
	*(float*)(locJointParams + 0x06E0) = *(float*)(locSdkScalarTable + 0x0F78);
	*(float*)(locJointParams + 0x04D4) = *(float*)(locSdkScalarTable + 0x0F7C);
	*(float*)(locJointParams + 0x06E4) = *(float*)(locSdkScalarTable + 0x0F7C);
	*(float*)(locJointParams + 0x04D8) = *(float*)(locSdkScalarTable + 0x0F80);
	*(float*)(locJointParams + 0x06E8) = *(float*)(locSdkScalarTable + 0x0F80);
	*(float*)(locSdkScalarTable + 0x0A2C) = *(float*)(locSdkScalarTable + 0x0F84);
	*(float*)(locSdkScalarTable + 0x0B38) = *(float*)(locSdkScalarTable + 0x0F88);
	*(float*)(locSdkScalarTable + 0x0C44) = *(float*)(locSdkScalarTable + 0x0F8C);
	*(float*)(locJointParams + 0x04B0) = *(float*)(locSdkScalarTable + 0x0F90);
	*(float*)(locJointParams + 0x04B4) = *(float*)(locSdkScalarTable + 0x0F94);
	*(float*)(locJointParams + 0x04B8) = *(float*)(locSdkScalarTable + 0x0F98);
	*(float*)(locSdkScalarTable + 0x084C) = *(float*)(locSdkScalarTable + 0x12FC);
	*(float*)(locSdkScalarTable + 0x0850) = *(float*)(locSdkScalarTable + 0x1300);
	*(float*)(locSdkScalarTable + 0x0854) = *(float*)(locSdkScalarTable + 0x1304);
	*(float*)(locSdkScalarTable + 0x0900) = *(float*)(locSdkScalarTable + 0x13B0);
	*(float*)(locSdkScalarTable + 0x0904) = *(float*)(locSdkScalarTable + 0x13B4);
	*(float*)(locSdkScalarTable + 0x0908) = *(float*)(locSdkScalarTable + 0x13B8);
	*(float*)(locSdkScalarTable + 0x0908) = *(float*)(locSdkScalarTable + 0x13B8);
	*(float*)(locSdkScalarTable + 0x0908) = *(float*)(locSdkScalarTable + 0x13B8);
}

static void HierarchySdkDrivenRotCommand_Seg1Cmd105(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x09E8)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AF4)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C00)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbea91276, 0, 0, 0x3f71a3b7));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0130) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A74)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B80)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C8C)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3e8a95b4, 0xbca44717, 0xbd791788, 0x3f75e5e4));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0820) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A94)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BA0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CAC)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3e8a95b4, 0xbca44717, 0xbd791788, 0x3f75e5e4));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x09A0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A94)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0BA0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0CAC)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3e8a95b4, 0xbca44717, 0xbd791788, 0x3f75e5e4));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x09A0) = q;
	}
}

static void HierarchyParentingCommand_Seg1Cmd106(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x02E0, 0x0B40 + 1 },	// Child[104]: l_ankle_helperBend, Parent[103]: l_ankle_helperTwist
		{ 0x0360, 0x0D40 + 1 },	// Child[112]: r_ankle_helperBend, Parent[111]: r_ankle_helperTwist
		{ 0x0360, 0x0D40 + 1 },	// Child[112]: r_ankle_helperBend, Parent[111]: r_ankle_helperTwist
		{ 0x0360, 0x0D40 + 1 }	// Child[112]: r_ankle_helperBend, Parent[111]: r_ankle_helperTwist
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

// l_toe_helper_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd107(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ 0.549701f, -0.005603f, -0.128035f },
		OrbisAnim::Location(0x0810),
		OrbisAnim::Location(0x1366),
		OrbisAnim::Location(0x135E),
		OrbisAnim::Location(0x1362)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

// neck_a_helper_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd108(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ -0.673071f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0120),
		OrbisAnim::Location(0x138A),
		OrbisAnim::Location(0x1382),
		OrbisAnim::Location(0x1386)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

// r_toe_helper_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd109(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ 0.549701f, -0.005603f, -0.128035f },
		OrbisAnim::Location(0x0990),
		OrbisAnim::Location(0x141A),
		OrbisAnim::Location(0x1412),
		OrbisAnim::Location(0x1416)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

static void HierarchySdkDrivenRotCommand_Seg1Cmd110(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x09F8)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B04)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C10)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3e58c664, 0xbba768c7, 0xbcc1297e, 0x3f7a1f2b));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0220) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A2C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B38)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C44)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3e58c664, 0xbba768c7, 0xbcc1297e, 0x3f7a1f2b));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x04C0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A2C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B38)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C44)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3e58c664, 0xbba768c7, 0xbcc1297e, 0x3f7a1f2b));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x04C0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A2C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B38)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C44)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3e58c664, 0xbba768c7, 0xbcc1297e, 0x3f7a1f2b));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x04C0) = q;
	}
}

static void HierarchyParentingCommand_Seg1Cmd111(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0070, 0x0180 + 1 },	// Child[65]: neck_a_helper, Parent[64]: spine_e_helper
		{ 0x02C0, 0x0AC0 + 1 },	// Child[102]: l_toe_helper, Parent[101]: l_ankle_helper
		{ 0x0340, 0x0CC0 + 1 },	// Child[110]: r_toe_helper, Parent[109]: r_ankle_helper
		{ 0x0340, 0x0CC0 + 1 }	// Child[110]: r_toe_helper, Parent[109]: r_ankle_helper
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

// l_scapula_helper_bendTwistDriver
static void NdiBendTwistDriverCommand_Seg1Cmd112(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::BendTwistDriverParams params = {
		0x11BF63,
		0,
		0,
		1.000000f,
		{ -0.000000f, 0.000000f, 1.000000f},
		{ 0.426743f, -0.000000f, -0.048258f},
		OrbisAnim::Location(0x0210),
		OrbisAnim::Location(0x0F62),
		OrbisAnim::Location(0x0F66),
		OrbisAnim::Location(0x0F6A),
		OrbisAnim::Location(0x0F6E),
		OrbisAnim::Location(0x0F72),
		OrbisAnim::Location(0x0F76)
	};

	OrbisAnim::CommandBlock::ExecuteCommandBendTwistDriverImpl(&hierarchyHeader, &params);
}

// r_scapula_helper_bendTwistDriver
static void NdiBendTwistDriverCommand_Seg1Cmd113(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::BendTwistDriverParams params = {
		0x11BF63,
		0,
		0,
		1.000000f,
		{ -0.000000f, 0.000003f, -1.000000f},
		{ 0.426743f, 0.000000f, -0.048258f},
		OrbisAnim::Location(0x04B0),
		OrbisAnim::Location(0x108E),
		OrbisAnim::Location(0x1092),
		OrbisAnim::Location(0x1096),
		OrbisAnim::Location(0x109A),
		OrbisAnim::Location(0x109E),
		OrbisAnim::Location(0x10A2)
	};

	OrbisAnim::CommandBlock::ExecuteCommandBendTwistDriverImpl(&hierarchyHeader, &params);
}

static void HierarchyCopyCommand_Seg1Cmd114(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locSdkScalarTable + 0x08AC) = *(float*)(locSdkScalarTable + 0x135C);
	*(float*)(locSdkScalarTable + 0x08B0) = *(float*)(locSdkScalarTable + 0x1360);
	*(float*)(locSdkScalarTable + 0x08B4) = *(float*)(locSdkScalarTable + 0x1364);
	*(float*)(locSdkScalarTable + 0x08D0) = *(float*)(locSdkScalarTable + 0x1380);
	*(float*)(locSdkScalarTable + 0x08D4) = *(float*)(locSdkScalarTable + 0x1384);
	*(float*)(locSdkScalarTable + 0x08D8) = *(float*)(locSdkScalarTable + 0x1388);
	*(float*)(locSdkScalarTable + 0x0960) = *(float*)(locSdkScalarTable + 0x1410);
	*(float*)(locSdkScalarTable + 0x0964) = *(float*)(locSdkScalarTable + 0x1414);
	*(float*)(locSdkScalarTable + 0x0968) = *(float*)(locSdkScalarTable + 0x1418);
	*(float*)(locSdkScalarTable + 0x0968) = *(float*)(locSdkScalarTable + 0x1418);
	*(float*)(locSdkScalarTable + 0x0968) = *(float*)(locSdkScalarTable + 0x1418);
	*(float*)(locSdkScalarTable + 0x0968) = *(float*)(locSdkScalarTable + 0x1418);
}

// neck_b_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd115(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x01C2)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, -0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, -0.000000f, 0.000000f,
		-0.000000f, 0.928398f, -0.371587f, 0.000000f,
		0.000000f, 0.371587f, 0.928398f, 0.000000f,
		-0.000000f, -0.000000f, 0.037795f, 1.000000f,
		1.150000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.898964f, -0.717192f, 0.000000f,
		0.000000f, 0.717192f, 0.898964f, 0.000000f,
		0.000000f, 0.669025f, 0.536903f, 1.000000f,
		1.150000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.898964f, -0.717192f, 0.000000f,
		0.000000f, 0.717192f, 0.898964f, 0.000000f,
		0.000000f, 0.669025f, 0.536903f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x0153),
		OrbisAnim::Location(0x07B3),
		OrbisAnim::Location(0x01C1),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

static void HierarchyParentingCommand_Seg1Cmd116(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x00C0, 0x02C0 + 1 },	// Child[70]: l_scapula_helper, Parent[69]: l_clavicle_helper
		{ 0x01A0, 0x0640 + 1 },	// Child[84]: r_scapula_helper, Parent[83]: r_clavicle_helper
		{ 0x01A0, 0x0640 + 1 },	// Child[84]: r_scapula_helper, Parent[83]: r_clavicle_helper
		{ 0x01A0, 0x0640 + 1 }	// Child[84]: r_scapula_helper, Parent[83]: r_clavicle_helper
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

// neck_b_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd117(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ -0.380718f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x01C2),
		{
			OrbisAnim::Location(0x0DE2),
			OrbisAnim::Location(0x0DE6),
			OrbisAnim::Location(0x0DEA),
		},
		{
			OrbisAnim::Location(0x0DEE),
			OrbisAnim::Location(0x0DF2),
			OrbisAnim::Location(0x0DF6),
		},
		{
			OrbisAnim::Location(0x0DFA),
			OrbisAnim::Location(0x0DFE),
			OrbisAnim::Location(0x0E02)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

static void HierarchyCopyCommand_Seg1Cmd118(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locSdkScalarTable + 0x0A24) = *(float*)(locSdkScalarTable + 0x0F60);
	*(float*)(locSdkScalarTable + 0x0B30) = *(float*)(locSdkScalarTable + 0x0F64);
	*(float*)(locSdkScalarTable + 0x0C3C) = *(float*)(locSdkScalarTable + 0x0F68);
	*(float*)(locSdkScalarTable + 0x0A28) = *(float*)(locSdkScalarTable + 0x0F6C);
	*(float*)(locSdkScalarTable + 0x0B34) = *(float*)(locSdkScalarTable + 0x0F70);
	*(float*)(locSdkScalarTable + 0x0C40) = *(float*)(locSdkScalarTable + 0x0F74);
	*(float*)(locSdkScalarTable + 0x0A58) = *(float*)(locSdkScalarTable + 0x108C);
	*(float*)(locSdkScalarTable + 0x0B64) = *(float*)(locSdkScalarTable + 0x1090);
	*(float*)(locSdkScalarTable + 0x0C70) = *(float*)(locSdkScalarTable + 0x1094);
	*(float*)(locSdkScalarTable + 0x0A5C) = *(float*)(locSdkScalarTable + 0x1098);
	*(float*)(locSdkScalarTable + 0x0B68) = *(float*)(locSdkScalarTable + 0x109C);
	*(float*)(locSdkScalarTable + 0x0C74) = *(float*)(locSdkScalarTable + 0x10A0);
}

// l_shoulder_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd119(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x02C2)
	};

	static CONST_EXPR float defaultValues[] = {
		0.997684f, -0.068020f, -0.000000f, 0.000000f,
		0.068020f, 0.997684f, 0.000000f, 0.000000f,
		0.000000f, -0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, -0.000000f, 1.000000f,
		0.999876f, 0.000000f, -0.015758f, 0.000000f,
		-0.008002f, 0.861464f, -0.507755f, 0.000000f,
		0.013575f, 0.507818f, 0.861357f, 0.000000f,
		-0.004368f, -0.048649f, 0.107056f, 1.000000f,
		-1.149796f, 0.021676f, -0.000000f, 0.000000f,
		0.000000f, 0.000000f, -1.150000f, 0.000000f,
		-0.021676f, -1.149796f, -0.000000f, 0.000000f,
		0.075706f, 0.659827f, 0.504140f, 1.000000f,
		-1.148661f, -0.000000f, 0.055475f, 0.000000f,
		-0.050500f, -0.475994f, -1.045648f, 0.000000f,
		0.022961f, -1.046867f, 0.475440f, 0.000000f,
		0.075706f, 0.659827f, 0.504140f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x0243),
		OrbisAnim::Location(0x0973),
		OrbisAnim::Location(0x0301),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_shoulder_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd120(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0442)
	};

	static CONST_EXPR float defaultValues[] = {
		0.997684f, -0.068020f, -0.000000f, 0.000000f,
		0.068020f, 0.997684f, 0.000000f, 0.000000f,
		0.000000f, -0.000000f, 1.000000f, 0.000000f,
		-0.000000f, -0.000000f, -0.000000f, 1.000000f,
		0.999876f, 0.000000f, -0.015758f, 0.000000f,
		-0.008002f, 0.861464f, -0.507755f, 0.000000f,
		0.013575f, 0.507818f, 0.861357f, 0.000000f,
		0.004368f, 0.048650f, -0.107056f, 1.000000f,
		-1.149796f, -0.021676f, -0.000000f, 0.000000f,
		-0.000000f, -0.000000f, 1.150000f, 0.000000f,
		-0.021676f, 1.149796f, 0.000000f, 0.000000f,
		-0.075706f, 0.659827f, 0.504139f, 1.000000f,
		-1.148661f, 0.000000f, -0.055475f, 0.000000f,
		-0.050500f, 0.475994f, 1.045648f, 0.000000f,
		0.022961f, 1.046867f, -0.475440f, 0.000000f,
		-0.075706f, 0.659826f, 0.504139f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x0273),
		OrbisAnim::Location(0x09B3),
		OrbisAnim::Location(0x0681),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

static void HierarchyCopyCommand_Seg1Cmd121(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locJointParams + 0x0170) = *(float*)(locSdkScalarTable + 0x0DE0);
	*(float*)(locJointParams + 0x0174) = *(float*)(locSdkScalarTable + 0x0DE4);
	*(float*)(locJointParams + 0x0178) = *(float*)(locSdkScalarTable + 0x0DE8);
	*(float*)(locSdkScalarTable + 0x09EC) = *(float*)(locSdkScalarTable + 0x0DEC);
	*(float*)(locSdkScalarTable + 0x0AF8) = *(float*)(locSdkScalarTable + 0x0DF0);
	*(float*)(locSdkScalarTable + 0x0C04) = *(float*)(locSdkScalarTable + 0x0DF4);
	*(float*)(locJointParams + 0x0150) = *(float*)(locSdkScalarTable + 0x0DF8);
	*(float*)(locJointParams + 0x0154) = *(float*)(locSdkScalarTable + 0x0DFC);
	*(float*)(locJointParams + 0x0158) = *(float*)(locSdkScalarTable + 0x0E00);
	*(float*)(locJointParams + 0x0158) = *(float*)(locSdkScalarTable + 0x0E00);
	*(float*)(locJointParams + 0x0158) = *(float*)(locSdkScalarTable + 0x0E00);
	*(float*)(locJointParams + 0x0158) = *(float*)(locSdkScalarTable + 0x0E00);
}

// l_shoulder_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd122(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ -0.960388f, -0.004293f, -0.009443f },
		OrbisAnim::Location(0x02C2),
		{
			OrbisAnim::Location(0x0E72),
			OrbisAnim::Location(0x0E76),
			OrbisAnim::Location(0x0E7A),
		},
		{
			OrbisAnim::Location(0x0E7E),
			OrbisAnim::Location(0x0E82),
			OrbisAnim::Location(0x0E86),
		},
		{
			OrbisAnim::Location(0x0E8A),
			OrbisAnim::Location(0x0E8E),
			OrbisAnim::Location(0x0E92)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_shoulder_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd123(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ -0.960388f, -0.004293f, -0.009443f },
		OrbisAnim::Location(0x0442),
		{
			OrbisAnim::Location(0x0F9E),
			OrbisAnim::Location(0x0FA2),
			OrbisAnim::Location(0x0FA6),
		},
		{
			OrbisAnim::Location(0x0FAA),
			OrbisAnim::Location(0x0FAE),
			OrbisAnim::Location(0x0FB2),
		},
		{
			OrbisAnim::Location(0x0FB6),
			OrbisAnim::Location(0x0FBA),
			OrbisAnim::Location(0x0FBE)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

static void HierarchySdkDrivenRotCommand_Seg1Cmd124(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A24)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B30)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C3C)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3e58c664, 0xbba768c7, 0xbcc1297e, 0x3f7a1f2b));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0430) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A28)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B34)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C40)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0460) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A58)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B64)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C70)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3e58c664, 0xbba768c7, 0xbcc1297e, 0x3f7a1f2b));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x06D0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A5C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B68)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C74)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0700) = q;
	}
}

static void HierarchyCopyCommand_Seg1Cmd125(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locJointParams + 0x0260) = *(float*)(locSdkScalarTable + 0x0E70);
	*(float*)(locJointParams + 0x03E0) = *(float*)(locSdkScalarTable + 0x0E70);
	*(float*)(locJointParams + 0x0264) = *(float*)(locSdkScalarTable + 0x0E74);
	*(float*)(locJointParams + 0x03E4) = *(float*)(locSdkScalarTable + 0x0E74);
	*(float*)(locJointParams + 0x0268) = *(float*)(locSdkScalarTable + 0x0E78);
	*(float*)(locJointParams + 0x03E8) = *(float*)(locSdkScalarTable + 0x0E78);
	*(float*)(locSdkScalarTable + 0x09FC) = *(float*)(locSdkScalarTable + 0x0E7C);
	*(float*)(locSdkScalarTable + 0x0B08) = *(float*)(locSdkScalarTable + 0x0E80);
	*(float*)(locSdkScalarTable + 0x0C14) = *(float*)(locSdkScalarTable + 0x0E84);
	*(float*)(locJointParams + 0x0240) = *(float*)(locSdkScalarTable + 0x0E88);
	*(float*)(locJointParams + 0x0244) = *(float*)(locSdkScalarTable + 0x0E8C);
	*(float*)(locJointParams + 0x0248) = *(float*)(locSdkScalarTable + 0x0E90);
	*(float*)(locJointParams + 0x0500) = *(float*)(locSdkScalarTable + 0x0F9C);
	*(float*)(locJointParams + 0x0680) = *(float*)(locSdkScalarTable + 0x0F9C);
	*(float*)(locJointParams + 0x0504) = *(float*)(locSdkScalarTable + 0x0FA0);
	*(float*)(locJointParams + 0x0684) = *(float*)(locSdkScalarTable + 0x0FA0);
	*(float*)(locJointParams + 0x0508) = *(float*)(locSdkScalarTable + 0x0FA4);
	*(float*)(locJointParams + 0x0688) = *(float*)(locSdkScalarTable + 0x0FA4);
	*(float*)(locSdkScalarTable + 0x0A30) = *(float*)(locSdkScalarTable + 0x0FA8);
	*(float*)(locSdkScalarTable + 0x0B3C) = *(float*)(locSdkScalarTable + 0x0FAC);
	*(float*)(locSdkScalarTable + 0x0C48) = *(float*)(locSdkScalarTable + 0x0FB0);
	*(float*)(locJointParams + 0x04E0) = *(float*)(locSdkScalarTable + 0x0FB4);
	*(float*)(locJointParams + 0x04E4) = *(float*)(locSdkScalarTable + 0x0FB8);
	*(float*)(locJointParams + 0x04E8) = *(float*)(locSdkScalarTable + 0x0FBC);
}

// l_scapula_helperBend_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd126(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ 0.426743f, -0.000000f, -0.048258f },
		OrbisAnim::Location(0x0420),
		OrbisAnim::Location(0x134E),
		OrbisAnim::Location(0x1346),
		OrbisAnim::Location(0x134A)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

// r_scapula_helperBend_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd127(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ 0.426743f, 0.000000f, -0.048258f },
		OrbisAnim::Location(0x06C0),
		OrbisAnim::Location(0x1402),
		OrbisAnim::Location(0x13FA),
		OrbisAnim::Location(0x13FE)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

static void HierarchySdkDrivenRotCommand_Seg1Cmd128(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x09EC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AF8)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C04)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbe41c097, 0, 0, 0x3f7b602f));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0160) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x09EC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AF8)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C04)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbe41c097, 0, 0, 0x3f7b602f));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0160) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x09EC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AF8)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C04)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbe41c097, 0, 0, 0x3f7b602f));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0160) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x09EC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AF8)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C04)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbe41c097, 0, 0, 0x3f7b602f));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0160) = q;
	}
}

static void HierarchyParentingCommand_Seg1Cmd129(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0170, 0x02C0 + 1 },	// Child[81]: l_scapula_helperBend, Parent[69]: l_clavicle_helper
		{ 0x0250, 0x0640 + 1 },	// Child[95]: r_scapula_helperBend, Parent[83]: r_clavicle_helper
		{ 0x0250, 0x0640 + 1 },	// Child[95]: r_scapula_helperBend, Parent[83]: r_clavicle_helper
		{ 0x0250, 0x0640 + 1 }	// Child[95]: r_scapula_helperBend, Parent[83]: r_clavicle_helper
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

static void HierarchyCopyCommand_Seg1Cmd130(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locSdkScalarTable + 0x0894) = *(float*)(locSdkScalarTable + 0x1344);
	*(float*)(locSdkScalarTable + 0x0898) = *(float*)(locSdkScalarTable + 0x1348);
	*(float*)(locSdkScalarTable + 0x089C) = *(float*)(locSdkScalarTable + 0x134C);
	*(float*)(locSdkScalarTable + 0x0948) = *(float*)(locSdkScalarTable + 0x13F8);
	*(float*)(locSdkScalarTable + 0x094C) = *(float*)(locSdkScalarTable + 0x13FC);
	*(float*)(locSdkScalarTable + 0x0950) = *(float*)(locSdkScalarTable + 0x1400);
	*(float*)(locSdkScalarTable + 0x0950) = *(float*)(locSdkScalarTable + 0x1400);
	*(float*)(locSdkScalarTable + 0x0950) = *(float*)(locSdkScalarTable + 0x1400);
}

// neck_b_helper_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd131(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ -0.380718f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0150),
		OrbisAnim::Location(0x1396),
		OrbisAnim::Location(0x138E),
		OrbisAnim::Location(0x1392)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

static void HierarchySdkDrivenRotCommand_Seg1Cmd132(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x09FC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B08)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C14)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbeec8539, 0x39914e0c, 0xbba9b5a3, 0x3f630b24));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0250) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A30)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B3C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C48)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbeec8539, 0x39914e0c, 0xbba9b5a3, 0x3f630b24));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x04F0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A30)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B3C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C48)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbeec8539, 0x39914e0c, 0xbba9b5a3, 0x3f630b24));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x04F0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A30)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B3C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C48)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbeec8539, 0x39914e0c, 0xbba9b5a3, 0x3f630b24));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x04F0) = q;
	}
}

static void HierarchyParentingCommand_Seg1Cmd133(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0080, 0x01C0 + 1 },	// Child[66]: neck_b_helper, Parent[65]: neck_a_helper
		{ 0x0180, 0x05C0 + 1 },	// Child[82]: l_scapula_helperTwist, Parent[81]: l_scapula_helperBend
		{ 0x0260, 0x0940 + 1 },	// Child[96]: r_scapula_helperTwist, Parent[95]: r_scapula_helperBend
		{ 0x0260, 0x0940 + 1 }	// Child[96]: r_scapula_helperTwist, Parent[95]: r_scapula_helperBend
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

// l_shoulder_helper_bendTwistDriver
static void NdiBendTwistDriverCommand_Seg1Cmd134(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::BendTwistDriverParams params = {
		0x11BF63,
		0,
		0,
		1.000000f,
		{ -0.000000f, 0.000000f, 1.000000f},
		{ -0.960388f, -0.004293f, -0.009443f},
		OrbisAnim::Location(0x0240),
		OrbisAnim::Location(0x0F4A),
		OrbisAnim::Location(0x0F4E),
		OrbisAnim::Location(0x0F52),
		OrbisAnim::Location(0x0F56),
		OrbisAnim::Location(0x0F5A),
		OrbisAnim::Location(0x0F5E)
	};

	OrbisAnim::CommandBlock::ExecuteCommandBendTwistDriverImpl(&hierarchyHeader, &params);
}

// r_shoulder_helper_bendTwistDriver
static void NdiBendTwistDriverCommand_Seg1Cmd135(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::BendTwistDriverParams params = {
		0x11BF63,
		0,
		0,
		1.000000f,
		{ 0.000000f, -0.000000f, -1.000000f},
		{ -0.960388f, -0.004293f, -0.009443f},
		OrbisAnim::Location(0x04E0),
		OrbisAnim::Location(0x1076),
		OrbisAnim::Location(0x107A),
		OrbisAnim::Location(0x107E),
		OrbisAnim::Location(0x1082),
		OrbisAnim::Location(0x1086),
		OrbisAnim::Location(0x108A)
	};

	OrbisAnim::CommandBlock::ExecuteCommandBendTwistDriverImpl(&hierarchyHeader, &params);
}

static void HierarchyCopyCommand_Seg1Cmd136(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locSdkScalarTable + 0x08DC) = *(float*)(locSdkScalarTable + 0x138C);
	*(float*)(locSdkScalarTable + 0x08E0) = *(float*)(locSdkScalarTable + 0x1390);
	*(float*)(locSdkScalarTable + 0x08E4) = *(float*)(locSdkScalarTable + 0x1394);
	*(float*)(locSdkScalarTable + 0x08E4) = *(float*)(locSdkScalarTable + 0x1394);
}

// neck_c_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd137(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0202)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, -0.000000f, 0.000000f,
		-0.000000f, 0.999376f, -0.035311f, 0.000000f,
		0.000000f, 0.035311f, 0.999376f, 0.000000f,
		-0.000000f, -0.000000f, 0.041932f, 1.000000f,
		1.150000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.568097f, -0.999883f, 0.000000f,
		0.000000f, 0.999883f, 0.568097f, 0.000000f,
		-0.000000f, 0.696131f, 0.570879f, 1.000000f,
		1.150000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.568097f, -0.999883f, 0.000000f,
		0.000000f, 0.999883f, 0.568097f, 0.000000f,
		-0.000000f, 0.696131f, 0.570879f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x0183),
		OrbisAnim::Location(0x07F3),
		OrbisAnim::Location(0x0201),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

static void HierarchyParentingCommand_Seg1Cmd138(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x00D0, 0x0300 + 1 },	// Child[71]: l_shoulder_helper, Parent[70]: l_scapula_helper
		{ 0x01B0, 0x0680 + 1 },	// Child[85]: r_shoulder_helper, Parent[84]: r_scapula_helper
		{ 0x01B0, 0x0680 + 1 },	// Child[85]: r_shoulder_helper, Parent[84]: r_scapula_helper
		{ 0x01B0, 0x0680 + 1 }	// Child[85]: r_shoulder_helper, Parent[84]: r_scapula_helper
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

// neck_c_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd139(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ -0.035318f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0202),
		{
			OrbisAnim::Location(0x0E06),
			OrbisAnim::Location(0x0E0A),
			OrbisAnim::Location(0x0E0E),
		},
		{
			OrbisAnim::Location(0x0E12),
			OrbisAnim::Location(0x0E16),
			OrbisAnim::Location(0x0E1A),
		},
		{
			OrbisAnim::Location(0x0E1E),
			OrbisAnim::Location(0x0E22),
			OrbisAnim::Location(0x0E26)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

static void HierarchyCopyCommand_Seg1Cmd140(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locSdkScalarTable + 0x0A1C) = *(float*)(locSdkScalarTable + 0x0F48);
	*(float*)(locSdkScalarTable + 0x0B28) = *(float*)(locSdkScalarTable + 0x0F4C);
	*(float*)(locSdkScalarTable + 0x0C34) = *(float*)(locSdkScalarTable + 0x0F50);
	*(float*)(locSdkScalarTable + 0x0A20) = *(float*)(locSdkScalarTable + 0x0F54);
	*(float*)(locSdkScalarTable + 0x0B2C) = *(float*)(locSdkScalarTable + 0x0F58);
	*(float*)(locSdkScalarTable + 0x0C38) = *(float*)(locSdkScalarTable + 0x0F5C);
	*(float*)(locSdkScalarTable + 0x0A50) = *(float*)(locSdkScalarTable + 0x1074);
	*(float*)(locSdkScalarTable + 0x0B5C) = *(float*)(locSdkScalarTable + 0x1078);
	*(float*)(locSdkScalarTable + 0x0C68) = *(float*)(locSdkScalarTable + 0x107C);
	*(float*)(locSdkScalarTable + 0x0A54) = *(float*)(locSdkScalarTable + 0x1080);
	*(float*)(locSdkScalarTable + 0x0B60) = *(float*)(locSdkScalarTable + 0x1084);
	*(float*)(locSdkScalarTable + 0x0C6C) = *(float*)(locSdkScalarTable + 0x1088);
}

// l_elbow_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd141(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0302)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, -0.000000f, -0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, -0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		0.999887f, -0.007633f, 0.012949f, 0.000000f,
		0.000558f, 0.879735f, 0.475464f, 0.000000f,
		-0.015021f, -0.475403f, 0.879640f, 0.000000f,
		-0.000000f, -0.000000f, 0.169164f, 1.000000f,
		-1.149311f, 0.039792f, 0.000000f, 0.000000f,
		0.020207f, 0.583641f, -0.990684f, 0.000000f,
		-0.034279f, -0.990091f, -0.583991f, 0.000000f,
		0.078408f, 0.536640f, 0.560086f, 1.000000f,
		-1.148024f, 0.000000f, 0.067387f, 0.000000f,
		-0.058017f, 0.584996f, -0.988389f, 0.000000f,
		-0.034279f, -0.990091f, -0.583991f, 0.000000f,
		0.078408f, 0.536640f, 0.560086f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x02A3),
		OrbisAnim::Location(0x09F3),
		OrbisAnim::Location(0x0341),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_elbow_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd142(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0482)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, -0.000000f, -0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, -0.000000f, 1.000000f, 0.000000f,
		-0.000000f, -0.000000f, 0.000000f, 1.000000f,
		0.999887f, -0.007633f, 0.012949f, 0.000000f,
		0.000558f, 0.879735f, 0.475464f, 0.000000f,
		-0.015021f, -0.475403f, 0.879640f, 0.000000f,
		0.000000f, -0.000000f, -0.169165f, 1.000000f,
		-1.149311f, -0.039792f, -0.000000f, 0.000000f,
		0.020207f, -0.583641f, 0.990684f, 0.000000f,
		-0.034279f, 0.990091f, 0.583991f, 0.000000f,
		-0.078408f, 0.536640f, 0.560086f, 1.000000f,
		-1.148024f, -0.000000f, -0.067387f, 0.000000f,
		-0.058017f, -0.584996f, 0.988389f, 0.000000f,
		-0.034279f, 0.990091f, 0.583991f, 0.000000f,
		-0.078408f, 0.536639f, 0.560086f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x02D3),
		OrbisAnim::Location(0x0A33),
		OrbisAnim::Location(0x06C1),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

static void HierarchyParentingCommand_Seg1Cmd143(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0140, 0x0340 + 1 },	// Child[78]: l_elbow_helper_weighted_01, Parent[71]: l_shoulder_helper
		{ 0x0220, 0x06C0 + 1 },	// Child[92]: r_elbow_helper_weighted_01, Parent[85]: r_shoulder_helper
		{ 0x0220, 0x06C0 + 1 },	// Child[92]: r_elbow_helper_weighted_01, Parent[85]: r_shoulder_helper
		{ 0x0220, 0x06C0 + 1 }	// Child[92]: r_elbow_helper_weighted_01, Parent[85]: r_shoulder_helper
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

static void HierarchyCopyCommand_Seg1Cmd144(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locJointParams + 0x01A0) = *(float*)(locSdkScalarTable + 0x0E04);
	*(float*)(locJointParams + 0x01A4) = *(float*)(locSdkScalarTable + 0x0E08);
	*(float*)(locJointParams + 0x01A8) = *(float*)(locSdkScalarTable + 0x0E0C);
	*(float*)(locSdkScalarTable + 0x09F0) = *(float*)(locSdkScalarTable + 0x0E10);
	*(float*)(locSdkScalarTable + 0x0AFC) = *(float*)(locSdkScalarTable + 0x0E14);
	*(float*)(locSdkScalarTable + 0x0C08) = *(float*)(locSdkScalarTable + 0x0E18);
	*(float*)(locJointParams + 0x0180) = *(float*)(locSdkScalarTable + 0x0E1C);
	*(float*)(locJointParams + 0x0184) = *(float*)(locSdkScalarTable + 0x0E20);
	*(float*)(locJointParams + 0x0188) = *(float*)(locSdkScalarTable + 0x0E24);
	*(float*)(locJointParams + 0x0188) = *(float*)(locSdkScalarTable + 0x0E24);
	*(float*)(locJointParams + 0x0188) = *(float*)(locSdkScalarTable + 0x0E24);
	*(float*)(locJointParams + 0x0188) = *(float*)(locSdkScalarTable + 0x0E24);
}

// l_elbow_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd145(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.495537f, -0.012949f, 0.060439f },
		OrbisAnim::Location(0x0302),
		{
			OrbisAnim::Location(0x0E96),
			OrbisAnim::Location(0x0E9A),
			OrbisAnim::Location(0x0E9E),
		},
		{
			OrbisAnim::Location(0x0EA2),
			OrbisAnim::Location(0x0EA6),
			OrbisAnim::Location(0x0EAA),
		},
		{
			OrbisAnim::Location(0x0EAE),
			OrbisAnim::Location(0x0EB2),
			OrbisAnim::Location(0x0EB6)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_elbow_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd146(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.495537f, -0.012949f, 0.060439f },
		OrbisAnim::Location(0x0482),
		{
			OrbisAnim::Location(0x0FC2),
			OrbisAnim::Location(0x0FC6),
			OrbisAnim::Location(0x0FCA),
		},
		{
			OrbisAnim::Location(0x0FCE),
			OrbisAnim::Location(0x0FD2),
			OrbisAnim::Location(0x0FD6),
		},
		{
			OrbisAnim::Location(0x0FDA),
			OrbisAnim::Location(0x0FDE),
			OrbisAnim::Location(0x0FE2)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

static void HierarchySdkDrivenRotCommand_Seg1Cmd147(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A1C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B28)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C34)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbeec8539, 0x39914e0c, 0xbba9b5a3, 0x3f630b24));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x03D0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A20)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B2C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C38)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0400) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A50)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B5C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C68)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbeec8539, 0x39914e0c, 0xbba9b5a3, 0x3f630b24));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0670) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A54)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B60)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C6C)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x06A0) = q;
	}
}

static void HierarchyCopyCommand_Seg1Cmd148(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locJointParams + 0x0290) = *(float*)(locSdkScalarTable + 0x0E94);
	*(float*)(locJointParams + 0x0294) = *(float*)(locSdkScalarTable + 0x0E98);
	*(float*)(locJointParams + 0x0298) = *(float*)(locSdkScalarTable + 0x0E9C);
	*(float*)(locSdkScalarTable + 0x0A00) = *(float*)(locSdkScalarTable + 0x0EA0);
	*(float*)(locSdkScalarTable + 0x0B0C) = *(float*)(locSdkScalarTable + 0x0EA4);
	*(float*)(locSdkScalarTable + 0x0C18) = *(float*)(locSdkScalarTable + 0x0EA8);
	*(float*)(locJointParams + 0x0270) = *(float*)(locSdkScalarTable + 0x0EAC);
	*(float*)(locJointParams + 0x0274) = *(float*)(locSdkScalarTable + 0x0EB0);
	*(float*)(locJointParams + 0x0278) = *(float*)(locSdkScalarTable + 0x0EB4);
	*(float*)(locJointParams + 0x0530) = *(float*)(locSdkScalarTable + 0x0FC0);
	*(float*)(locJointParams + 0x0534) = *(float*)(locSdkScalarTable + 0x0FC4);
	*(float*)(locJointParams + 0x0538) = *(float*)(locSdkScalarTable + 0x0FC8);
	*(float*)(locSdkScalarTable + 0x0A34) = *(float*)(locSdkScalarTable + 0x0FCC);
	*(float*)(locSdkScalarTable + 0x0B40) = *(float*)(locSdkScalarTable + 0x0FD0);
	*(float*)(locSdkScalarTable + 0x0C4C) = *(float*)(locSdkScalarTable + 0x0FD4);
	*(float*)(locJointParams + 0x0510) = *(float*)(locSdkScalarTable + 0x0FD8);
	*(float*)(locJointParams + 0x0514) = *(float*)(locSdkScalarTable + 0x0FDC);
	*(float*)(locJointParams + 0x0518) = *(float*)(locSdkScalarTable + 0x0FE0);
	*(float*)(locJointParams + 0x0518) = *(float*)(locSdkScalarTable + 0x0FE0);
	*(float*)(locJointParams + 0x0518) = *(float*)(locSdkScalarTable + 0x0FE0);
}

// l_shoulder_helperBend_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd149(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ -0.960388f, -0.004293f, -0.009443f },
		OrbisAnim::Location(0x03C0),
		OrbisAnim::Location(0x135A),
		OrbisAnim::Location(0x1352),
		OrbisAnim::Location(0x1356)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

// r_shoulder_helperBend_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd150(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ -0.960388f, -0.004293f, -0.009443f },
		OrbisAnim::Location(0x0660),
		OrbisAnim::Location(0x140E),
		OrbisAnim::Location(0x1406),
		OrbisAnim::Location(0x140A)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

static void HierarchySdkDrivenRotCommand_Seg1Cmd151(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x09F0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AFC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C08)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbc90a7be, 0, 0, 0x3f7ff5c8));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0190) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x09F0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AFC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C08)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbc90a7be, 0, 0, 0x3f7ff5c8));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0190) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x09F0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AFC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C08)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbc90a7be, 0, 0, 0x3f7ff5c8));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0190) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x09F0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0AFC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C08)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0xbc90a7be, 0, 0, 0x3f7ff5c8));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0190) = q;
	}
}

static void HierarchyParentingCommand_Seg1Cmd152(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0150, 0x0300 + 1 },	// Child[79]: l_shoulder_helperBend, Parent[70]: l_scapula_helper
		{ 0x0230, 0x0680 + 1 },	// Child[93]: r_shoulder_helperBend, Parent[84]: r_scapula_helper
		{ 0x0230, 0x0680 + 1 },	// Child[93]: r_shoulder_helperBend, Parent[84]: r_scapula_helper
		{ 0x0230, 0x0680 + 1 }	// Child[93]: r_shoulder_helperBend, Parent[84]: r_scapula_helper
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

static void HierarchyCopyCommand_Seg1Cmd153(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locSdkScalarTable + 0x08A0) = *(float*)(locSdkScalarTable + 0x1350);
	*(float*)(locSdkScalarTable + 0x08A4) = *(float*)(locSdkScalarTable + 0x1354);
	*(float*)(locSdkScalarTable + 0x08A8) = *(float*)(locSdkScalarTable + 0x1358);
	*(float*)(locSdkScalarTable + 0x0954) = *(float*)(locSdkScalarTable + 0x1404);
	*(float*)(locSdkScalarTable + 0x0958) = *(float*)(locSdkScalarTable + 0x1408);
	*(float*)(locSdkScalarTable + 0x095C) = *(float*)(locSdkScalarTable + 0x140C);
	*(float*)(locSdkScalarTable + 0x095C) = *(float*)(locSdkScalarTable + 0x140C);
	*(float*)(locSdkScalarTable + 0x095C) = *(float*)(locSdkScalarTable + 0x140C);
}

// neck_c_helper_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd154(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ -0.035318f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0180),
		OrbisAnim::Location(0x13A2),
		OrbisAnim::Location(0x139A),
		OrbisAnim::Location(0x139E)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

static void HierarchySdkDrivenRotCommand_Seg1Cmd155(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A00)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B0C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C18)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3e7b3390, 0x3a94db80, 0x3cfcf564, 0x3f780d2e));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0280) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A34)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B40)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C4C)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3e7b3390, 0x3a94db80, 0x3cfcf564, 0x3f780d2e));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0520) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A34)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B40)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C4C)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3e7b3390, 0x3a94db80, 0x3cfcf564, 0x3f780d2e));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0520) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A34)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B40)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C4C)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3e7b3390, 0x3a94db80, 0x3cfcf564, 0x3f780d2e));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0520) = q;
	}
}

static void HierarchyParentingCommand_Seg1Cmd156(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0090, 0x0200 + 1 },	// Child[67]: neck_c_helper, Parent[66]: neck_b_helper
		{ 0x0160, 0x0540 + 1 },	// Child[80]: l_shoulder_helperTwist, Parent[79]: l_shoulder_helperBend
		{ 0x0240, 0x08C0 + 1 },	// Child[94]: r_shoulder_helperTwist, Parent[93]: r_shoulder_helperBend
		{ 0x0240, 0x08C0 + 1 }	// Child[94]: r_shoulder_helperTwist, Parent[93]: r_shoulder_helperBend
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

// l_elbow_helper_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd157(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ 0.495537f, -0.012949f, 0.060439f },
		OrbisAnim::Location(0x0270),
		OrbisAnim::Location(0x1312),
		OrbisAnim::Location(0x130A),
		OrbisAnim::Location(0x130E)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

static void HierarchyCopyCommand_Seg1Cmd158(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locSdkScalarTable + 0x08E8) = *(float*)(locSdkScalarTable + 0x1398);
	*(float*)(locSdkScalarTable + 0x08EC) = *(float*)(locSdkScalarTable + 0x139C);
	*(float*)(locSdkScalarTable + 0x08F0) = *(float*)(locSdkScalarTable + 0x13A0);
	*(float*)(locSdkScalarTable + 0x08F0) = *(float*)(locSdkScalarTable + 0x13A0);
}

// r_elbow_helper_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd159(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ 0.495537f, -0.012949f, 0.060439f },
		OrbisAnim::Location(0x0510),
		OrbisAnim::Location(0x13C6),
		OrbisAnim::Location(0x13BE),
		OrbisAnim::Location(0x13C2)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

// head_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd160(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0242)
	};

	static CONST_EXPR float defaultValues[] = {
		0.999223f, -0.018430f, -0.034852f, 0.000000f,
		0.018419f, 0.999830f, -0.000642f, 0.000000f,
		0.034858f, -0.000000f, 0.999392f, 0.000000f,
		-0.000000f, 0.000000f, -0.000000f, 1.000000f,
		0.999223f, -0.022369f, 0.032464f, 0.000000f,
		-0.018430f, 0.462909f, 0.886214f, 0.000000f,
		-0.034852f, -0.886123f, 0.462137f, 0.000000f,
		0.000000f, -0.000000f, 0.045396f, 1.000000f,
		1.150000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.532436f, -1.019319f, 0.000000f,
		0.000000f, 1.019319f, 0.532436f, 0.000000f,
		-0.000000f, 0.738058f, 0.594700f, 1.000000f,
		1.150000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.532436f, -1.019319f, 0.000000f,
		0.000000f, 1.019319f, 0.532436f, 0.000000f,
		-0.000000f, 0.738059f, 0.594700f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x01B3),
		OrbisAnim::Location(0x0833),
		OrbisAnim::Location(0x0241),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

static void HierarchyParentingCommand_Seg1Cmd161(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x00E0, 0x0340 + 1 },	// Child[72]: l_elbow_helper, Parent[71]: l_shoulder_helper
		{ 0x01C0, 0x06C0 + 1 },	// Child[86]: r_elbow_helper, Parent[85]: r_shoulder_helper
		{ 0x01C0, 0x06C0 + 1 },	// Child[86]: r_elbow_helper, Parent[85]: r_shoulder_helper
		{ 0x01C0, 0x06C0 + 1 }	// Child[86]: r_elbow_helper, Parent[85]: r_shoulder_helper
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

// head_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd162(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 1.089433f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0242),
		{
			OrbisAnim::Location(0x0E2A),
			OrbisAnim::Location(0x0E2E),
			OrbisAnim::Location(0x0E32),
		},
		{
			OrbisAnim::Location(0x0E36),
			OrbisAnim::Location(0x0E3A),
			OrbisAnim::Location(0x0E3E),
		},
		{
			OrbisAnim::Location(0x0E42),
			OrbisAnim::Location(0x0E46),
			OrbisAnim::Location(0x0E4A)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

static void HierarchyCopyCommand_Seg1Cmd163(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locSdkScalarTable + 0x0858) = *(float*)(locSdkScalarTable + 0x1308);
	*(float*)(locSdkScalarTable + 0x085C) = *(float*)(locSdkScalarTable + 0x130C);
	*(float*)(locSdkScalarTable + 0x0860) = *(float*)(locSdkScalarTable + 0x1310);
	*(float*)(locSdkScalarTable + 0x090C) = *(float*)(locSdkScalarTable + 0x13BC);
	*(float*)(locSdkScalarTable + 0x0910) = *(float*)(locSdkScalarTable + 0x13C0);
	*(float*)(locSdkScalarTable + 0x0914) = *(float*)(locSdkScalarTable + 0x13C4);
	*(float*)(locSdkScalarTable + 0x0914) = *(float*)(locSdkScalarTable + 0x13C4);
	*(float*)(locSdkScalarTable + 0x0914) = *(float*)(locSdkScalarTable + 0x13C4);
}

// l_wrist_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd164(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0342)
	};

	static CONST_EXPR float defaultValues[] = {
		0.999397f, 0.000000f, -0.034721f, 0.000000f,
		0.007319f, 0.977531f, 0.210665f, 0.000000f,
		0.033941f, -0.210792f, 0.976941f, 0.000000f,
		-0.000000f, 0.000000f, -0.000000f, 1.000000f,
		0.999808f, -0.000727f, 0.019562f, 0.000000f,
		0.000000f, 0.999310f, 0.037154f, 0.000000f,
		-0.019575f, -0.037147f, 0.999118f, 0.000000f,
		0.002378f, -0.000017f, 0.206290f, 1.000000f,
		-1.149780f, 0.022511f, -0.000000f, 0.000000f,
		0.000836f, 0.042719f, -1.149206f, 0.000000f,
		-0.022496f, -1.148986f, -0.042727f, 0.000000f,
		0.072609f, 0.369151f, 0.461295f, 1.000000f,
		-1.149780f, 0.022511f, -0.000000f, 0.000000f,
		0.000836f, 0.042719f, -1.149206f, 0.000000f,
		-0.022496f, -1.148986f, -0.042727f, 0.000000f,
		0.072609f, 0.369151f, 0.461295f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x0303),
		OrbisAnim::Location(0x0A73),
		OrbisAnim::Location(0x0381),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_wrist_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd165(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x04C2)
	};

	static CONST_EXPR float defaultValues[] = {
		0.999397f, 0.000000f, -0.034721f, 0.000000f,
		0.007319f, 0.977531f, 0.210665f, 0.000000f,
		0.033941f, -0.210792f, 0.976941f, 0.000000f,
		-0.000000f, 0.000000f, 0.000000f, 1.000000f,
		0.999808f, -0.000727f, 0.019562f, 0.000000f,
		0.000000f, 0.999310f, 0.037154f, 0.000000f,
		-0.019575f, -0.037147f, 0.999118f, 0.000000f,
		-0.002378f, 0.000017f, -0.206290f, 1.000000f,
		-1.149780f, -0.022511f, 0.000000f, 0.000000f,
		0.000836f, -0.042719f, 1.149206f, 0.000000f,
		-0.022496f, 1.148986f, 0.042727f, 0.000000f,
		-0.072610f, 0.369151f, 0.461295f, 1.000000f,
		-1.149780f, -0.022511f, -0.000000f, 0.000000f,
		0.000836f, -0.042719f, 1.149206f, 0.000000f,
		-0.022496f, 1.148986f, 0.042727f, 0.000000f,
		-0.072610f, 0.369151f, 0.461295f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x0333),
		OrbisAnim::Location(0x0AB3),
		OrbisAnim::Location(0x0701),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

static void HierarchyCopyCommand_Seg1Cmd166(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locJointParams + 0x01D0) = *(float*)(locSdkScalarTable + 0x0E28);
	*(float*)(locJointParams + 0x01D4) = *(float*)(locSdkScalarTable + 0x0E2C);
	*(float*)(locJointParams + 0x01D8) = *(float*)(locSdkScalarTable + 0x0E30);
	*(float*)(locSdkScalarTable + 0x09F4) = *(float*)(locSdkScalarTable + 0x0E34);
	*(float*)(locSdkScalarTable + 0x0B00) = *(float*)(locSdkScalarTable + 0x0E38);
	*(float*)(locSdkScalarTable + 0x0C0C) = *(float*)(locSdkScalarTable + 0x0E3C);
	*(float*)(locJointParams + 0x01B0) = *(float*)(locSdkScalarTable + 0x0E40);
	*(float*)(locJointParams + 0x01B4) = *(float*)(locSdkScalarTable + 0x0E44);
	*(float*)(locJointParams + 0x01B8) = *(float*)(locSdkScalarTable + 0x0E48);
	*(float*)(locJointParams + 0x01B8) = *(float*)(locSdkScalarTable + 0x0E48);
	*(float*)(locJointParams + 0x01B8) = *(float*)(locSdkScalarTable + 0x0E48);
	*(float*)(locJointParams + 0x01B8) = *(float*)(locSdkScalarTable + 0x0E48);
}

// l_wrist_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd167(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.249552f, 0.015141f, 0.000563f },
		OrbisAnim::Location(0x0342),
		{
			OrbisAnim::Location(0x0EBA),
			OrbisAnim::Location(0x0EBE),
			OrbisAnim::Location(0x0EC2),
		},
		{
			OrbisAnim::Location(0x0EC6),
			OrbisAnim::Location(0x0ECA),
			OrbisAnim::Location(0x0ECE),
		},
		{
			OrbisAnim::Location(0x0ED2),
			OrbisAnim::Location(0x0ED6),
			OrbisAnim::Location(0x0EDA)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_wrist_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd168(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.249552f, 0.015141f, 0.000563f },
		OrbisAnim::Location(0x04C2),
		{
			OrbisAnim::Location(0x0FE6),
			OrbisAnim::Location(0x0FEA),
			OrbisAnim::Location(0x0FEE),
		},
		{
			OrbisAnim::Location(0x0FF2),
			OrbisAnim::Location(0x0FF6),
			OrbisAnim::Location(0x0FFA),
		},
		{
			OrbisAnim::Location(0x0FFE),
			OrbisAnim::Location(0x1002),
			OrbisAnim::Location(0x1006)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

static void HierarchyCopyCommand_Seg1Cmd169(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locJointParams + 0x02C0) = *(float*)(locSdkScalarTable + 0x0EB8);
	*(float*)(locJointParams + 0x02C4) = *(float*)(locSdkScalarTable + 0x0EBC);
	*(float*)(locJointParams + 0x02C8) = *(float*)(locSdkScalarTable + 0x0EC0);
	*(float*)(locSdkScalarTable + 0x0A04) = *(float*)(locSdkScalarTable + 0x0EC4);
	*(float*)(locSdkScalarTable + 0x0B10) = *(float*)(locSdkScalarTable + 0x0EC8);
	*(float*)(locSdkScalarTable + 0x0C1C) = *(float*)(locSdkScalarTable + 0x0ECC);
	*(float*)(locJointParams + 0x02A0) = *(float*)(locSdkScalarTable + 0x0ED0);
	*(float*)(locJointParams + 0x02A4) = *(float*)(locSdkScalarTable + 0x0ED4);
	*(float*)(locJointParams + 0x02A8) = *(float*)(locSdkScalarTable + 0x0ED8);
	*(float*)(locJointParams + 0x0560) = *(float*)(locSdkScalarTable + 0x0FE4);
	*(float*)(locJointParams + 0x0564) = *(float*)(locSdkScalarTable + 0x0FE8);
	*(float*)(locJointParams + 0x0568) = *(float*)(locSdkScalarTable + 0x0FEC);
	*(float*)(locSdkScalarTable + 0x0A38) = *(float*)(locSdkScalarTable + 0x0FF0);
	*(float*)(locSdkScalarTable + 0x0B44) = *(float*)(locSdkScalarTable + 0x0FF4);
	*(float*)(locSdkScalarTable + 0x0C50) = *(float*)(locSdkScalarTable + 0x0FF8);
	*(float*)(locJointParams + 0x0540) = *(float*)(locSdkScalarTable + 0x0FFC);
	*(float*)(locJointParams + 0x0544) = *(float*)(locSdkScalarTable + 0x1000);
	*(float*)(locJointParams + 0x0548) = *(float*)(locSdkScalarTable + 0x1004);
	*(float*)(locJointParams + 0x0548) = *(float*)(locSdkScalarTable + 0x1004);
	*(float*)(locJointParams + 0x0548) = *(float*)(locSdkScalarTable + 0x1004);
}

static void HierarchySdkDrivenRotCommand_Seg1Cmd170(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x09F4)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B00)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C0C)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3f04a727, 0, 0, 0x3f5af341));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x01C0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x09F4)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B00)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C0C)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3f04a727, 0, 0, 0x3f5af341));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x01C0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x09F4)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B00)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C0C)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3f04a727, 0, 0, 0x3f5af341));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x01C0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x09F4)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B00)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C0C)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3f04a727, 0, 0, 0x3f5af341));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x01C0) = q;
	}
}

// head_helper_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd171(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ 1.089433f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x01B0),
		OrbisAnim::Location(0x12FA),
		OrbisAnim::Location(0x12F2),
		OrbisAnim::Location(0x12F6)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

static void HierarchySdkDrivenRotCommand_Seg1Cmd172(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A04)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B10)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C1C)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3dfede04, 0x3bf74aff, 0xba2dc522, 0x3f7e00a4));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x02B0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A38)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B44)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C50)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3dfede04, 0x3bf74aff, 0xba2dc522, 0x3f7e00a4));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0550) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A38)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B44)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C50)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3dfede04, 0x3bf74aff, 0xba2dc522, 0x3f7e00a4));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0550) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A38)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B44)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C50)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3dfede04, 0x3bf74aff, 0xba2dc522, 0x3f7e00a4));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0550) = q;
	}
}

static void HierarchyParentingCommand_Seg1Cmd173(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x00A0, 0x0240 + 1 },	// Child[68]: head_helper, Parent[67]: neck_c_helper
		{ 0x00A0, 0x0240 + 1 },	// Child[68]: head_helper, Parent[67]: neck_c_helper
		{ 0x00A0, 0x0240 + 1 },	// Child[68]: head_helper, Parent[67]: neck_c_helper
		{ 0x00A0, 0x0240 + 1 }	// Child[68]: head_helper, Parent[67]: neck_c_helper
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

static void HierarchyCopyCommand_Seg1Cmd174(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locSdkScalarTable + 0x0840) = *(float*)(locSdkScalarTable + 0x12F0);
	*(float*)(locSdkScalarTable + 0x0844) = *(float*)(locSdkScalarTable + 0x12F4);
	*(float*)(locSdkScalarTable + 0x0848) = *(float*)(locSdkScalarTable + 0x12F8);
	*(float*)(locSdkScalarTable + 0x0848) = *(float*)(locSdkScalarTable + 0x12F8);
}

// l_wrist_helper_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd175(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ 0.249552f, 0.015141f, 0.000563f },
		OrbisAnim::Location(0x02A0),
		OrbisAnim::Location(0x137E),
		OrbisAnim::Location(0x1376),
		OrbisAnim::Location(0x137A)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

// r_wrist_helper_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd176(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ 0.249552f, 0.015141f, 0.000563f },
		OrbisAnim::Location(0x0540),
		OrbisAnim::Location(0x1432),
		OrbisAnim::Location(0x142A),
		OrbisAnim::Location(0x142E)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

static void HierarchyParentingCommand_Seg1Cmd177(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x00F0, 0x0380 + 1 },	// Child[73]: l_wrist_helper, Parent[72]: l_elbow_helper
		{ 0x01D0, 0x0700 + 1 },	// Child[87]: r_wrist_helper, Parent[86]: r_elbow_helper
		{ 0x01D0, 0x0700 + 1 },	// Child[87]: r_wrist_helper, Parent[86]: r_elbow_helper
		{ 0x01D0, 0x0700 + 1 }	// Child[87]: r_wrist_helper, Parent[86]: r_elbow_helper
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

static void HierarchyCopyCommand_Seg1Cmd178(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locSdkScalarTable + 0x08C4) = *(float*)(locSdkScalarTable + 0x1374);
	*(float*)(locSdkScalarTable + 0x08C8) = *(float*)(locSdkScalarTable + 0x1378);
	*(float*)(locSdkScalarTable + 0x08CC) = *(float*)(locSdkScalarTable + 0x137C);
	*(float*)(locSdkScalarTable + 0x0978) = *(float*)(locSdkScalarTable + 0x1428);
	*(float*)(locSdkScalarTable + 0x097C) = *(float*)(locSdkScalarTable + 0x142C);
	*(float*)(locSdkScalarTable + 0x0980) = *(float*)(locSdkScalarTable + 0x1430);
	*(float*)(locSdkScalarTable + 0x0980) = *(float*)(locSdkScalarTable + 0x1430);
	*(float*)(locSdkScalarTable + 0x0980) = *(float*)(locSdkScalarTable + 0x1430);
}

// l_hand_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd179(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0382)
	};

	static CONST_EXPR float defaultValues[] = {
		0.999699f, 0.000000f, 0.024535f, 0.000000f,
		0.014190f, 0.815784f, -0.578183f, 0.000000f,
		-0.020015f, 0.578357f, 0.815538f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		0.998094f, -0.061718f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.061718f, -0.998094f, 0.000000f, 0.000000f,
		0.002807f, -0.017435f, 0.080805f, 1.000000f,
		-1.150000f, 0.000000f, -0.000000f, 0.000000f,
		0.000000f, 0.000000f, -1.150000f, 0.000000f,
		-0.000000f, -1.150000f, -0.000000f, 0.000000f,
		0.065235f, 0.132180f, 0.452501f, 1.000000f,
		-1.149307f, 0.039929f, -0.000000f, 0.000000f,
		-0.008417f, -0.242265f, -1.124161f, 0.000000f,
		-0.039032f, -1.123483f, 0.242411f, 0.000000f,
		0.065235f, 0.132180f, 0.452501f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x0363),
		OrbisAnim::Location(0x0AF3),
		OrbisAnim::Location(0x03C1),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_hand_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd180(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0502)
	};

	static CONST_EXPR float defaultValues[] = {
		0.999699f, 0.000000f, 0.024535f, 0.000000f,
		0.014190f, 0.815784f, -0.578183f, 0.000000f,
		-0.020015f, 0.578357f, 0.815538f, 0.000000f,
		-0.000000f, -0.000000f, 0.000000f, 1.000000f,
		0.998094f, -0.061718f, 0.000000f, 0.000000f,
		-0.000000f, -0.000000f, 1.000000f, 0.000000f,
		-0.061718f, -0.998094f, -0.000000f, 0.000000f,
		-0.002807f, 0.017436f, -0.080805f, 1.000000f,
		-1.150000f, -0.000000f, 0.000000f, 0.000000f,
		0.000000f, -0.000000f, 1.150000f, 0.000000f,
		-0.000000f, 1.150000f, 0.000000f, 0.000000f,
		-0.065235f, 0.132180f, 0.452500f, 1.000000f,
		-1.149307f, -0.039929f, 0.000000f, 0.000000f,
		-0.008417f, 0.242265f, 1.124161f, 0.000000f,
		-0.039032f, 1.123483f, -0.242411f, 0.000000f,
		-0.065235f, 0.132180f, 0.452501f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x0393),
		OrbisAnim::Location(0x0B33),
		OrbisAnim::Location(0x0741),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_hand_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd181(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.745204f, -0.052006f, -0.077140f },
		OrbisAnim::Location(0x0382),
		{
			OrbisAnim::Location(0x0EDE),
			OrbisAnim::Location(0x0EE2),
			OrbisAnim::Location(0x0EE6),
		},
		{
			OrbisAnim::Location(0x0EEA),
			OrbisAnim::Location(0x0EEE),
			OrbisAnim::Location(0x0EF2),
		},
		{
			OrbisAnim::Location(0x0EF6),
			OrbisAnim::Location(0x0EFA),
			OrbisAnim::Location(0x0EFE)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_hand_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd182(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.745204f, -0.052006f, -0.077140f },
		OrbisAnim::Location(0x0502),
		{
			OrbisAnim::Location(0x100A),
			OrbisAnim::Location(0x100E),
			OrbisAnim::Location(0x1012),
		},
		{
			OrbisAnim::Location(0x1016),
			OrbisAnim::Location(0x101A),
			OrbisAnim::Location(0x101E),
		},
		{
			OrbisAnim::Location(0x1022),
			OrbisAnim::Location(0x1026),
			OrbisAnim::Location(0x102A)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

static void HierarchyCopyCommand_Seg1Cmd183(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locJointParams + 0x02F0) = *(float*)(locSdkScalarTable + 0x0EDC);
	*(float*)(locJointParams + 0x02F4) = *(float*)(locSdkScalarTable + 0x0EE0);
	*(float*)(locJointParams + 0x02F8) = *(float*)(locSdkScalarTable + 0x0EE4);
	*(float*)(locSdkScalarTable + 0x0A08) = *(float*)(locSdkScalarTable + 0x0EE8);
	*(float*)(locSdkScalarTable + 0x0B14) = *(float*)(locSdkScalarTable + 0x0EEC);
	*(float*)(locSdkScalarTable + 0x0C20) = *(float*)(locSdkScalarTable + 0x0EF0);
	*(float*)(locJointParams + 0x02D0) = *(float*)(locSdkScalarTable + 0x0EF4);
	*(float*)(locJointParams + 0x02D4) = *(float*)(locSdkScalarTable + 0x0EF8);
	*(float*)(locJointParams + 0x02D8) = *(float*)(locSdkScalarTable + 0x0EFC);
	*(float*)(locJointParams + 0x0590) = *(float*)(locSdkScalarTable + 0x1008);
	*(float*)(locJointParams + 0x0594) = *(float*)(locSdkScalarTable + 0x100C);
	*(float*)(locJointParams + 0x0598) = *(float*)(locSdkScalarTable + 0x1010);
	*(float*)(locSdkScalarTable + 0x0A3C) = *(float*)(locSdkScalarTable + 0x1014);
	*(float*)(locSdkScalarTable + 0x0B48) = *(float*)(locSdkScalarTable + 0x1018);
	*(float*)(locSdkScalarTable + 0x0C54) = *(float*)(locSdkScalarTable + 0x101C);
	*(float*)(locJointParams + 0x0570) = *(float*)(locSdkScalarTable + 0x1020);
	*(float*)(locJointParams + 0x0574) = *(float*)(locSdkScalarTable + 0x1024);
	*(float*)(locJointParams + 0x0578) = *(float*)(locSdkScalarTable + 0x1028);
	*(float*)(locJointParams + 0x0578) = *(float*)(locSdkScalarTable + 0x1028);
	*(float*)(locJointParams + 0x0578) = *(float*)(locSdkScalarTable + 0x1028);
}

static void HierarchySdkDrivenRotCommand_Seg1Cmd184(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A08)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B14)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C20)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3eb9b57a, 0xbd1c97cc, 0xbcd8a1ce, 0x3f6e4508));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x02E0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A3C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B48)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C54)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3eb9b57a, 0xbd1c97cc, 0xbcd8a1ce, 0x3f6e4508));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0580) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A3C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B48)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C54)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3eb9b57a, 0xbd1c97cc, 0xbcd8a1ce, 0x3f6e4508));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0580) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A3C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B48)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C54)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3eb9b57a, 0xbd1c97cc, 0xbcd8a1ce, 0x3f6e4508));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0580) = q;
	}
}

// l_hand_helper_bendTwistDriver
static void NdiBendTwistDriverCommand_Seg1Cmd185(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::BendTwistDriverParams params = {
		0x11BF63,
		1,
		0,
		1.000000f,
		{ 0.051982f, 0.677205f, 0.733956f},
		{ 0.745204f, -0.052006f, -0.077140f},
		OrbisAnim::Location(0x02D0),
		OrbisAnim::Location(0x0F32),
		OrbisAnim::Location(0x0F36),
		OrbisAnim::Location(0x0F3A),
		OrbisAnim::Location(0x0F26),
		OrbisAnim::Location(0x0F2A),
		OrbisAnim::Location(0x0F2E)
	};

	OrbisAnim::CommandBlock::ExecuteCommandBendTwistDriverImpl(&hierarchyHeader, &params);
}

// r_hand_helper_bendTwistDriver
static void NdiBendTwistDriverCommand_Seg1Cmd186(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::BendTwistDriverParams params = {
		0x11BF63,
		1,
		0,
		1.000000f,
		{ -0.051983f, -0.677207f, -0.733954f},
		{ 0.745204f, -0.052006f, -0.077140f},
		OrbisAnim::Location(0x0570),
		OrbisAnim::Location(0x105E),
		OrbisAnim::Location(0x1062),
		OrbisAnim::Location(0x1066),
		OrbisAnim::Location(0x1052),
		OrbisAnim::Location(0x1056),
		OrbisAnim::Location(0x105A)
	};

	OrbisAnim::CommandBlock::ExecuteCommandBendTwistDriverImpl(&hierarchyHeader, &params);
}

static void HierarchyParentingCommand_Seg1Cmd187(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0100, 0x03C0 + 1 },	// Child[74]: l_hand_helper, Parent[73]: l_wrist_helper
		{ 0x01E0, 0x0740 + 1 },	// Child[88]: r_hand_helper, Parent[87]: r_wrist_helper
		{ 0x01E0, 0x0740 + 1 },	// Child[88]: r_hand_helper, Parent[87]: r_wrist_helper
		{ 0x01E0, 0x0740 + 1 }	// Child[88]: r_hand_helper, Parent[87]: r_wrist_helper
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

static void HierarchyCopyCommand_Seg1Cmd188(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locSdkScalarTable + 0x0A10) = *(float*)(locSdkScalarTable + 0x0F24);
	*(float*)(locSdkScalarTable + 0x0B1C) = *(float*)(locSdkScalarTable + 0x0F28);
	*(float*)(locSdkScalarTable + 0x0C28) = *(float*)(locSdkScalarTable + 0x0F2C);
	*(float*)(locSdkScalarTable + 0x0A14) = *(float*)(locSdkScalarTable + 0x0F30);
	*(float*)(locSdkScalarTable + 0x0B20) = *(float*)(locSdkScalarTable + 0x0F34);
	*(float*)(locSdkScalarTable + 0x0C2C) = *(float*)(locSdkScalarTable + 0x0F38);
	*(float*)(locSdkScalarTable + 0x0A44) = *(float*)(locSdkScalarTable + 0x1050);
	*(float*)(locSdkScalarTable + 0x0B50) = *(float*)(locSdkScalarTable + 0x1054);
	*(float*)(locSdkScalarTable + 0x0C5C) = *(float*)(locSdkScalarTable + 0x1058);
	*(float*)(locSdkScalarTable + 0x0A48) = *(float*)(locSdkScalarTable + 0x105C);
	*(float*)(locSdkScalarTable + 0x0B54) = *(float*)(locSdkScalarTable + 0x1060);
	*(float*)(locSdkScalarTable + 0x0C60) = *(float*)(locSdkScalarTable + 0x1064);
}

// l_finger_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd189(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x03C2)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, -0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		-0.000000f, -0.000000f, 1.000000f, 0.000000f,
		0.000000f, -0.000000f, -0.000000f, 1.000000f,
		1.000000f, -0.000004f, -0.000096f, 0.000000f,
		-0.000000f, 0.999229f, -0.039253f, 0.000000f,
		0.000096f, 0.039253f, 0.999229f, 0.000000f,
		-0.000500f, 0.014448f, 0.020373f, 1.000000f,
		-1.147808f, 0.000000f, 0.070975f, 0.000000f,
		-0.000000f, -1.150000f, -0.000000f, 0.000000f,
		0.070975f, -0.000000f, 1.147808f, 0.000000f,
		0.062006f, 0.039254f, 0.472551f, 1.000000f,
		-1.145721f, -0.000000f, 0.099116f, 0.000000f,
		-0.057324f, -0.938151f, -0.662636f, 0.000000f,
		0.080857f, -0.665111f, 0.934660f, 0.000000f,
		0.062006f, 0.039254f, 0.472551f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x03C3),
		OrbisAnim::Location(0x0B73),
		OrbisAnim::Location(0x0401),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_finger_helper_mmConst
static void NdiMultMatrixCommand_Seg1Cmd190(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0542)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, -0.000000f, -0.000000f, 0.000000f,
		0.000000f, 1.000000f, -0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.000000f, -0.000000f, 0.000000f, 1.000000f,
		1.000000f, -0.000004f, -0.000096f, 0.000000f,
		-0.000000f, 0.999229f, -0.039253f, 0.000000f,
		0.000096f, 0.039253f, 0.999229f, 0.000000f,
		0.000500f, -0.014448f, -0.020373f, 1.000000f,
		-1.147808f, -0.000000f, -0.070975f, 0.000000f,
		-0.000000f, 1.150000f, 0.000000f, 0.000000f,
		0.070975f, 0.000000f, -1.147808f, 0.000000f,
		-0.062006f, 0.039254f, 0.472551f, 1.000000f,
		-1.145721f, 0.000000f, -0.099116f, 0.000000f,
		-0.057324f, 0.938151f, 0.662636f, 0.000000f,
		0.080857f, 0.665111f, -0.934660f, 0.000000f,
		-0.062006f, 0.039254f, 0.472551f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0xFFFFFFFF),
		OrbisAnim::Location(0x03F3),
		OrbisAnim::Location(0x0BB3),
		OrbisAnim::Location(0x0781),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,1,
	};

	static CONST_EXPR U8 dataFormat[] = {
		0,1,2,2,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_finger_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd191(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.577594f, 0.020097f, 0.014246f },
		OrbisAnim::Location(0x03C2),
		{
			OrbisAnim::Location(0x0F02),
			OrbisAnim::Location(0x0F06),
			OrbisAnim::Location(0x0F0A),
		},
		{
			OrbisAnim::Location(0x0F0E),
			OrbisAnim::Location(0x0F12),
			OrbisAnim::Location(0x0F16),
		},
		{
			OrbisAnim::Location(0x0F1A),
			OrbisAnim::Location(0x0F1E),
			OrbisAnim::Location(0x0F22)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_finger_helper_decConst
static void NdiDecomposeMatrixCommand_Seg1Cmd192(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.577594f, 0.020097f, 0.014246f },
		OrbisAnim::Location(0x0542),
		{
			OrbisAnim::Location(0x102E),
			OrbisAnim::Location(0x1032),
			OrbisAnim::Location(0x1036),
		},
		{
			OrbisAnim::Location(0x103A),
			OrbisAnim::Location(0x103E),
			OrbisAnim::Location(0x1042),
		},
		{
			OrbisAnim::Location(0x1046),
			OrbisAnim::Location(0x104A),
			OrbisAnim::Location(0x104E)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

static void HierarchySdkDrivenRotCommand_Seg1Cmd193(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A10)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B1C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C28)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0340) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A14)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B20)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C2C)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0370) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A44)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B50)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C5C)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x05E0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A48)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B54)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C60)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0610) = q;
	}
}

static void HierarchyCopyCommand_Seg1Cmd194(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locJointParams + 0x0320) = *(float*)(locSdkScalarTable + 0x0F00);
	*(float*)(locJointParams + 0x0324) = *(float*)(locSdkScalarTable + 0x0F04);
	*(float*)(locJointParams + 0x0328) = *(float*)(locSdkScalarTable + 0x0F08);
	*(float*)(locSdkScalarTable + 0x0A0C) = *(float*)(locSdkScalarTable + 0x0F0C);
	*(float*)(locSdkScalarTable + 0x0B18) = *(float*)(locSdkScalarTable + 0x0F10);
	*(float*)(locSdkScalarTable + 0x0C24) = *(float*)(locSdkScalarTable + 0x0F14);
	*(float*)(locJointParams + 0x0300) = *(float*)(locSdkScalarTable + 0x0F18);
	*(float*)(locJointParams + 0x0304) = *(float*)(locSdkScalarTable + 0x0F1C);
	*(float*)(locJointParams + 0x0308) = *(float*)(locSdkScalarTable + 0x0F20);
	*(float*)(locJointParams + 0x05C0) = *(float*)(locSdkScalarTable + 0x102C);
	*(float*)(locJointParams + 0x05C4) = *(float*)(locSdkScalarTable + 0x1030);
	*(float*)(locJointParams + 0x05C8) = *(float*)(locSdkScalarTable + 0x1034);
	*(float*)(locSdkScalarTable + 0x0A40) = *(float*)(locSdkScalarTable + 0x1038);
	*(float*)(locSdkScalarTable + 0x0B4C) = *(float*)(locSdkScalarTable + 0x103C);
	*(float*)(locSdkScalarTable + 0x0C58) = *(float*)(locSdkScalarTable + 0x1040);
	*(float*)(locJointParams + 0x05A0) = *(float*)(locSdkScalarTable + 0x1044);
	*(float*)(locJointParams + 0x05A4) = *(float*)(locSdkScalarTable + 0x1048);
	*(float*)(locJointParams + 0x05A8) = *(float*)(locSdkScalarTable + 0x104C);
	*(float*)(locJointParams + 0x05A8) = *(float*)(locSdkScalarTable + 0x104C);
	*(float*)(locJointParams + 0x05A8) = *(float*)(locSdkScalarTable + 0x104C);
}

// l_hand_helperBend_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd195(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0360),
		OrbisAnim::Location(0x132A),
		OrbisAnim::Location(0x1322),
		OrbisAnim::Location(0x1326)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

// r_hand_helperBend_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd196(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0600),
		OrbisAnim::Location(0x13DE),
		OrbisAnim::Location(0x13D6),
		OrbisAnim::Location(0x13DA)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

static void HierarchyParentingCommand_Seg1Cmd197(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0120, 0x03C0 + 1 },	// Child[76]: l_hand_helperTwist, Parent[73]: l_wrist_helper
		{ 0x0200, 0x0740 + 1 },	// Child[90]: r_hand_helperTwist, Parent[87]: r_wrist_helper
		{ 0x0200, 0x0740 + 1 },	// Child[90]: r_hand_helperTwist, Parent[87]: r_wrist_helper
		{ 0x0200, 0x0740 + 1 }	// Child[90]: r_hand_helperTwist, Parent[87]: r_wrist_helper
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

static void HierarchyCopyCommand_Seg1Cmd198(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locSdkScalarTable + 0x0870) = *(float*)(locSdkScalarTable + 0x1320);
	*(float*)(locSdkScalarTable + 0x0874) = *(float*)(locSdkScalarTable + 0x1324);
	*(float*)(locSdkScalarTable + 0x0878) = *(float*)(locSdkScalarTable + 0x1328);
	*(float*)(locSdkScalarTable + 0x0924) = *(float*)(locSdkScalarTable + 0x13D4);
	*(float*)(locSdkScalarTable + 0x0928) = *(float*)(locSdkScalarTable + 0x13D8);
	*(float*)(locSdkScalarTable + 0x092C) = *(float*)(locSdkScalarTable + 0x13DC);
	*(float*)(locSdkScalarTable + 0x092C) = *(float*)(locSdkScalarTable + 0x13DC);
	*(float*)(locSdkScalarTable + 0x092C) = *(float*)(locSdkScalarTable + 0x13DC);
}

static void HierarchySdkDrivenRotCommand_Seg1Cmd199(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A0C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B18)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C24)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3e91c565, 0x3c3f0b80, 0x3b81f3af, 0x3f75628a));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x0310) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A40)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B4C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C58)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3e91c565, 0x3c3f0b80, 0x3b81f3af, 0x3f75628a));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x05B0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A40)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B4C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C58)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3e91c565, 0x3c3f0b80, 0x3b81f3af, 0x3f75628a));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x05B0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0A40)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0B4C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x0C58)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		sceMath::Aos::Quat orient = sceMath::Aos::Quat(sce_vectormath_hexfloat4i(0x3e91c565, 0x3c3f0b80, 0x3b81f3af, 0x3f75628a));
		q = orient * q;
		*(sceMath::Aos::Quat*)(locJointParams + 0x05B0) = q;
	}
}

static void HierarchyParentingCommand_Seg1Cmd200(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0130, 0x0480 + 1 },	// Child[77]: l_hand_helperBend, Parent[76]: l_hand_helperTwist
		{ 0x0210, 0x0800 + 1 },	// Child[91]: r_hand_helperBend, Parent[90]: r_hand_helperTwist
		{ 0x0210, 0x0800 + 1 },	// Child[91]: r_hand_helperBend, Parent[90]: r_hand_helperTwist
		{ 0x0210, 0x0800 + 1 }	// Child[91]: r_hand_helperBend, Parent[90]: r_hand_helperTwist
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

// l_finger_helper_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd201(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ 0.577594f, 0.020097f, 0.014246f },
		OrbisAnim::Location(0x0300),
		OrbisAnim::Location(0x131E),
		OrbisAnim::Location(0x1316),
		OrbisAnim::Location(0x131A)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

// r_finger_helper_angleDriver
static void NdiAngleDriverCommand_Seg1Cmd202(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::AngleDriverParams params = {
		0x11BF62,
		2,
		1,
		0,
		{ 0.577594f, 0.020097f, 0.014246f },
		OrbisAnim::Location(0x05A0),
		OrbisAnim::Location(0x13D2),
		OrbisAnim::Location(0x13CA),
		OrbisAnim::Location(0x13CE)
	};

	OrbisAnim::CommandBlock::ExecuteCommandAngleDriverImpl(&hierarchyHeader, &params);
}

static void HierarchyParentingCommand_Seg1Cmd203(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0110, 0x0400 + 1 },	// Child[75]: l_finger_helper, Parent[74]: l_hand_helper
		{ 0x01F0, 0x0780 + 1 },	// Child[89]: r_finger_helper, Parent[88]: r_hand_helper
		{ 0x01F0, 0x0780 + 1 },	// Child[89]: r_finger_helper, Parent[88]: r_hand_helper
		{ 0x01F0, 0x0780 + 1 }	// Child[89]: r_finger_helper, Parent[88]: r_hand_helper
	};

	OrbisAnim_Parenting(1, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

static void HierarchyCopyCommand_Seg1Cmd204(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locSdkScalarTable + 0x0864) = *(float*)(locSdkScalarTable + 0x1314);
	*(float*)(locSdkScalarTable + 0x0868) = *(float*)(locSdkScalarTable + 0x1318);
	*(float*)(locSdkScalarTable + 0x086C) = *(float*)(locSdkScalarTable + 0x131C);
	*(float*)(locSdkScalarTable + 0x0918) = *(float*)(locSdkScalarTable + 0x13C8);
	*(float*)(locSdkScalarTable + 0x091C) = *(float*)(locSdkScalarTable + 0x13CC);
	*(float*)(locSdkScalarTable + 0x0920) = *(float*)(locSdkScalarTable + 0x13D0);
	*(float*)(locSdkScalarTable + 0x0920) = *(float*)(locSdkScalarTable + 0x13D0);
	*(float*)(locSdkScalarTable + 0x0920) = *(float*)(locSdkScalarTable + 0x13D0);
}

static void HierarchyCopyCommand_Seg1Cmd205(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;
	const char* __restrict locJointTransforms = (const char*)pContext->m_locJointTransforms;
	const char* __restrict pDependencyTable = (const char*)pContext->m_pDependencyTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(SMath::Vec4*)(pDependencyTable + 0x0E30) = *(SMath::Vec4*)(locJointTransforms + 0x0080);
	*(SMath::Vec4*)(pDependencyTable + 0x0E40) = *(SMath::Vec4*)(locJointTransforms + 0x0090);
	*(SMath::Vec4*)(pDependencyTable + 0x0E50) = *(SMath::Vec4*)(locJointTransforms + 0x00A0);
	*(SMath::Vec4*)(pDependencyTable + 0x0E60) = *(SMath::Vec4*)(locJointTransforms + 0x00B0);
	*(SMath::Vec4*)(pDependencyTable + 0x0E70) = *(SMath::Vec4*)(locJointTransforms + 0x0100);
	*(SMath::Vec4*)(pDependencyTable + 0x0E80) = *(SMath::Vec4*)(locJointTransforms + 0x0110);
	*(SMath::Vec4*)(pDependencyTable + 0x0E90) = *(SMath::Vec4*)(locJointTransforms + 0x0120);
	*(SMath::Vec4*)(pDependencyTable + 0x0EA0) = *(SMath::Vec4*)(locJointTransforms + 0x0130);
	*(SMath::Vec4*)(pDependencyTable + 0x0EB0) = *(SMath::Vec4*)(locJointTransforms + 0x0140);
	*(SMath::Vec4*)(pDependencyTable + 0x0EC0) = *(SMath::Vec4*)(locJointTransforms + 0x0150);
	*(SMath::Vec4*)(pDependencyTable + 0x0ED0) = *(SMath::Vec4*)(locJointTransforms + 0x0160);
	*(SMath::Vec4*)(pDependencyTable + 0x0EE0) = *(SMath::Vec4*)(locJointTransforms + 0x0170);
	*(SMath::Vec4*)(pDependencyTable + 0x0EF0) = *(SMath::Vec4*)(locJointTransforms + 0x0180);
	*(SMath::Vec4*)(pDependencyTable + 0x0F00) = *(SMath::Vec4*)(locJointTransforms + 0x0190);
	*(SMath::Vec4*)(pDependencyTable + 0x0F10) = *(SMath::Vec4*)(locJointTransforms + 0x01A0);
	*(SMath::Vec4*)(pDependencyTable + 0x0F20) = *(SMath::Vec4*)(locJointTransforms + 0x01B0);
	*(SMath::Vec4*)(pDependencyTable + 0x0F30) = *(SMath::Vec4*)(locJointTransforms + 0x0200);
	*(SMath::Vec4*)(pDependencyTable + 0x0F40) = *(SMath::Vec4*)(locJointTransforms + 0x0210);
	*(SMath::Vec4*)(pDependencyTable + 0x0F50) = *(SMath::Vec4*)(locJointTransforms + 0x0220);
	*(SMath::Vec4*)(pDependencyTable + 0x0F60) = *(SMath::Vec4*)(locJointTransforms + 0x0230);
	*(SMath::Vec4*)(pDependencyTable + 0x0F70) = *(SMath::Vec4*)(locJointTransforms + 0x0240);
	*(SMath::Vec4*)(pDependencyTable + 0x0F80) = *(SMath::Vec4*)(locJointTransforms + 0x0250);
	*(SMath::Vec4*)(pDependencyTable + 0x0F90) = *(SMath::Vec4*)(locJointTransforms + 0x0260);
	*(SMath::Vec4*)(pDependencyTable + 0x0FA0) = *(SMath::Vec4*)(locJointTransforms + 0x0270);
	*(SMath::Vec4*)(pDependencyTable + 0x0FB0) = *(SMath::Vec4*)(locJointTransforms + 0x0280);
	*(SMath::Vec4*)(pDependencyTable + 0x0FC0) = *(SMath::Vec4*)(locJointTransforms + 0x0290);
	*(SMath::Vec4*)(pDependencyTable + 0x0FD0) = *(SMath::Vec4*)(locJointTransforms + 0x02A0);
	*(SMath::Vec4*)(pDependencyTable + 0x0FE0) = *(SMath::Vec4*)(locJointTransforms + 0x02B0);
	*(SMath::Vec4*)(pDependencyTable + 0x0FF0) = *(SMath::Vec4*)(locJointTransforms + 0x0380);
	*(SMath::Vec4*)(pDependencyTable + 0x1000) = *(SMath::Vec4*)(locJointTransforms + 0x0390);
	*(SMath::Vec4*)(pDependencyTable + 0x1010) = *(SMath::Vec4*)(locJointTransforms + 0x03A0);
	*(SMath::Vec4*)(pDependencyTable + 0x1020) = *(SMath::Vec4*)(locJointTransforms + 0x03B0);
	*(SMath::Vec4*)(pDependencyTable + 0x1030) = *(SMath::Vec4*)(locJointTransforms + 0x03C0);
	*(SMath::Vec4*)(pDependencyTable + 0x1040) = *(SMath::Vec4*)(locJointTransforms + 0x03D0);
	*(SMath::Vec4*)(pDependencyTable + 0x1050) = *(SMath::Vec4*)(locJointTransforms + 0x03E0);
	*(SMath::Vec4*)(pDependencyTable + 0x1060) = *(SMath::Vec4*)(locJointTransforms + 0x03F0);
	*(SMath::Vec4*)(pDependencyTable + 0x1070) = *(SMath::Vec4*)(locJointTransforms + 0x0500);
	*(SMath::Vec4*)(pDependencyTable + 0x1080) = *(SMath::Vec4*)(locJointTransforms + 0x0510);
	*(SMath::Vec4*)(pDependencyTable + 0x1090) = *(SMath::Vec4*)(locJointTransforms + 0x0520);
	*(SMath::Vec4*)(pDependencyTable + 0x10A0) = *(SMath::Vec4*)(locJointTransforms + 0x0530);
	*(SMath::Vec4*)(pDependencyTable + 0x10B0) = *(SMath::Vec4*)(locJointTransforms + 0x0540);
	*(SMath::Vec4*)(pDependencyTable + 0x10C0) = *(SMath::Vec4*)(locJointTransforms + 0x0550);
	*(SMath::Vec4*)(pDependencyTable + 0x10D0) = *(SMath::Vec4*)(locJointTransforms + 0x0560);
	*(SMath::Vec4*)(pDependencyTable + 0x10E0) = *(SMath::Vec4*)(locJointTransforms + 0x0570);
	*(SMath::Vec4*)(pDependencyTable + 0x10F0) = *(SMath::Vec4*)(locJointTransforms + 0x0700);
	*(SMath::Vec4*)(pDependencyTable + 0x1100) = *(SMath::Vec4*)(locJointTransforms + 0x0710);
	*(SMath::Vec4*)(pDependencyTable + 0x1110) = *(SMath::Vec4*)(locJointTransforms + 0x0720);
	*(SMath::Vec4*)(pDependencyTable + 0x1120) = *(SMath::Vec4*)(locJointTransforms + 0x0730);
	*(SMath::Vec4*)(pDependencyTable + 0x1130) = *(SMath::Vec4*)(locJointTransforms + 0x0740);
	*(SMath::Vec4*)(pDependencyTable + 0x1140) = *(SMath::Vec4*)(locJointTransforms + 0x0750);
	*(SMath::Vec4*)(pDependencyTable + 0x1150) = *(SMath::Vec4*)(locJointTransforms + 0x0760);
	*(SMath::Vec4*)(pDependencyTable + 0x1160) = *(SMath::Vec4*)(locJointTransforms + 0x0770);
	*(SMath::Vec4*)(pDependencyTable + 0x1170) = *(SMath::Vec4*)(locJointTransforms + 0x0880);
	*(SMath::Vec4*)(pDependencyTable + 0x1180) = *(SMath::Vec4*)(locJointTransforms + 0x0890);
	*(SMath::Vec4*)(pDependencyTable + 0x1190) = *(SMath::Vec4*)(locJointTransforms + 0x08A0);
	*(SMath::Vec4*)(pDependencyTable + 0x11A0) = *(SMath::Vec4*)(locJointTransforms + 0x08B0);
	*(SMath::Vec4*)(pDependencyTable + 0x11B0) = *(SMath::Vec4*)(locJointTransforms + 0x08C0);
	*(SMath::Vec4*)(pDependencyTable + 0x11C0) = *(SMath::Vec4*)(locJointTransforms + 0x08D0);
	*(SMath::Vec4*)(pDependencyTable + 0x11D0) = *(SMath::Vec4*)(locJointTransforms + 0x08E0);
	*(SMath::Vec4*)(pDependencyTable + 0x11E0) = *(SMath::Vec4*)(locJointTransforms + 0x08F0);
	*(SMath::Vec4*)(pDependencyTable + 0x11F0) = *(SMath::Vec4*)(locJointTransforms + 0x0A40);
	*(SMath::Vec4*)(pDependencyTable + 0x1200) = *(SMath::Vec4*)(locJointTransforms + 0x0A50);
	*(SMath::Vec4*)(pDependencyTable + 0x1210) = *(SMath::Vec4*)(locJointTransforms + 0x0A60);
	*(SMath::Vec4*)(pDependencyTable + 0x1220) = *(SMath::Vec4*)(locJointTransforms + 0x0A70);
	*(SMath::Vec4*)(pDependencyTable + 0x1230) = *(SMath::Vec4*)(locJointTransforms + 0x0A80);
	*(SMath::Vec4*)(pDependencyTable + 0x1240) = *(SMath::Vec4*)(locJointTransforms + 0x0A90);
	*(SMath::Vec4*)(pDependencyTable + 0x1250) = *(SMath::Vec4*)(locJointTransforms + 0x0AA0);
	*(SMath::Vec4*)(pDependencyTable + 0x1260) = *(SMath::Vec4*)(locJointTransforms + 0x0AB0);
	*(SMath::Vec4*)(pDependencyTable + 0x1270) = *(SMath::Vec4*)(locJointTransforms + 0x0BC0);
	*(SMath::Vec4*)(pDependencyTable + 0x1280) = *(SMath::Vec4*)(locJointTransforms + 0x0BD0);
	*(SMath::Vec4*)(pDependencyTable + 0x1290) = *(SMath::Vec4*)(locJointTransforms + 0x0BE0);
	*(SMath::Vec4*)(pDependencyTable + 0x12A0) = *(SMath::Vec4*)(locJointTransforms + 0x0BF0);
	*(SMath::Vec4*)(pDependencyTable + 0x12B0) = *(SMath::Vec4*)(locJointTransforms + 0x0C40);
	*(SMath::Vec4*)(pDependencyTable + 0x12C0) = *(SMath::Vec4*)(locJointTransforms + 0x0C50);
	*(SMath::Vec4*)(pDependencyTable + 0x12D0) = *(SMath::Vec4*)(locJointTransforms + 0x0C60);
	*(SMath::Vec4*)(pDependencyTable + 0x12E0) = *(SMath::Vec4*)(locJointTransforms + 0x0C70);
	*(SMath::Vec4*)(pDependencyTable + 0x12F0) = *(SMath::Vec4*)(locJointTransforms + 0x0C80);
	*(SMath::Vec4*)(pDependencyTable + 0x1300) = *(SMath::Vec4*)(locJointTransforms + 0x0C90);
	*(SMath::Vec4*)(pDependencyTable + 0x1310) = *(SMath::Vec4*)(locJointTransforms + 0x0CA0);
	*(SMath::Vec4*)(pDependencyTable + 0x1320) = *(SMath::Vec4*)(locJointTransforms + 0x0CB0);
	*(SMath::Vec4*)(pDependencyTable + 0x1330) = *(SMath::Vec4*)(locJointTransforms + 0x0DC0);
	*(SMath::Vec4*)(pDependencyTable + 0x1340) = *(SMath::Vec4*)(locJointTransforms + 0x0DD0);
	*(SMath::Vec4*)(pDependencyTable + 0x1350) = *(SMath::Vec4*)(locJointTransforms + 0x0DE0);
	*(SMath::Vec4*)(pDependencyTable + 0x1360) = *(SMath::Vec4*)(locJointTransforms + 0x0DF0);
	*(SMath::Vec4*)(pDependencyTable + 0x1370) = *(SMath::Vec4*)(locJointTransforms + 0x0E00);
	*(SMath::Vec4*)(pDependencyTable + 0x1380) = *(SMath::Vec4*)(locJointTransforms + 0x0E10);
	*(SMath::Vec4*)(pDependencyTable + 0x1390) = *(SMath::Vec4*)(locJointTransforms + 0x0E20);
	*(SMath::Vec4*)(pDependencyTable + 0x13A0) = *(SMath::Vec4*)(locJointTransforms + 0x0E30);
	*(SMath::Vec4*)(pDependencyTable + 0x13B0) = *(SMath::Vec4*)(locJointTransforms + 0x0E80);
	*(SMath::Vec4*)(pDependencyTable + 0x13C0) = *(SMath::Vec4*)(locJointTransforms + 0x0E90);
	*(SMath::Vec4*)(pDependencyTable + 0x13D0) = *(SMath::Vec4*)(locJointTransforms + 0x0EA0);
	*(SMath::Vec4*)(pDependencyTable + 0x13E0) = *(SMath::Vec4*)(locJointTransforms + 0x0EB0);
	*(SMath::Vec4*)(pDependencyTable + 0x13F0) = *(SMath::Vec4*)(locJointTransforms + 0x0EC0);
	*(SMath::Vec4*)(pDependencyTable + 0x1400) = *(SMath::Vec4*)(locJointTransforms + 0x0ED0);
	*(SMath::Vec4*)(pDependencyTable + 0x1410) = *(SMath::Vec4*)(locJointTransforms + 0x0EE0);
	*(SMath::Vec4*)(pDependencyTable + 0x1420) = *(SMath::Vec4*)(locJointTransforms + 0x0EF0);
	*(SMath::Vec4*)(pDependencyTable + 0x1430) = *(SMath::Vec4*)(locJointTransforms + 0x0F40);
	*(SMath::Vec4*)(pDependencyTable + 0x1440) = *(SMath::Vec4*)(locJointTransforms + 0x0F50);
	*(SMath::Vec4*)(pDependencyTable + 0x1450) = *(SMath::Vec4*)(locJointTransforms + 0x0F60);
	*(SMath::Vec4*)(pDependencyTable + 0x1460) = *(SMath::Vec4*)(locJointTransforms + 0x0F70);
	*(SMath::Vec4*)(pDependencyTable + 0x1470) = *(SMath::Vec4*)(locJointTransforms + 0x0FC0);
	*(SMath::Vec4*)(pDependencyTable + 0x1480) = *(SMath::Vec4*)(locJointTransforms + 0x0FD0);
	*(SMath::Vec4*)(pDependencyTable + 0x1490) = *(SMath::Vec4*)(locJointTransforms + 0x0FE0);
	*(SMath::Vec4*)(pDependencyTable + 0x14A0) = *(SMath::Vec4*)(locJointTransforms + 0x0FF0);
	*(SMath::Vec4*)(pDependencyTable + 0x14B0) = *(SMath::Vec4*)(locJointTransforms + 0x1000);
	*(SMath::Vec4*)(pDependencyTable + 0x14C0) = *(SMath::Vec4*)(locJointTransforms + 0x1010);
	*(SMath::Vec4*)(pDependencyTable + 0x14D0) = *(SMath::Vec4*)(locJointTransforms + 0x1020);
	*(SMath::Vec4*)(pDependencyTable + 0x14E0) = *(SMath::Vec4*)(locJointTransforms + 0x1030);
	*(SMath::Vec4*)(pDependencyTable + 0x1670) = *(SMath::Vec4*)(locSdkScalarTable + 0x1410);
	*(SMath::Vec4*)(pDependencyTable + 0x1680) = *(SMath::Vec4*)(locSdkScalarTable + 0x1420);
	*(SMath::Vec4*)(pDependencyTable + 0x1690) = *(SMath::Vec4*)(locSdkScalarTable + 0x1430);
	*(SMath::Vec4*)(pDependencyTable + 0x1690) = *(SMath::Vec4*)(locSdkScalarTable + 0x1430);
}

static void HierarchyCopyCommand_Seg1Cmd206(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;
	const char* __restrict pDependencyTable = (const char*)pContext->m_pDependencyTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(pDependencyTable + 0x1570) = *(float*)(locSdkScalarTable + 0x0F2C);
	*(float*)(pDependencyTable + 0x1574) = *(float*)(locSdkScalarTable + 0x0F5C);
	*(float*)(pDependencyTable + 0x1578) = *(float*)(locSdkScalarTable + 0x0F74);
	*(float*)(pDependencyTable + 0x157C) = *(float*)(locSdkScalarTable + 0x1058);
	*(float*)(pDependencyTable + 0x1580) = *(float*)(locSdkScalarTable + 0x1088);
	*(float*)(pDependencyTable + 0x1584) = *(float*)(locSdkScalarTable + 0x10A0);
	*(float*)(pDependencyTable + 0x1588) = *(float*)(locSdkScalarTable + 0x1184);
	*(float*)(pDependencyTable + 0x158C) = *(float*)(locSdkScalarTable + 0x125C);
	*(float*)(pDependencyTable + 0x1590) = *(float*)(locSdkScalarTable + 0x128C);
	*(float*)(pDependencyTable + 0x1594) = *(float*)(locSdkScalarTable + 0x12C8);
	*(float*)(pDependencyTable + 0x1598) = *(float*)(locSdkScalarTable + 0x12F0);
	*(float*)(pDependencyTable + 0x159C) = *(float*)(locSdkScalarTable + 0x12F4);
	*(float*)(pDependencyTable + 0x15A0) = *(float*)(locSdkScalarTable + 0x12F8);
	*(float*)(pDependencyTable + 0x15A4) = *(float*)(locSdkScalarTable + 0x12FC);
	*(float*)(pDependencyTable + 0x15A8) = *(float*)(locSdkScalarTable + 0x1304);
	*(float*)(pDependencyTable + 0x15AC) = *(float*)(locSdkScalarTable + 0x1308);
	*(float*)(pDependencyTable + 0x15B0) = *(float*)(locSdkScalarTable + 0x1314);
	*(float*)(pDependencyTable + 0x15B4) = *(float*)(locSdkScalarTable + 0x1318);
	*(float*)(pDependencyTable + 0x15B8) = *(float*)(locSdkScalarTable + 0x131C);
	*(float*)(pDependencyTable + 0x15BC) = *(float*)(locSdkScalarTable + 0x1320);
	*(float*)(pDependencyTable + 0x15C0) = *(float*)(locSdkScalarTable + 0x1328);
	*(float*)(pDependencyTable + 0x15C4) = *(float*)(locSdkScalarTable + 0x132C);
	*(float*)(pDependencyTable + 0x15C8) = *(float*)(locSdkScalarTable + 0x1334);
	*(float*)(pDependencyTable + 0x15CC) = *(float*)(locSdkScalarTable + 0x1338);
	*(float*)(pDependencyTable + 0x15D0) = *(float*)(locSdkScalarTable + 0x1344);
	*(float*)(pDependencyTable + 0x15D4) = *(float*)(locSdkScalarTable + 0x134C);
	*(float*)(pDependencyTable + 0x15D8) = *(float*)(locSdkScalarTable + 0x1350);
	*(float*)(pDependencyTable + 0x15DC) = *(float*)(locSdkScalarTable + 0x1358);
	*(float*)(pDependencyTable + 0x15E0) = *(float*)(locSdkScalarTable + 0x135C);
	*(float*)(pDependencyTable + 0x15E4) = *(float*)(locSdkScalarTable + 0x1360);
	*(float*)(pDependencyTable + 0x15E8) = *(float*)(locSdkScalarTable + 0x1364);
	*(float*)(pDependencyTable + 0x15EC) = *(float*)(locSdkScalarTable + 0x1368);
	*(float*)(pDependencyTable + 0x15F0) = *(float*)(locSdkScalarTable + 0x136C);
	*(float*)(pDependencyTable + 0x15F4) = *(float*)(locSdkScalarTable + 0x1370);
	*(float*)(pDependencyTable + 0x15F8) = *(float*)(locSdkScalarTable + 0x1374);
	*(float*)(pDependencyTable + 0x15FC) = *(float*)(locSdkScalarTable + 0x1378);
	*(float*)(pDependencyTable + 0x1600) = *(float*)(locSdkScalarTable + 0x137C);
	*(float*)(pDependencyTable + 0x1604) = *(float*)(locSdkScalarTable + 0x1380);
	*(float*)(pDependencyTable + 0x1608) = *(float*)(locSdkScalarTable + 0x1384);
	*(float*)(pDependencyTable + 0x160C) = *(float*)(locSdkScalarTable + 0x1388);
	*(float*)(pDependencyTable + 0x1610) = *(float*)(locSdkScalarTable + 0x138C);
	*(float*)(pDependencyTable + 0x1614) = *(float*)(locSdkScalarTable + 0x1390);
	*(float*)(pDependencyTable + 0x1618) = *(float*)(locSdkScalarTable + 0x1394);
	*(float*)(pDependencyTable + 0x161C) = *(float*)(locSdkScalarTable + 0x1398);
	*(float*)(pDependencyTable + 0x1620) = *(float*)(locSdkScalarTable + 0x139C);
	*(float*)(pDependencyTable + 0x1624) = *(float*)(locSdkScalarTable + 0x13A0);
	*(float*)(pDependencyTable + 0x1628) = *(float*)(locSdkScalarTable + 0x13A4);
	*(float*)(pDependencyTable + 0x162C) = *(float*)(locSdkScalarTable + 0x13A8);
	*(float*)(pDependencyTable + 0x1630) = *(float*)(locSdkScalarTable + 0x13AC);
	*(float*)(pDependencyTable + 0x1634) = *(float*)(locSdkScalarTable + 0x13B0);
	*(float*)(pDependencyTable + 0x1638) = *(float*)(locSdkScalarTable + 0x13B8);
	*(float*)(pDependencyTable + 0x163C) = *(float*)(locSdkScalarTable + 0x13BC);
	*(float*)(pDependencyTable + 0x1640) = *(float*)(locSdkScalarTable + 0x13C8);
	*(float*)(pDependencyTable + 0x1644) = *(float*)(locSdkScalarTable + 0x13CC);
	*(float*)(pDependencyTable + 0x1648) = *(float*)(locSdkScalarTable + 0x13D0);
	*(float*)(pDependencyTable + 0x164C) = *(float*)(locSdkScalarTable + 0x13D4);
	*(float*)(pDependencyTable + 0x1650) = *(float*)(locSdkScalarTable + 0x13DC);
	*(float*)(pDependencyTable + 0x1654) = *(float*)(locSdkScalarTable + 0x13E0);
	*(float*)(pDependencyTable + 0x1658) = *(float*)(locSdkScalarTable + 0x13E8);
	*(float*)(pDependencyTable + 0x165C) = *(float*)(locSdkScalarTable + 0x13EC);
	*(float*)(pDependencyTable + 0x1660) = *(float*)(locSdkScalarTable + 0x13F8);
	*(float*)(pDependencyTable + 0x1664) = *(float*)(locSdkScalarTable + 0x1400);
	*(float*)(pDependencyTable + 0x1668) = *(float*)(locSdkScalarTable + 0x1404);
	*(float*)(pDependencyTable + 0x166C) = *(float*)(locSdkScalarTable + 0x140C);
	*(float*)(pDependencyTable + 0x16A0) = *(float*)(locSdkScalarTable + 0x144C);
	*(float*)(pDependencyTable + 0x16A4) = *(float*)(locSdkScalarTable + 0x1450);
	*(float*)(pDependencyTable + 0x16A8) = *(float*)(locSdkScalarTable + 0x1454);
	*(float*)(pDependencyTable + 0x16AC) = *(float*)(locSdkScalarTable + 0x1458);
	*(float*)(pDependencyTable + 0x16B0) = *(float*)(locSdkScalarTable + 0x145C);
	*(float*)(pDependencyTable + 0x16B4) = *(float*)(locSdkScalarTable + 0x1460);
	*(float*)(pDependencyTable + 0x16B8) = *(float*)(locSdkScalarTable + 0x1464);
	*(float*)(pDependencyTable + 0x16BC) = *(float*)(locSdkScalarTable + 0x1468);
	*(float*)(pDependencyTable + 0x16C0) = *(float*)(locSdkScalarTable + 0x146C);
	*(float*)(pDependencyTable + 0x16C0) = *(float*)(locSdkScalarTable + 0x146C);
	*(float*)(pDependencyTable + 0x16C0) = *(float*)(locSdkScalarTable + 0x146C);
	*(float*)(pDependencyTable + 0x16C0) = *(float*)(locSdkScalarTable + 0x146C);
}

static void HierarchyParentingCommand_Seg2Cmd0(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0010, 0x08B0 + 3 },	// Child[124]: tongue_a_bind, Parent[10]: jaw_bind
		{ 0x0060, 0x0870 + 3 },	// Child[129]: brow_grp, Parent[9]: head_bind
		{ 0x0240, 0x0870 + 3 },	// Child[159]: mouth_grp, Parent[9]: head_bind
		{ 0x0240, 0x0870 + 3 },	// Child[159]: mouth_grp, Parent[9]: head_bind
		{ 0x0020, 0x0040 + 1 },	// Child[125]: tongue_b_bind, Parent[124]: tongue_a_bind
		{ 0x0070, 0x0180 + 1 },	// Child[130]: m_brow_07_bind, Parent[129]: brow_grp
		{ 0x0080, 0x0180 + 1 },	// Child[131]: l_brow_08_bind, Parent[129]: brow_grp
		{ 0x0090, 0x0180 + 1 },	// Child[132]: l_brow_10_bind, Parent[129]: brow_grp
		{ 0x0030, 0x0080 + 1 },	// Child[126]: tongue_c_bind, Parent[125]: tongue_b_bind
		{ 0x00A0, 0x0180 + 1 },	// Child[133]: l_brow_12_bind, Parent[129]: brow_grp
		{ 0x00B0, 0x0180 + 1 },	// Child[134]: l_brow_18_bind, Parent[129]: brow_grp
		{ 0x00C0, 0x0180 + 1 },	// Child[135]: l_brow_24_bind, Parent[129]: brow_grp
		{ 0x0040, 0x00C0 + 1 },	// Child[127]: tongue_d_bind, Parent[126]: tongue_c_bind
		{ 0x00D0, 0x0180 + 1 },	// Child[136]: l_brow_26_bind, Parent[129]: brow_grp
		{ 0x00E0, 0x0180 + 1 },	// Child[137]: l_brow_30_bind, Parent[129]: brow_grp
		{ 0x00F0, 0x0180 + 1 },	// Child[138]: l_brow_35_bind, Parent[129]: brow_grp
		{ 0x0050, 0x0100 + 1 },	// Child[128]: tongue_e_bind, Parent[127]: tongue_d_bind
		{ 0x0100, 0x0180 + 1 },	// Child[139]: l_brow_37_bind, Parent[129]: brow_grp
		{ 0x0110, 0x0180 + 1 },	// Child[140]: l_brow_38_bind, Parent[129]: brow_grp
		{ 0x0120, 0x0180 + 1 },	// Child[141]: l_brow_40_bind, Parent[129]: brow_grp
		{ 0x0130, 0x0180 + 1 },	// Child[142]: l_brow_42_bind, Parent[129]: brow_grp
		{ 0x0140, 0x0180 + 1 },	// Child[143]: l_brow_43_bind, Parent[129]: brow_grp
		{ 0x0150, 0x0180 + 1 },	// Child[144]: l_brow_45_bind, Parent[129]: brow_grp
		{ 0x0160, 0x0180 + 1 },	// Child[145]: r_brow_08_bind, Parent[129]: brow_grp
		{ 0x0170, 0x0180 + 1 },	// Child[146]: r_brow_10_bind, Parent[129]: brow_grp
		{ 0x0180, 0x0180 + 1 },	// Child[147]: r_brow_12_bind, Parent[129]: brow_grp
		{ 0x0190, 0x0180 + 1 },	// Child[148]: r_brow_18_bind, Parent[129]: brow_grp
		{ 0x01A0, 0x0180 + 1 },	// Child[149]: r_brow_24_bind, Parent[129]: brow_grp
		{ 0x01B0, 0x0180 + 1 },	// Child[150]: r_brow_26_bind, Parent[129]: brow_grp
		{ 0x01C0, 0x0180 + 1 },	// Child[151]: r_brow_30_bind, Parent[129]: brow_grp
		{ 0x01D0, 0x0180 + 1 },	// Child[152]: r_brow_35_bind, Parent[129]: brow_grp
		{ 0x01E0, 0x0180 + 1 },	// Child[153]: r_brow_37_bind, Parent[129]: brow_grp
		{ 0x01F0, 0x0180 + 1 },	// Child[154]: r_brow_38_bind, Parent[129]: brow_grp
		{ 0x0200, 0x0180 + 1 },	// Child[155]: r_brow_40_bind, Parent[129]: brow_grp
		{ 0x0210, 0x0180 + 1 },	// Child[156]: r_brow_42_bind, Parent[129]: brow_grp
		{ 0x0220, 0x0180 + 1 },	// Child[157]: r_brow_43_bind, Parent[129]: brow_grp
		{ 0x0230, 0x0180 + 1 },	// Child[158]: r_brow_45_bind, Parent[129]: brow_grp
		{ 0x0250, 0x0900 + 1 },	// Child[160]: m_mouth_10_bind, Parent[159]: mouth_grp
		{ 0x0260, 0x0900 + 1 },	// Child[161]: m_mouth_14_bind, Parent[159]: mouth_grp
		{ 0x0270, 0x0900 + 1 },	// Child[162]: l_mouth_07_bind, Parent[159]: mouth_grp
		{ 0x0280, 0x0900 + 1 },	// Child[163]: l_mouth_17_bind, Parent[159]: mouth_grp
		{ 0x0290, 0x0900 + 1 },	// Child[164]: l_mouth_21_bind, Parent[159]: mouth_grp
		{ 0x02A0, 0x0900 + 1 },	// Child[165]: l_mouth_24_bind, Parent[159]: mouth_grp
		{ 0x02B0, 0x0900 + 1 },	// Child[166]: l_mouth_26_bind, Parent[159]: mouth_grp
		{ 0x02C0, 0x0900 + 1 },	// Child[167]: l_mouth_28_bind, Parent[159]: mouth_grp
		{ 0x02D0, 0x0900 + 1 },	// Child[168]: l_mouth_34_bind, Parent[159]: mouth_grp
		{ 0x02E0, 0x0900 + 1 },	// Child[169]: l_mouth_35_bind, Parent[159]: mouth_grp
		{ 0x02F0, 0x0900 + 1 },	// Child[170]: r_mouth_07_bind, Parent[159]: mouth_grp
		{ 0x0300, 0x0900 + 1 },	// Child[171]: r_mouth_17_bind, Parent[159]: mouth_grp
		{ 0x0310, 0x0900 + 1 },	// Child[172]: r_mouth_21_bind, Parent[159]: mouth_grp
		{ 0x0320, 0x0900 + 1 },	// Child[173]: r_mouth_24_bind, Parent[159]: mouth_grp
		{ 0x0330, 0x0900 + 1 },	// Child[174]: r_mouth_26_bind, Parent[159]: mouth_grp
		{ 0x0340, 0x0900 + 1 },	// Child[175]: r_mouth_28_bind, Parent[159]: mouth_grp
		{ 0x0350, 0x0900 + 1 },	// Child[176]: r_mouth_34_bind, Parent[159]: mouth_grp
		{ 0x0360, 0x0900 + 1 },	// Child[177]: r_mouth_35_bind, Parent[159]: mouth_grp
		{ 0x0360, 0x0900 + 1 }	// Child[177]: r_mouth_35_bind, Parent[159]: mouth_grp
	};

	OrbisAnim_Parenting(14, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

static void HierarchyCopyCommand_Seg2Cmd1(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointTransforms = (const char*)pContext->m_locJointTransforms;
	const char* __restrict pDependencyTable = (const char*)pContext->m_pDependencyTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(SMath::Vec4*)(pDependencyTable + 0x14F0) = *(SMath::Vec4*)(locJointTransforms + 0x0180);
	*(SMath::Vec4*)(pDependencyTable + 0x1500) = *(SMath::Vec4*)(locJointTransforms + 0x0190);
	*(SMath::Vec4*)(pDependencyTable + 0x1510) = *(SMath::Vec4*)(locJointTransforms + 0x01A0);
	*(SMath::Vec4*)(pDependencyTable + 0x1520) = *(SMath::Vec4*)(locJointTransforms + 0x01B0);
	*(SMath::Vec4*)(pDependencyTable + 0x1530) = *(SMath::Vec4*)(locJointTransforms + 0x0900);
	*(SMath::Vec4*)(pDependencyTable + 0x1540) = *(SMath::Vec4*)(locJointTransforms + 0x0910);
	*(SMath::Vec4*)(pDependencyTable + 0x1550) = *(SMath::Vec4*)(locJointTransforms + 0x0920);
	*(SMath::Vec4*)(pDependencyTable + 0x1560) = *(SMath::Vec4*)(locJointTransforms + 0x0930);
}

static void HierarchyConstantCommand_Seg3Cmd0(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Const", OrbisAnim::Perf::kBlue);
	*(vec_float4*)(locJointParams + 0x0870) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0890) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x08A0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x08C0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x08D0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x08F0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0900) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0920) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0930) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0950) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0960) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0980) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0990) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x09B0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x09C0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x09E0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x09F0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0A10) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0A20) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0A40) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x2380) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x2390) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x23A0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x23B0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x23C0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x23D0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x23E0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x23F0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x2400) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x2410) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x2420) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x2430) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x2440) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x2450) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x2460) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x2470) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x2480) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x2490) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x24A0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x24B0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x24C0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x24D0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x24D0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x24D0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(uint32_t*)(locSdkScalarTable + 0x2378) = 0;
	*(uint32_t*)(locSdkScalarTable + 0x237C) = 0;
	*(uint32_t*)(locSdkScalarTable + 0x237C) = 0;
	*(uint32_t*)(locSdkScalarTable + 0x237C) = 0;
}

// spine_d_helper_angleDriver_pitch_l_shoulder_helperBend_pose_02Mat1D
static void NdiInterpolateMatrix1DCommand_Seg3Cmd1(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::InterpolateMatrix1DParams params{
		0x11BF64,
		130,
	};

	static CONST_EXPR OrbisAnim::CommandBlock::InterpolateMatrix1DParams::Entry s_entries[] = {
		{ 1, 0, 0, 0, 3, 0, OrbisAnim::Location(0x16AF), OrbisAnim::Location(0x0042) },
		{ 1, 0, 0, 0, 2, 3, OrbisAnim::Location(0x16B7), OrbisAnim::Location(0x0082) },
		{ 1, 0, 0, 0, 2, 5, OrbisAnim::Location(0x16B3), OrbisAnim::Location(0x00C2) },
		{ 1, 0, 0, 0, 3, 7, OrbisAnim::Location(0x16BB), OrbisAnim::Location(0x0102) },
		{ 1, 0, 0, 0, 3, 10, OrbisAnim::Location(0x16C3), OrbisAnim::Location(0x0142) },
		{ 1, 0, 0, 0, 3, 13, OrbisAnim::Location(0x16BF), OrbisAnim::Location(0x0182) },
		{ 1, 0, 0, 0, 3, 16, OrbisAnim::Location(0x1607), OrbisAnim::Location(0x01C2) },
		{ 1, 0, 0, 0, 2, 19, OrbisAnim::Location(0x160F), OrbisAnim::Location(0x0202) },
		{ 1, 0, 0, 0, 3, 21, OrbisAnim::Location(0x15D3), OrbisAnim::Location(0x0242) },
		{ 1, 0, 0, 0, 2, 24, OrbisAnim::Location(0x15D7), OrbisAnim::Location(0x0282) },
		{ 1, 0, 0, 0, 3, 26, OrbisAnim::Location(0x157B), OrbisAnim::Location(0x02C2) },
		{ 1, 0, 0, 0, 3, 29, OrbisAnim::Location(0x15DB), OrbisAnim::Location(0x0302) },
		{ 1, 0, 0, 0, 2, 32, OrbisAnim::Location(0x15DF), OrbisAnim::Location(0x0342) },
		{ 1, 0, 0, 0, 4, 34, OrbisAnim::Location(0x15AF), OrbisAnim::Location(0x0382) },
		{ 1, 0, 0, 0, 2, 38, OrbisAnim::Location(0x1663), OrbisAnim::Location(0x03C2) },
		{ 1, 0, 0, 0, 2, 40, OrbisAnim::Location(0x166B), OrbisAnim::Location(0x0402) },
		{ 1, 0, 0, 0, 2, 42, OrbisAnim::Location(0x16AF), OrbisAnim::Location(0x0482) },
		{ 1, 0, 0, 0, 2, 44, OrbisAnim::Location(0x16B7), OrbisAnim::Location(0x04C2) },
		{ 1, 0, 0, 0, 2, 46, OrbisAnim::Location(0x16B3), OrbisAnim::Location(0x0502) },
		{ 1, 0, 0, 0, 3, 48, OrbisAnim::Location(0x16BB), OrbisAnim::Location(0x0542) },
		{ 1, 0, 0, 0, 3, 51, OrbisAnim::Location(0x16C3), OrbisAnim::Location(0x0582) },
		{ 1, 0, 0, 0, 3, 54, OrbisAnim::Location(0x16BF), OrbisAnim::Location(0x05C2) },
		{ 1, 0, 0, 0, 3, 57, OrbisAnim::Location(0x1607), OrbisAnim::Location(0x0602) },
		{ 1, 0, 0, 0, 2, 60, OrbisAnim::Location(0x160F), OrbisAnim::Location(0x0642) },
		{ 1, 0, 0, 0, 2, 62, OrbisAnim::Location(0x15D3), OrbisAnim::Location(0x0682) },
		{ 1, 0, 0, 0, 3, 64, OrbisAnim::Location(0x1663), OrbisAnim::Location(0x06C2) },
		{ 1, 0, 0, 0, 2, 67, OrbisAnim::Location(0x1667), OrbisAnim::Location(0x0702) },
		{ 1, 0, 0, 0, 3, 69, OrbisAnim::Location(0x1587), OrbisAnim::Location(0x0742) },
		{ 1, 0, 0, 0, 3, 72, OrbisAnim::Location(0x166B), OrbisAnim::Location(0x0782) },
		{ 1, 0, 0, 0, 2, 75, OrbisAnim::Location(0x166F), OrbisAnim::Location(0x07C2) },
		{ 1, 0, 0, 0, 2, 77, OrbisAnim::Location(0x1583), OrbisAnim::Location(0x0802) },
		{ 1, 0, 0, 0, 3, 79, OrbisAnim::Location(0x163F), OrbisAnim::Location(0x0842) },
		{ 1, 0, 0, 0, 4, 82, OrbisAnim::Location(0x16A3), OrbisAnim::Location(0x08C2) },
		{ 1, 0, 0, 0, 3, 86, OrbisAnim::Location(0x16AB), OrbisAnim::Location(0x0902) },
		{ 1, 0, 0, 0, 3, 89, OrbisAnim::Location(0x16A7), OrbisAnim::Location(0x0942) },
		{ 1, 0, 0, 0, 4, 92, OrbisAnim::Location(0x16AF), OrbisAnim::Location(0x0982) },
		{ 1, 0, 0, 0, 3, 96, OrbisAnim::Location(0x16B7), OrbisAnim::Location(0x09C2) },
		{ 1, 0, 0, 0, 3, 99, OrbisAnim::Location(0x16B3), OrbisAnim::Location(0x0A02) },
		{ 1, 0, 0, 0, 4, 102, OrbisAnim::Location(0x16BB), OrbisAnim::Location(0x0A42) },
		{ 1, 0, 0, 0, 3, 106, OrbisAnim::Location(0x16C3), OrbisAnim::Location(0x0A82) },
		{ 1, 0, 0, 0, 3, 109, OrbisAnim::Location(0x16BF), OrbisAnim::Location(0x0AC2) },
		{ 1, 0, 0, 0, 4, 112, OrbisAnim::Location(0x1607), OrbisAnim::Location(0x0B02) },
		{ 1, 0, 0, 0, 2, 116, OrbisAnim::Location(0x160F), OrbisAnim::Location(0x0B42) },
		{ 1, 0, 0, 0, 2, 118, OrbisAnim::Location(0x161B), OrbisAnim::Location(0x0B82) },
		{ 1, 0, 0, 0, 3, 120, OrbisAnim::Location(0x15D3), OrbisAnim::Location(0x0BC2) },
		{ 1, 0, 0, 0, 2, 123, OrbisAnim::Location(0x15D7), OrbisAnim::Location(0x0C02) },
		{ 1, 0, 0, 0, 3, 125, OrbisAnim::Location(0x157B), OrbisAnim::Location(0x0C42) },
		{ 1, 0, 0, 0, 3, 128, OrbisAnim::Location(0x15DB), OrbisAnim::Location(0x0C82) },
		{ 1, 0, 0, 0, 2, 131, OrbisAnim::Location(0x15DF), OrbisAnim::Location(0x0CC2) },
		{ 1, 0, 0, 0, 2, 133, OrbisAnim::Location(0x1577), OrbisAnim::Location(0x0D02) },
		{ 1, 0, 0, 0, 3, 135, OrbisAnim::Location(0x1663), OrbisAnim::Location(0x0D42) },
		{ 1, 0, 0, 0, 2, 138, OrbisAnim::Location(0x166B), OrbisAnim::Location(0x0D82) },
		{ 1, 0, 0, 0, 4, 140, OrbisAnim::Location(0x16A3), OrbisAnim::Location(0x0E02) },
		{ 1, 0, 0, 0, 3, 144, OrbisAnim::Location(0x16AB), OrbisAnim::Location(0x0E42) },
		{ 1, 0, 0, 0, 3, 147, OrbisAnim::Location(0x16A7), OrbisAnim::Location(0x0E82) },
		{ 1, 0, 0, 0, 4, 150, OrbisAnim::Location(0x16AF), OrbisAnim::Location(0x0EC2) },
		{ 1, 0, 0, 0, 3, 154, OrbisAnim::Location(0x16B7), OrbisAnim::Location(0x0F02) },
		{ 1, 0, 0, 0, 3, 157, OrbisAnim::Location(0x16B3), OrbisAnim::Location(0x0F42) },
		{ 1, 0, 0, 0, 4, 160, OrbisAnim::Location(0x16BB), OrbisAnim::Location(0x0F82) },
		{ 1, 0, 0, 0, 3, 164, OrbisAnim::Location(0x16C3), OrbisAnim::Location(0x0FC2) },
		{ 1, 0, 0, 0, 3, 167, OrbisAnim::Location(0x16BF), OrbisAnim::Location(0x1002) },
		{ 1, 0, 0, 0, 5, 170, OrbisAnim::Location(0x1607), OrbisAnim::Location(0x1042) },
		{ 1, 0, 0, 0, 2, 175, OrbisAnim::Location(0x160F), OrbisAnim::Location(0x1082) },
		{ 1, 0, 0, 0, 2, 177, OrbisAnim::Location(0x1613), OrbisAnim::Location(0x10C2) },
		{ 1, 0, 0, 0, 2, 179, OrbisAnim::Location(0x161B), OrbisAnim::Location(0x1102) },
		{ 1, 0, 0, 0, 2, 181, OrbisAnim::Location(0x1623), OrbisAnim::Location(0x1142) },
		{ 1, 0, 0, 0, 2, 183, OrbisAnim::Location(0x15D3), OrbisAnim::Location(0x1182) },
		{ 1, 0, 0, 0, 3, 185, OrbisAnim::Location(0x1663), OrbisAnim::Location(0x11C2) },
		{ 1, 0, 0, 0, 2, 188, OrbisAnim::Location(0x1667), OrbisAnim::Location(0x1202) },
		{ 1, 0, 0, 0, 3, 190, OrbisAnim::Location(0x1587), OrbisAnim::Location(0x1242) },
		{ 1, 0, 0, 0, 3, 193, OrbisAnim::Location(0x166B), OrbisAnim::Location(0x1282) },
		{ 1, 0, 0, 0, 2, 196, OrbisAnim::Location(0x166F), OrbisAnim::Location(0x12C2) },
		{ 1, 0, 0, 0, 4, 198, OrbisAnim::Location(0x1697), OrbisAnim::Location(0x1342) },
		{ 1, 0, 0, 0, 3, 202, OrbisAnim::Location(0x169F), OrbisAnim::Location(0x1382) },
		{ 1, 0, 0, 0, 3, 205, OrbisAnim::Location(0x169B), OrbisAnim::Location(0x13C2) },
		{ 1, 0, 0, 0, 3, 208, OrbisAnim::Location(0x162B), OrbisAnim::Location(0x1402) },
		{ 1, 0, 0, 0, 3, 211, OrbisAnim::Location(0x1633), OrbisAnim::Location(0x1442) },
		{ 1, 0, 0, 0, 3, 214, OrbisAnim::Location(0x162F), OrbisAnim::Location(0x1482) },
		{ 1, 0, 0, 0, 5, 217, OrbisAnim::Location(0x15C7), OrbisAnim::Location(0x14C2) },
		{ 1, 0, 0, 0, 2, 222, OrbisAnim::Location(0x15CB), OrbisAnim::Location(0x1502) },
		{ 1, 0, 0, 0, 3, 224, OrbisAnim::Location(0x1593), OrbisAnim::Location(0x1542) },
		{ 1, 0, 0, 0, 3, 227, OrbisAnim::Location(0x15CF), OrbisAnim::Location(0x1582) },
		{ 1, 0, 0, 0, 2, 230, OrbisAnim::Location(0x1657), OrbisAnim::Location(0x15C2) },
		{ 1, 0, 0, 0, 2, 232, OrbisAnim::Location(0x165B), OrbisAnim::Location(0x1602) },
		{ 1, 0, 0, 0, 4, 234, OrbisAnim::Location(0x1697), OrbisAnim::Location(0x1682) },
		{ 1, 0, 0, 0, 3, 238, OrbisAnim::Location(0x169F), OrbisAnim::Location(0x16C2) },
		{ 1, 0, 0, 0, 3, 241, OrbisAnim::Location(0x169B), OrbisAnim::Location(0x1702) },
		{ 1, 0, 0, 0, 3, 244, OrbisAnim::Location(0x162B), OrbisAnim::Location(0x1742) },
		{ 1, 0, 0, 0, 3, 247, OrbisAnim::Location(0x1633), OrbisAnim::Location(0x1782) },
		{ 1, 0, 0, 0, 3, 250, OrbisAnim::Location(0x162F), OrbisAnim::Location(0x17C2) },
		{ 1, 0, 0, 0, 5, 253, OrbisAnim::Location(0x15C7), OrbisAnim::Location(0x1802) },
		{ 1, 0, 0, 0, 2, 258, OrbisAnim::Location(0x15CB), OrbisAnim::Location(0x1842) },
		{ 1, 0, 0, 0, 3, 260, OrbisAnim::Location(0x1593), OrbisAnim::Location(0x1882) },
		{ 1, 0, 0, 0, 2, 263, OrbisAnim::Location(0x15CF), OrbisAnim::Location(0x18C2) },
		{ 1, 0, 0, 0, 2, 265, OrbisAnim::Location(0x1657), OrbisAnim::Location(0x1902) },
		{ 1, 0, 0, 0, 3, 267, OrbisAnim::Location(0x1597), OrbisAnim::Location(0x1942) },
		{ 1, 0, 0, 0, 4, 270, OrbisAnim::Location(0x1697), OrbisAnim::Location(0x19C2) },
		{ 1, 0, 0, 0, 3, 274, OrbisAnim::Location(0x169F), OrbisAnim::Location(0x1A02) },
		{ 1, 0, 0, 0, 3, 277, OrbisAnim::Location(0x169B), OrbisAnim::Location(0x1A42) },
		{ 1, 0, 0, 0, 3, 280, OrbisAnim::Location(0x162B), OrbisAnim::Location(0x1A82) },
		{ 1, 0, 0, 0, 3, 283, OrbisAnim::Location(0x1633), OrbisAnim::Location(0x1AC2) },
		{ 1, 0, 0, 0, 3, 286, OrbisAnim::Location(0x162F), OrbisAnim::Location(0x1B02) },
		{ 1, 0, 0, 0, 5, 289, OrbisAnim::Location(0x1657), OrbisAnim::Location(0x1B42) },
		{ 1, 0, 0, 0, 2, 294, OrbisAnim::Location(0x165B), OrbisAnim::Location(0x1B82) },
		{ 1, 0, 0, 0, 3, 296, OrbisAnim::Location(0x1597), OrbisAnim::Location(0x1BC2) },
		{ 1, 0, 0, 0, 3, 299, OrbisAnim::Location(0x165F), OrbisAnim::Location(0x1C02) },
		{ 1, 0, 0, 0, 4, 302, OrbisAnim::Location(0x1697), OrbisAnim::Location(0x1C82) },
		{ 1, 0, 0, 0, 3, 306, OrbisAnim::Location(0x169F), OrbisAnim::Location(0x1CC2) },
		{ 1, 0, 0, 0, 3, 309, OrbisAnim::Location(0x169B), OrbisAnim::Location(0x1D02) },
		{ 1, 0, 0, 0, 3, 312, OrbisAnim::Location(0x162B), OrbisAnim::Location(0x1D42) },
		{ 1, 0, 0, 0, 3, 315, OrbisAnim::Location(0x1633), OrbisAnim::Location(0x1D82) },
		{ 1, 0, 0, 0, 3, 318, OrbisAnim::Location(0x162F), OrbisAnim::Location(0x1DC2) },
		{ 1, 0, 0, 0, 4, 321, OrbisAnim::Location(0x1657), OrbisAnim::Location(0x1E02) },
		{ 1, 0, 0, 0, 2, 325, OrbisAnim::Location(0x165B), OrbisAnim::Location(0x1E42) },
		{ 1, 0, 0, 0, 3, 327, OrbisAnim::Location(0x1597), OrbisAnim::Location(0x1E82) },
		{ 1, 0, 0, 0, 2, 330, OrbisAnim::Location(0x165F), OrbisAnim::Location(0x1EC2) },
		{ 1, 0, 0, 0, 2, 332, OrbisAnim::Location(0x1697), OrbisAnim::Location(0x1F42) },
		{ 1, 0, 0, 0, 2, 334, OrbisAnim::Location(0x162B), OrbisAnim::Location(0x1F82) },
		{ 1, 0, 0, 0, 3, 336, OrbisAnim::Location(0x1633), OrbisAnim::Location(0x1FC2) },
		{ 1, 0, 0, 0, 5, 339, OrbisAnim::Location(0x15C7), OrbisAnim::Location(0x2002) },
		{ 1, 0, 0, 0, 2, 344, OrbisAnim::Location(0x15CB), OrbisAnim::Location(0x2042) },
		{ 1, 0, 0, 0, 3, 346, OrbisAnim::Location(0x1593), OrbisAnim::Location(0x2082) },
		{ 1, 0, 0, 0, 2, 349, OrbisAnim::Location(0x15CF), OrbisAnim::Location(0x20C2) },
		{ 1, 0, 0, 0, 2, 351, OrbisAnim::Location(0x1697), OrbisAnim::Location(0x2142) },
		{ 1, 0, 0, 0, 2, 353, OrbisAnim::Location(0x162B), OrbisAnim::Location(0x2182) },
		{ 1, 0, 0, 0, 3, 355, OrbisAnim::Location(0x1633), OrbisAnim::Location(0x21C2) },
		{ 1, 0, 0, 0, 5, 358, OrbisAnim::Location(0x1657), OrbisAnim::Location(0x2202) },
		{ 1, 0, 0, 0, 2, 363, OrbisAnim::Location(0x165B), OrbisAnim::Location(0x2242) },
		{ 1, 0, 0, 0, 3, 365, OrbisAnim::Location(0x1597), OrbisAnim::Location(0x2282) },
		{ 1, 0, 0, 0, 2, 368, OrbisAnim::Location(0x165F), OrbisAnim::Location(0x22C2) },
	};

	static CONST_EXPR OrbisAnim::CommandBlock::InterpolateMatrix1DState s_stateData[] = {
		{ -70.000000f, { 0.999894f, 0.014150f, 0.003326f, 0.000000f, -0.013949f, 0.998427f, -0.054312f, 0.000000f, -0.004089f, 0.054260f, 0.998518f, 0.000000f, -0.000750f, 0.017820f, -0.000403f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999894f, -0.014553f, 0.000306f, 0.000000f, 0.014504f, 0.997879f, 0.063457f, 0.000000f, -0.001229f, -0.063446f, 0.997985f, 0.000000f, 0.000834f, -0.005163f, -0.006595f, 1.000000f } },
		{ -50.000000f, { 0.997307f, -0.069564f, -0.023234f, 0.000000f, 0.069894f, 0.997460f, 0.013720f, 0.000000f, 0.022220f, -0.015307f, 0.999636f, 0.000000f, 0.002258f, 0.006395f, 0.003803f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.998101f, 0.020088f, -0.058237f, 0.000000f, -0.019495f, 0.999752f, 0.010724f, 0.000000f, 0.058438f, -0.009568f, 0.998245f, 0.000000f, 0.014310f, 0.000336f, 0.001641f, 1.000000f } },
		{ -70.000000f, { 0.997883f, 0.061395f, -0.021451f, 0.000000f, -0.062670f, 0.995919f, -0.064942f, 0.000000f, 0.017377f, 0.066149f, 0.997658f, 0.000000f, -0.000579f, 0.020869f, -0.012203f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999092f, -0.040582f, -0.012985f, 0.000000f, 0.041272f, 0.997450f, 0.058224f, 0.000000f, 0.010589f, -0.058707f, 0.998219f, 0.000000f, 0.001078f, -0.011338f, -0.005723f, 1.000000f } },
		{ -50.000000f, { 0.991684f, -0.101555f, -0.079055f, 0.000000f, 0.101395f, 0.994828f, -0.006047f, 0.000000f, 0.079261f, -0.002019f, 0.996852f, 0.000000f, 0.010729f, 0.004644f, 0.002848f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.993878f, -0.060378f, -0.092530f, 0.000000f, 0.044950f, 0.986001f, -0.160569f, 0.000000f, 0.100929f, 0.155426f, 0.982678f, 0.000000f, -0.003777f, -0.015672f, -0.007819f, 1.000000f } },
		{ -50.000000f, { 0.998435f, -0.016041f, 0.053572f, 0.000000f, 0.017370f, 0.999550f, -0.024437f, 0.000000f, -0.053156f, 0.025329f, 0.998265f, 0.000000f, -0.009299f, 0.007619f, -0.013776f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.997882f, 0.005358f, -0.064827f, 0.000000f, -0.004060f, 0.999789f, 0.020143f, 0.000000f, 0.064921f, -0.019837f, 0.997693f, 0.000000f, 0.019207f, 0.000633f, 0.001189f, 1.000000f } },
		{ -70.000000f, { 0.997235f, 0.065597f, 0.034931f, 0.000000f, -0.065647f, 0.997843f, 0.000309f, 0.000000f, -0.034835f, -0.002602f, 0.999390f, 0.000000f, -0.001007f, 0.001847f, 0.000534f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.997782f, 0.064470f, 0.016560f, 0.000000f, -0.065038f, 0.997219f, 0.036388f, 0.000000f, -0.014168f, -0.037384f, 0.999201f, 0.000000f, -0.001380f, -0.000636f, 0.000089f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.992169f, -0.008807f, -0.124590f, 0.000000f, -0.000782f, 0.997054f, -0.076702f, 0.000000f, 0.124899f, 0.076199f, 0.989239f, 0.000000f, -0.003681f, -0.000474f, -0.002070f, 1.000000f } },
		{ -35.000000f, { 0.915923f, -0.368366f, -0.159349f, 0.000000f, 0.369593f, 0.928910f, -0.022969f, 0.000000f, 0.156482f, -0.037856f, 0.986955f, 0.000000f, 0.001658f, -0.027453f, 0.003126f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { -0.024826f, -0.996886f, 0.074849f, 0.000000f, 0.251217f, -0.078691f, -0.964727f, 0.000000f, 0.967612f, -0.005147f, 0.252388f, 0.000000f, 0.015107f, -0.010606f, -0.032168f, 1.000000f } },
		{ -50.000000f, { 0.996013f, 0.074864f, -0.048505f, 0.000000f, -0.070679f, 0.994049f, 0.082896f, 0.000000f, 0.054422f, -0.079137f, 0.995377f, 0.000000f, 0.020158f, 0.004369f, 0.000806f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.986441f, 0.128334f, 0.102299f, 0.000000f, -0.127396f, 0.991728f, -0.015674f, 0.000000f, -0.103465f, 0.002429f, 0.994630f, 0.000000f, -0.018348f, -0.005827f, -0.007969f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.983148f, -0.150921f, -0.103161f, 0.000000f, 0.151569f, 0.988445f, -0.001577f, 0.000000f, 0.102207f, -0.014085f, 0.994663f, 0.000000f, 0.021945f, 0.001181f, 0.002421f, 1.000000f } },
		{ -35.000000f, { 0.414852f, -0.613434f, -0.672009f, 0.000000f, 0.594782f, 0.741746f, -0.309916f, 0.000000f, 0.688573f, -0.271130f, 0.672574f, 0.000000f, -0.025475f, -0.018835f, 0.042086f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.679931f, -0.733231f, 0.008102f, 0.000000f, 0.529300f, 0.483118f, -0.697451f, 0.000000f, 0.507478f, 0.478507f, 0.716587f, 0.000000f, 0.021893f, -0.014931f, -0.100458f, 1.000000f } },
		{ -50.000000f, { 0.706926f, -0.503649f, -0.496582f, 0.000000f, 0.425591f, 0.863668f, -0.270094f, 0.000000f, 0.564914f, -0.020404f, 0.824897f, 0.000000f, 0.047883f, -0.000830f, -0.003170f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -30.000000f, { 0.998335f, -0.054046f, -0.020139f, 0.000000f, 0.054003f, 0.998537f, -0.002674f, 0.000000f, 0.020254f, 0.001582f, 0.999794f, 0.000000f, -0.000559f, 0.000600f, 0.001087f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.992201f, 0.094552f, 0.081225f, 0.000000f, -0.098377f, 0.994156f, 0.044442f, 0.000000f, -0.076549f, -0.052086f, 0.995704f, 0.000000f, 0.001776f, -0.000350f, 0.000933f, 1.000000f } },
		{ 100.000000f, { 0.991828f, 0.123262f, 0.032924f, 0.000000f, -0.122422f, 0.992126f, -0.026425f, 0.000000f, -0.035922f, 0.022179f, 0.999108f, 0.000000f, 0.000052f, 0.002135f, 0.000882f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.999874f, -0.014930f, 0.005346f, 0.000000f, 0.015238f, 0.997892f, -0.063088f, 0.000000f, -0.004393f, 0.063162f, 0.997994f, 0.000000f, -0.000384f, -0.000460f, -0.000773f, 1.000000f } },
		{ -35.000000f, { 0.998041f, -0.014311f, -0.060903f, 0.000000f, 0.011645f, 0.998968f, -0.043909f, 0.000000f, 0.061468f, 0.043113f, 0.997177f, 0.000000f, 0.000332f, 0.000130f, -0.001583f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999979f, 0.003861f, -0.005196f, 0.000000f, -0.003521f, 0.997957f, 0.063787f, 0.000000f, 0.005432f, -0.063768f, 0.997950f, 0.000000f, -0.000509f, 0.004877f, 0.006447f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.997280f, -0.070374f, -0.021900f, 0.000000f, 0.070751f, 0.997350f, 0.016961f, 0.000000f, 0.020649f, -0.018465f, 0.999616f, 0.000000f, -0.002402f, -0.006230f, -0.003588f, 1.000000f } },
		{ -50.000000f, { 0.998433f, 0.018315f, -0.052880f, 0.000000f, -0.017660f, 0.999762f, 0.012817f, 0.000000f, 0.053103f, -0.011863f, 0.998519f, 0.000000f, -0.014221f, -0.000696f, -0.001797f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.997742f, 0.052697f, 0.041631f, 0.000000f, -0.050491f, 0.997350f, -0.052375f, 0.000000f, -0.044280f, 0.050155f, 0.997759f, 0.000000f, -0.000238f, -0.021426f, 0.010951f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999589f, -0.008839f, -0.027261f, 0.000000f, 0.010966f, 0.996822f, 0.078897f, 0.000000f, 0.026477f, -0.079164f, 0.996510f, 0.000000f, -0.000435f, 0.010276f, 0.005481f, 1.000000f } },
		{ -50.000000f, { 0.990122f, -0.083282f, -0.112790f, 0.000000f, 0.051473f, 0.964210f, -0.260096f, 0.000000f, 0.130414f, 0.251722f, 0.958973f, 0.000000f, 0.004808f, 0.015993f, 0.010920f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.994097f, -0.064243f, -0.087432f, 0.000000f, 0.061438f, 0.997518f, -0.034409f, 0.000000f, 0.089426f, 0.028834f, 0.995576f, 0.000000f, -0.010119f, -0.005460f, -0.002780f, 1.000000f } },
		{ -50.000000f, { 0.990512f, -0.050561f, -0.127790f, 0.000000f, 0.047701f, 0.998540f, -0.025345f, 0.000000f, 0.128885f, 0.019008f, 0.991477f, 0.000000f, -0.024400f, 0.002068f, -0.001435f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.996452f, 0.031062f, 0.078216f, 0.000000f, -0.030529f, 0.999502f, -0.008005f, 0.000000f, -0.078426f, 0.005588f, 0.996904f, 0.000000f, 0.011433f, -0.006190f, 0.015830f, 1.000000f } },
		{ -70.000000f, { 0.993859f, 0.043781f, -0.101623f, 0.000000f, -0.050668f, 0.996518f, -0.066212f, 0.000000f, 0.098370f, 0.070955f, 0.992617f, 0.000000f, 0.003201f, -0.000424f, 0.001168f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.998588f, 0.050533f, -0.016374f, 0.000000f, -0.050228f, 0.998566f, 0.018528f, 0.000000f, 0.017287f, -0.017679f, 0.999694f, 0.000000f, -0.000010f, -0.001971f, 0.000534f, 1.000000f } },
		{ -50.000000f, { 0.996866f, 0.016479f, -0.077369f, 0.000000f, -0.019458f, 0.999092f, -0.037912f, 0.000000f, 0.076674f, 0.039299f, 0.996281f, 0.000000f, 0.003760f, 0.001469f, 0.000763f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.998022f, -0.051573f, 0.035947f, 0.000000f, 0.053174f, 0.997567f, -0.045082f, 0.000000f, -0.033534f, 0.046904f, 0.998336f, 0.000000f, -0.001614f, 0.000077f, -0.000036f, 1.000000f } },
		{ -35.000000f, { 0.934609f, -0.327956f, -0.137662f, 0.000000f, 0.327741f, 0.944440f, -0.024881f, 0.000000f, 0.138173f, -0.021863f, 0.990167f, 0.000000f, -0.001604f, 0.027943f, -0.002596f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { -0.096118f, -0.995229f, 0.016775f, 0.000000f, 0.250895f, -0.040533f, -0.967165f, 0.000000f, 0.963230f, -0.088753f, 0.253594f, 0.000000f, -0.012833f, 0.009494f, 0.030082f, 1.000000f } },
		{ -50.000000f, { 0.996586f, 0.080182f, 0.019652f, 0.000000f, -0.081992f, 0.989099f, 0.122311f, 0.000000f, -0.009631f, -0.123505f, 0.992297f, 0.000000f, -0.021387f, -0.004276f, -0.001878f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.982662f, 0.149273f, 0.109973f, 0.000000f, -0.148328f, 0.988796f, -0.016772f, 0.000000f, -0.111244f, 0.000169f, 0.993793f, 0.000000f, 0.018190f, 0.006157f, 0.007896f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.984969f, -0.156051f, -0.074050f, 0.000000f, 0.156697f, 0.987642f, 0.002960f, 0.000000f, 0.072673f, -0.014518f, 0.997250f, 0.000000f, -0.022253f, -0.001238f, -0.002671f, 1.000000f } },
		{ -35.000000f, { 0.433225f, -0.612827f, -0.660878f, 0.000000f, 0.615540f, 0.736795f, -0.279719f, 0.000000f, 0.658351f, -0.285616f, 0.696418f, 0.000000f, 0.023061f, 0.018368f, -0.040580f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.691178f, -0.722636f, 0.008354f, 0.000000f, 0.493100f, 0.463120f, -0.736460f, 0.000000f, 0.528324f, 0.513144f, 0.676430f, 0.000000f, -0.017786f, 0.015485f, 0.099271f, 1.000000f } },
		{ -50.000000f, { 0.686120f, -0.535298f, -0.492642f, 0.000000f, 0.471718f, 0.842887f, -0.258891f, 0.000000f, 0.553825f, -0.054758f, 0.830831f, 0.000000f, -0.049936f, 0.000733f, 0.002700f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.997779f, 0.038687f, 0.054231f, 0.000000f, -0.041161f, 0.998126f, 0.045280f, 0.000000f, -0.052377f, -0.047412f, 0.997501f, 0.000000f, -0.001937f, -0.001735f, -0.000480f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.991871f, 0.094931f, 0.084740f, 0.000000f, -0.098719f, 0.994242f, 0.041672f, 0.000000f, -0.080296f, -0.049699f, 0.995531f, 0.000000f, -0.001944f, 0.000113f, -0.000458f, 1.000000f } },
		{ 100.000000f, { 0.991345f, 0.125719f, 0.037811f, 0.000000f, -0.124114f, 0.991372f, -0.042161f, 0.000000f, -0.042786f, 0.037103f, 0.998395f, 0.000000f, -0.000003f, -0.002007f, -0.000590f, 1.000000f } },
		{ -70.000000f, { 0.999567f, -0.022874f, -0.018505f, 0.000000f, 0.026486f, 0.973433f, 0.227434f, 0.000000f, 0.012811f, -0.227825f, 0.973618f, 0.000000f, 0.000468f, 0.009978f, -0.058268f, 1.000000f } },
		{ -35.000000f, { 0.999985f, -0.004569f, -0.003132f, 0.000000f, 0.004930f, 0.991889f, 0.127012f, 0.000000f, 0.002527f, -0.127025f, 0.991896f, 0.000000f, 0.000075f, -0.003967f, -0.031177f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999970f, -0.007703f, -0.001276f, 0.000000f, 0.007485f, 0.992195f, -0.124467f, 0.000000f, 0.002225f, 0.124454f, 0.992223f, 0.000000f, 0.000183f, 0.020827f, 0.024070f, 1.000000f } },
		{ -50.000000f, { 0.985409f, 0.040730f, -0.165257f, 0.000000f, -0.044509f, 0.998824f, -0.019223f, 0.000000f, 0.164279f, 0.026298f, 0.986063f, 0.000000f, 0.009393f, 0.000158f, -0.022044f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.985227f, -0.004870f, 0.171182f, 0.000000f, 0.000172f, 0.999623f, 0.027449f, 0.000000f, -0.171251f, -0.027015f, 0.984857f, 0.000000f, -0.023232f, -0.000714f, 0.008228f, 1.000000f } },
		{ -50.000000f, { 0.982781f, 0.184496f, 0.010122f, 0.000000f, -0.184428f, 0.982819f, -0.007286f, 0.000000f, -0.011293f, 0.005294f, 0.999922f, 0.000000f, 0.028972f, 0.031607f, -0.000447f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.981295f, -0.191165f, -0.022737f, 0.000000f, 0.191334f, 0.981510f, 0.005490f, 0.000000f, 0.021267f, -0.009738f, 0.999726f, 0.000000f, -0.042751f, 0.001771f, -0.000173f, 1.000000f } },
		{ -70.000000f, { 0.997266f, -0.069184f, 0.025960f, 0.000000f, 0.073485f, 0.891574f, -0.446874f, 0.000000f, 0.007772f, 0.447560f, 0.894220f, 0.000000f, -0.000021f, 0.048283f, 0.090686f, 1.000000f } },
		{ -35.000000f, { 0.999857f, -0.016664f, 0.002731f, 0.000000f, 0.016846f, 0.973210f, -0.229300f, 0.000000f, 0.001164f, 0.229313f, 0.973352f, 0.000000f, -0.000013f, 0.009470f, 0.051512f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.998262f, 0.050354f, -0.030622f, 0.000000f, -0.040048f, 0.960790f, 0.274368f, 0.000000f, 0.043237f, -0.272665f, 0.961137f, 0.000000f, 0.000827f, 0.019017f, -0.045429f, 1.000000f } },
		{ -50.000000f, { 0.932538f, 0.060015f, 0.356049f, 0.000000f, -0.059164f, 0.998160f, -0.013291f, 0.000000f, -0.356192f, -0.008670f, 0.934373f, 0.000000f, -0.002009f, 0.002044f, 0.033971f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.935384f, -0.031735f, -0.352208f, 0.000000f, 0.039508f, 0.999108f, 0.014902f, 0.000000f, 0.351421f, -0.027854f, 0.935803f, 0.000000f, -0.022918f, -0.001559f, -0.017509f, 1.000000f } },
		{ -50.000000f, { 0.949415f, -0.312786f, 0.027851f, 0.000000f, 0.312877f, 0.949793f, 0.001140f, 0.000000f, -0.026809f, 0.007632f, 0.999611f, 0.000000f, -0.077561f, 0.003396f, -0.000961f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.949180f, 0.313455f, -0.028352f, 0.000000f, -0.313193f, 0.949595f, 0.013375f, 0.000000f, 0.031116f, -0.003816f, 0.999509f, 0.000000f, 0.052650f, 0.055245f, -0.004380f, 1.000000f } },
		{ -70.000000f, { 0.999541f, 0.000652f, 0.030299f, 0.000000f, 0.009674f, 0.940602f, -0.339372f, 0.000000f, -0.028720f, 0.339510f, 0.940164f, 0.000000f, -0.001691f, 0.018096f, 0.083716f, 1.000000f } },
		{ -35.000000f, { 0.999838f, 0.004503f, 0.017443f, 0.000000f, -0.001290f, 0.983663f, -0.180014f, 0.000000f, -0.017968f, 0.179962f, 0.983509f, 0.000000f, -0.000726f, -0.005002f, 0.042829f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999024f, -0.013285f, -0.042118f, 0.000000f, 0.022949f, 0.970980f, 0.238056f, 0.000000f, 0.037733f, -0.238790f, 0.970338f, 0.000000f, 0.000855f, 0.025471f, -0.028650f, 1.000000f } },
		{ -50.000000f, { 0.929891f, 0.105604f, 0.352351f, 0.000000f, -0.113621f, 0.993522f, 0.002086f, 0.000000f, -0.349848f, -0.041975f, 0.935865f, 0.000000f, 0.014749f, 0.004328f, 0.034475f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.789529f, 0.539631f, -0.292306f, 0.000000f, -0.523874f, 0.840701f, 0.137033f, 0.000000f, 0.319689f, 0.044939f, 0.946456f, 0.000000f, -0.045831f, 0.000962f, -0.002870f, 1.000000f } },
		{ -50.000000f, { 0.964281f, -0.221060f, 0.145926f, 0.000000f, 0.231066f, 0.971360f, -0.055395f, 0.000000f, -0.129501f, 0.087135f, 0.987743f, 0.000000f, -0.057550f, 0.005216f, -0.002084f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.959175f, 0.272466f, -0.075797f, 0.000000f, -0.271749f, 0.962164f, 0.019821f, 0.000000f, 0.078330f, 0.001586f, 0.996926f, 0.000000f, 0.037249f, 0.039120f, -0.004823f, 1.000000f } },
		{ -70.000000f, { 0.943844f, 0.281168f, 0.173501f, 0.000000f, -0.241320f, 0.945359f, -0.219227f, 0.000000f, -0.225661f, 0.165046f, 0.960123f, 0.000000f, -0.007149f, 0.005511f, -0.004622f, 1.000000f } },
		{ -35.000000f, { 0.999390f, -0.008127f, -0.033971f, 0.000000f, 0.009895f, 0.998588f, 0.052197f, 0.000000f, 0.033499f, -0.052501f, 0.998059f, 0.000000f, 0.001834f, -0.000845f, -0.000431f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.990228f, -0.120695f, 0.069868f, 0.000000f, 0.119529f, 0.992616f, 0.020649f, 0.000000f, -0.071844f, -0.012096f, 0.997343f, 0.000000f, -0.000606f, 0.000418f, 0.001334f, 1.000000f } },
		{ -50.000000f, { 0.998062f, -0.001037f, 0.062215f, 0.000000f, 0.007154f, 0.995143f, -0.098183f, 0.000000f, -0.061811f, 0.098438f, 0.993222f, 0.000000f, -0.002614f, 0.001796f, -0.001610f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.996627f, -0.074976f, -0.033351f, 0.000000f, 0.076961f, 0.995052f, 0.062837f, 0.000000f, 0.028475f, -0.065191f, 0.997466f, 0.000000f, 0.000903f, -0.001588f, 0.000881f, 1.000000f } },
		{ -35.000000f, { 0.491406f, -0.466169f, -0.735667f, 0.000000f, 0.695036f, 0.718922f, 0.008707f, 0.000000f, 0.524829f, -0.515594f, 0.677287f, 0.000000f, -0.077346f, 0.072086f, -0.082755f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.933942f, -0.355602f, 0.036047f, 0.000000f, 0.339135f, 0.913482f, 0.224806f, 0.000000f, -0.112870f, -0.197731f, 0.973737f, 0.000000f, -0.005118f, 0.006547f, 0.083124f, 1.000000f } },
		{ -50.000000f, { 0.982622f, 0.153331f, -0.104613f, 0.000000f, -0.150906f, 0.988069f, 0.030762f, 0.000000f, 0.108081f, -0.014440f, 0.994037f, 0.000000f, 0.030870f, 0.013365f, -0.003217f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.985842f, -0.043432f, -0.161957f, 0.000000f, 0.045761f, 0.998895f, 0.010679f, 0.000000f, 0.161314f, -0.017939f, 0.986740f, 0.000000f, -0.010742f, 0.000075f, -0.001977f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.983213f, 0.011778f, 0.182082f, 0.000000f, -0.003698f, 0.998996f, -0.044650f, 0.000000f, -0.182425f, 0.043227f, 0.982269f, 0.000000f, 0.007081f, -0.000189f, 0.003316f, 1.000000f } },
		{ -35.000000f, { 0.742642f, 0.132532f, 0.656443f, 0.000000f, 0.477493f, 0.582498f, -0.657797f, 0.000000f, -0.469556f, 0.801955f, 0.369305f, 0.000000f, -0.029329f, 0.062898f, -0.041127f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.957223f, -0.100754f, -0.271243f, 0.000000f, 0.141334f, 0.980789f, 0.134453f, 0.000000f, 0.252486f, -0.167037f, 0.953074f, 0.000000f, 0.009189f, -0.012600f, -0.004282f, 1.000000f } },
		{ -50.000000f, { 0.996760f, -0.077455f, -0.021685f, 0.000000f, 0.077169f, 0.996924f, -0.013711f, 0.000000f, 0.022680f, 0.011993f, 0.999671f, 0.000000f, 0.002640f, -0.005822f, -0.002914f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.998690f, 0.000426f, -0.051160f, 0.000000f, 0.000134f, 0.999940f, 0.010933f, 0.000000f, 0.051162f, -0.010925f, 0.998631f, 0.000000f, 0.001841f, -0.001353f, 0.000759f, 1.000000f } },
		{ -0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.998035f, -0.022898f, 0.058329f, 0.000000f, 0.023172f, 0.999723f, -0.004027f, 0.000000f, -0.058220f, 0.005371f, 0.998289f, 0.000000f, -0.003645f, 0.000910f, -0.001540f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.993006f, -0.113866f, -0.031193f, 0.000000f, 0.112714f, 0.992956f, -0.036512f, 0.000000f, 0.035131f, 0.032740f, 0.998846f, 0.000000f, 0.002833f, 0.003073f, 0.001922f, 1.000000f } },
		{ -35.000000f, { 0.998352f, 0.007765f, 0.056863f, 0.000000f, -0.004595f, 0.998439f, -0.055661f, 0.000000f, -0.057206f, 0.055308f, 0.996829f, 0.000000f, -0.003280f, 0.002727f, -0.000189f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.999043f, 0.012693f, 0.041867f, 0.000000f, -0.020568f, 0.980903f, 0.193409f, 0.000000f, -0.038613f, -0.194085f, 0.980225f, 0.000000f, -0.001261f, 0.011665f, -0.058531f, 1.000000f } },
		{ -35.000000f, { 0.999944f, 0.002029f, 0.010403f, 0.000000f, -0.003190f, 0.993608f, 0.112840f, 0.000000f, -0.010107f, -0.112867f, 0.993559f, 0.000000f, -0.000290f, -0.003409f, -0.031355f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999989f, 0.003607f, 0.002942f, 0.000000f, -0.003236f, 0.993065f, -0.117519f, 0.000000f, -0.003345f, 0.117508f, 0.993066f, 0.000000f, -0.000262f, 0.020976f, 0.024241f, 1.000000f } },
		{ -50.000000f, { 0.985706f, -0.011596f, -0.168074f, 0.000000f, 0.017769f, 0.999220f, 0.035272f, 0.000000f, 0.167534f, -0.037755f, 0.985143f, 0.000000f, 0.023392f, -0.001140f, 0.008304f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.984022f, -0.032125f, 0.175125f, 0.000000f, 0.040574f, 0.998168f, -0.044878f, 0.000000f, -0.173363f, 0.051267f, 0.983523f, 0.000000f, -0.009739f, 0.001383f, -0.022039f, 1.000000f } },
		{ -50.000000f, { 0.983308f, 0.178699f, 0.034242f, 0.000000f, -0.179078f, 0.983800f, 0.008310f, 0.000000f, -0.032202f, -0.014303f, 0.999379f, 0.000000f, 0.042665f, 0.001582f, -0.000363f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.983612f, -0.180156f, -0.007205f, 0.000000f, 0.180146f, 0.983638f, -0.002085f, 0.000000f, 0.007463f, 0.000753f, 0.999972f, 0.000000f, -0.029037f, 0.031937f, -0.000361f, 1.000000f } },
		{ -70.000000f, { 0.995163f, 0.095184f, -0.024284f, 0.000000f, -0.095719f, 0.884031f, -0.457523f, 0.000000f, -0.022081f, 0.457635f, 0.888866f, 0.000000f, -0.000470f, 0.048534f, 0.090052f, 1.000000f } },
		{ -35.000000f, { 0.999762f, 0.021754f, -0.001499f, 0.000000f, -0.021496f, 0.971701f, -0.235235f, 0.000000f, -0.003661f, 0.235211f, 0.971937f, 0.000000f, 0.000019f, 0.009656f, 0.051371f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.994331f, -0.085235f, 0.063569f, 0.000000f, 0.061525f, 0.948802f, 0.309823f, 0.000000f, -0.086722f, -0.304156f, 0.948667f, 0.000000f, -0.002468f, 0.018825f, -0.045590f, 1.000000f } },
		{ -50.000000f, { 0.939233f, 0.036759f, 0.341306f, 0.000000f, -0.045015f, 0.998853f, 0.016299f, 0.000000f, -0.340315f, -0.030673f, 0.939811f, 0.000000f, 0.023495f, -0.001896f, -0.017129f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.937739f, -0.050859f, -0.343596f, 0.000000f, 0.050394f, 0.998676f, -0.010289f, 0.000000f, 0.343664f, -0.007667f, 0.939061f, 0.000000f, 0.001813f, 0.002241f, 0.034272f, 1.000000f } },
		{ -50.000000f, { 0.948421f, -0.315427f, 0.031680f, 0.000000f, 0.315014f, 0.948927f, 0.017407f, 0.000000f, -0.035552f, -0.006530f, 0.999346f, 0.000000f, -0.052053f, 0.054742f, -0.004831f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.945518f, 0.325227f, -0.014937f, 0.000000f, -0.325115f, 0.945627f, 0.009478f, 0.000000f, 0.017207f, -0.004105f, 0.999844f, 0.000000f, 0.076852f, 0.003179f, -0.000641f, 1.000000f } },
		{ -70.000000f, { 0.997124f, 0.072894f, -0.020760f, 0.000000f, -0.075609f, 0.937592f, -0.339419f, 0.000000f, -0.005277f, 0.340012f, 0.940406f, 0.000000f, -0.000884f, 0.017097f, 0.084330f, 1.000000f } },
		{ -35.000000f, { 0.999390f, 0.034659f, -0.004283f, 0.000000f, -0.034834f, 0.980629f, -0.192753f, 0.000000f, -0.002481f, 0.192785f, 0.981238f, 0.000000f, -0.000613f, -0.005243f, 0.042730f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999239f, -0.029021f, 0.026065f, 0.000000f, 0.020393f, 0.958274f, 0.285124f, 0.000000f, -0.033252f, -0.284375f, 0.958136f, 0.000000f, -0.000579f, 0.024833f, -0.028607f, 1.000000f } },
		{ -50.000000f, { 0.988294f, -0.002993f, 0.152534f, 0.000000f, -0.003319f, 0.999149f, 0.041106f, 0.000000f, -0.152527f, -0.041131f, 0.987443f, 0.000000f, 0.042208f, 0.001969f, -0.001766f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.930476f, -0.035588f, -0.364619f, 0.000000f, 0.052481f, 0.997954f, 0.036524f, 0.000000f, 0.362573f, -0.053120f, 0.930440f, 0.000000f, -0.014666f, 0.003441f, 0.032059f, 1.000000f } },
		{ -50.000000f, { 0.938584f, -0.341149f, 0.051750f, 0.000000f, 0.342456f, 0.939348f, -0.018668f, 0.000000f, -0.042242f, 0.035244f, 0.998486f, 0.000000f, -0.034980f, 0.038541f, -0.005627f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.986051f, -0.160401f, 0.044439f, 0.000000f, 0.161895f, 0.986278f, -0.032328f, 0.000000f, -0.038643f, 0.039071f, 0.998489f, 0.000000f, 0.063256f, 0.008863f, -0.000598f, 1.000000f } },
		{ -70.000000f, { 0.902257f, -0.350140f, -0.251663f, 0.000000f, 0.257840f, 0.905893f, -0.335971f, 0.000000f, 0.345617f, 0.238244f, 0.907628f, 0.000000f, 0.011609f, 0.009611f, -0.009825f, 1.000000f } },
		{ -35.000000f, { 0.998821f, 0.029335f, 0.038667f, 0.000000f, -0.031572f, 0.997785f, 0.058556f, 0.000000f, -0.036864f, -0.059708f, 0.997535f, 0.000000f, -0.002108f, -0.002612f, 0.000638f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.989190f, -0.140923f, -0.040554f, 0.000000f, 0.138370f, 0.988556f, -0.060088f, 0.000000f, 0.048558f, 0.053827f, 0.997369f, 0.000000f, 0.002866f, 0.002314f, -0.001702f, 1.000000f } },
		{ 70.000000f, { 0.998148f, 0.019404f, -0.057649f, 0.000000f, -0.019670f, 0.999798f, -0.004051f, 0.000000f, 0.057558f, 0.005177f, 0.998329f, 0.000000f, 0.001818f, -0.000346f, -0.000624f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.997233f, -0.015429f, -0.072715f, 0.000000f, 0.005439f, 0.990745f, -0.135628f, 0.000000f, 0.074134f, 0.134857f, 0.988088f, 0.000000f, 0.002247f, 0.003966f, -0.002074f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.998119f, -0.059874f, 0.013157f, 0.000000f, 0.059859f, 0.998206f, 0.001479f, 0.000000f, -0.013222f, -0.000689f, 0.999912f, 0.000000f, -0.000179f, 0.000352f, -0.000587f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.996359f, 0.049224f, -0.069605f, 0.000000f, -0.053245f, 0.996945f, -0.057141f, 0.000000f, 0.066580f, 0.060639f, 0.995937f, 0.000000f, 0.001250f, 0.001900f, -0.000848f, 1.000000f } },
		{ -70.000000f, { 0.998489f, -0.053368f, -0.013081f, 0.000000f, 0.053051f, 0.998315f, -0.023493f, 0.000000f, 0.014313f, 0.022763f, 0.999638f, 0.000000f, 0.001480f, 0.000854f, -0.000541f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.981051f, -0.016018f, 0.193085f, 0.000000f, 0.002951f, 0.997696f, 0.067777f, 0.000000f, -0.193726f, -0.065923f, 0.978838f, 0.000000f, -0.006375f, -0.002002f, 0.001558f, 1.000000f } },
		{ -35.000000f, { 0.656352f, 0.450763f, 0.604992f, 0.000000f, -0.650417f, 0.744420f, 0.150986f, 0.000000f, -0.382309f, -0.492597f, 0.781785f, 0.000000f, 0.075466f, 0.068650f, -0.074591f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.970300f, 0.157203f, -0.183860f, 0.000000f, -0.140340f, 0.984890f, 0.101466f, 0.000000f, 0.197032f, -0.072650f, 0.977702f, 0.000000f, 0.007298f, 0.013879f, 0.081614f, 1.000000f } },
		{ -50.000000f, { 0.971623f, -0.167056f, 0.167453f, 0.000000f, 0.159766f, 0.985554f, 0.056195f, 0.000000f, -0.174422f, -0.027847f, 0.984277f, 0.000000f, -0.036207f, 0.013205f, -0.003212f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.982419f, 0.010409f, 0.186398f, 0.000000f, -0.013217f, 0.999817f, 0.013829f, 0.000000f, -0.186220f, -0.016050f, 0.982377f, 0.000000f, 0.010212f, 0.000588f, -0.002035f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.984712f, 0.025966f, -0.172243f, 0.000000f, -0.028733f, 0.999495f, -0.013595f, 0.000000f, 0.171803f, 0.018336f, 0.984961f, 0.000000f, -0.007704f, -0.001056f, 0.003886f, 1.000000f } },
		{ -35.000000f, { 0.744890f, -0.067988f, -0.663714f, 0.000000f, -0.472402f, 0.648741f, -0.596633f, 0.000000f, 0.471143f, 0.757966f, 0.451123f, 0.000000f, 0.034044f, 0.059794f, -0.034374f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.987900f, 0.082519f, 0.131316f, 0.000000f, -0.098143f, 0.988231f, 0.117334f, 0.000000f, -0.120088f, -0.128801f, 0.984372f, 0.000000f, -0.005792f, -0.010258f, -0.001980f, 1.000000f } },
		{ -50.000000f, { 0.991619f, 0.069795f, 0.108721f, 0.000000f, -0.074461f, 0.996443f, 0.039463f, 0.000000f, -0.105580f, -0.047228f, 0.993289f, 0.000000f, -0.006029f, -0.006550f, -0.001390f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.999693f, 0.005861f, 0.024072f, 0.000000f, -0.012859f, 0.953242f, 0.301933f, 0.000000f, -0.021177f, -0.302150f, 0.953025f, 0.000000f, 0.000350f, 0.007836f, -0.057484f, 1.000000f } },
		{ -35.000000f, { 0.999971f, 0.007038f, -0.003017f, 0.000000f, -0.006462f, 0.986988f, 0.160664f, 0.000000f, 0.004109f, -0.160640f, 0.987005f, 0.000000f, -0.000062f, -0.006447f, -0.028210f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999387f, 0.011337f, 0.033112f, 0.000000f, -0.005658f, 0.985973f, -0.166810f, 0.000000f, -0.034539f, 0.166520f, 0.985433f, 0.000000f, 0.001043f, 0.021542f, 0.014683f, 1.000000f } },
		{ -50.000000f, { 0.982734f, -0.035120f, -0.181661f, 0.000000f, 0.027873f, 0.998716f, -0.042297f, 0.000000f, 0.182914f, 0.036503f, 0.982451f, 0.000000f, 0.008320f, 0.000020f, -0.029371f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.960833f, -0.025675f, 0.275935f, 0.000000f, 0.032490f, 0.999269f, -0.020154f, 0.000000f, -0.275215f, 0.028330f, 0.960965f, 0.000000f, -0.025602f, 0.000549f, 0.004614f, 1.000000f } },
		{ -50.000000f, { 0.967185f, 0.253168f, 0.021443f, 0.000000f, -0.254048f, 0.964856f, 0.067176f, 0.000000f, -0.003682f, -0.070419f, 0.997511f, 0.000000f, 0.019699f, 0.033211f, -0.001200f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.957031f, -0.288704f, -0.027231f, 0.000000f, 0.288659f, 0.957415f, -0.005662f, 0.000000f, 0.027706f, -0.002442f, 0.999613f, 0.000000f, -0.038752f, -0.001820f, 0.000600f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.999923f, 0.012332f, 0.001661f, 0.000000f, -0.012382f, 0.972718f, 0.231660f, 0.000000f, 0.001241f, -0.231663f, 0.972795f, 0.000000f, 0.000122f, -0.002743f, -0.040511f, 1.000000f } },
		{ 100.000000f, { 0.999092f, 0.005854f, 0.042206f, 0.000000f, -0.022670f, 0.911727f, 0.410171f, 0.000000f, -0.036079f, -0.410756f, 0.911031f, 0.000000f, 0.000437f, 0.033691f, -0.071756f, 1.000000f } },
		{ -50.000000f, { 0.091569f, -0.696437f, 0.711751f, 0.000000f, 0.959125f, 0.253870f, 0.125014f, 0.000000f, -0.267757f, 0.671211f, 0.691217f, 0.000000f, -0.009680f, 0.016919f, -0.026638f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.915176f, -0.368837f, -0.162518f, 0.000000f, 0.335638f, 0.920650f, -0.199375f, 0.000000f, 0.223159f, 0.127916f, 0.966353f, 0.000000f, 0.016140f, 0.008306f, -0.025157f, 1.000000f } },
		{ -70.000000f, { 0.913871f, -0.404959f, -0.029132f, 0.000000f, 0.405525f, 0.913925f, 0.017017f, 0.000000f, 0.019733f, -0.027365f, 0.999431f, 0.000000f, -0.050486f, 0.007061f, 0.000779f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.943753f, 0.327966f, 0.042043f, 0.000000f, -0.330611f, 0.937923f, 0.104864f, 0.000000f, -0.005041f, -0.112866f, 0.993597f, 0.000000f, 0.015649f, 0.048090f, 0.001742f, 1.000000f } },
		{ -70.000000f, { 0.975140f, -0.075979f, 0.208159f, 0.000000f, 0.019227f, 0.964849f, 0.262101f, 0.000000f, -0.220756f, -0.251583f, 0.942323f, 0.000000f, 0.007273f, -0.023559f, -0.036909f, 1.000000f } },
		{ -35.000000f, { 0.999245f, 0.003992f, 0.038641f, 0.000000f, -0.008121f, 0.994195f, 0.107284f, 0.000000f, -0.037989f, -0.107517f, 0.993477f, 0.000000f, 0.002086f, -0.016249f, -0.014680f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.851911f, -0.255302f, 0.457240f, 0.000000f, 0.313099f, 0.948188f, -0.053927f, 0.000000f, -0.419782f, 0.189102f, 0.887707f, 0.000000f, 0.045779f, 0.023566f, 0.017911f, 1.000000f } },
		{ 70.000000f, { 0.979092f, -0.193108f, 0.063944f, 0.000000f, 0.172959f, 0.955741f, 0.238003f, 0.000000f, -0.107074f, -0.221967f, 0.969157f, 0.000000f, -0.005081f, 0.053878f, 0.004269f, 1.000000f } },
		{ -50.000000f, { 0.870002f, -0.382157f, 0.311531f, 0.000000f, 0.383712f, 0.921571f, 0.058917f, 0.000000f, -0.309614f, 0.068280f, 0.948408f, 0.000000f, 0.017991f, 0.001368f, 0.002885f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.685459f, -0.294877f, 0.665728f, 0.000000f, 0.235447f, 0.954966f, 0.180567f, 0.000000f, -0.688992f, 0.032972f, 0.724018f, 0.000000f, 0.029870f, 0.003854f, 0.004928f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.784573f, -0.477230f, 0.395849f, 0.000000f, 0.487034f, 0.869441f, 0.082885f, 0.000000f, -0.383723f, 0.127762f, 0.914567f, 0.000000f, 0.038781f, 0.005714f, -0.012380f, 1.000000f } },
		{ -100.000000f, { 0.966246f, 0.217948f, 0.137358f, 0.000000f, -0.225189f, 0.973518f, 0.039405f, 0.000000f, -0.125132f, -0.069006f, 0.989737f, 0.000000f, 0.004750f, -0.005081f, -0.000206f, 1.000000f } },
		{ -50.000000f, { 0.998330f, -0.006947f, -0.057344f, 0.000000f, 0.003885f, 0.998569f, -0.053346f, 0.000000f, 0.057633f, 0.053034f, 0.996928f, 0.000000f, -0.000453f, -0.000716f, 0.002204f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.996871f, -0.018478f, -0.076852f, 0.000000f, 0.016578f, 0.999543f, -0.025284f, 0.000000f, 0.077284f, 0.023931f, 0.996722f, 0.000000f, 0.002993f, 0.003197f, 0.001354f, 1.000000f } },
		{ -50.000000f, { 0.997763f, 0.029355f, -0.060066f, 0.000000f, -0.026426f, 0.998450f, 0.048985f, 0.000000f, 0.061410f, -0.047288f, 0.996992f, 0.000000f, 0.000685f, -0.001048f, 0.005345f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.998032f, 0.044547f, 0.044139f, 0.000000f, -0.059529f, 0.894320f, 0.443451f, 0.000000f, -0.019720f, -0.445205f, 0.895211f, 0.000000f, 0.001305f, -0.004767f, -0.020803f, 1.000000f } },
		{ -35.000000f, { 0.999852f, 0.015322f, 0.007802f, 0.000000f, -0.016714f, 0.972590f, 0.231926f, 0.000000f, -0.004035f, -0.232022f, 0.972702f, 0.000000f, 0.000428f, -0.005090f, -0.010327f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999906f, -0.013140f, -0.003847f, 0.000000f, 0.011849f, 0.971248f, -0.237776f, 0.000000f, 0.006861f, 0.237708f, 0.971312f, 0.000000f, -0.000218f, 0.008899f, 0.007221f, 1.000000f } },
		{ -50.000000f, { 0.954457f, -0.013370f, -0.298049f, 0.000000f, 0.014520f, 0.999893f, 0.001647f, 0.000000f, 0.297995f, -0.005900f, 0.954549f, 0.000000f, -0.001998f, -0.000007f, -0.026601f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.948004f, -0.047496f, 0.314693f, 0.000000f, 0.053762f, 0.998490f, -0.011258f, 0.000000f, -0.313683f, 0.027591f, 0.949127f, 0.000000f, -0.022415f, -0.000068f, 0.020503f, 1.000000f } },
		{ -50.000000f, { 0.933804f, 0.356960f, 0.024287f, 0.000000f, -0.357753f, 0.932476f, 0.050014f, 0.000000f, -0.004794f, -0.055392f, 0.998453f, 0.000000f, 0.000996f, 0.026475f, -0.001352f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.936278f, -0.350974f, 0.014204f, 0.000000f, 0.351111f, 0.936294f, -0.008623f, 0.000000f, -0.010272f, 0.013061f, 0.999862f, 0.000000f, -0.023559f, -0.020098f, -0.000151f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.999626f, 0.025649f, 0.009508f, 0.000000f, -0.027354f, 0.940026f, 0.340004f, 0.000000f, -0.000217f, -0.340137f, 0.940376f, 0.000000f, 0.000777f, -0.005785f, -0.016549f, 1.000000f } },
		{ 100.000000f, { 0.989967f, 0.079378f, 0.116893f, 0.000000f, -0.134695f, 0.780096f, 0.610989f, 0.000000f, -0.042689f, -0.620604f, 0.782961f, 0.000000f, 0.002433f, 0.000053f, -0.029500f, 1.000000f } },
		{ -50.000000f, { 0.687020f, 0.558143f, 0.465274f, 0.000000f, -0.346884f, 0.814558f, -0.464938f, 0.000000f, -0.638494f, 0.158025f, 0.753228f, 0.000000f, -0.005880f, 0.008760f, 0.041056f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.884544f, 0.451494f, -0.117197f, 0.000000f, -0.448107f, 0.892267f, 0.055312f, 0.000000f, 0.129544f, 0.003591f, 0.991567f, 0.000000f, -0.039247f, -0.001383f, -0.023726f, 1.000000f } },
		{ -70.000000f, { 0.869480f, -0.491158f, -0.052619f, 0.000000f, 0.488551f, 0.870784f, -0.055255f, 0.000000f, 0.072958f, 0.022336f, 0.997085f, 0.000000f, -0.039894f, -0.025339f, -0.002976f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.854668f, 0.505239f, 0.119486f, 0.000000f, -0.517709f, 0.846660f, 0.123062f, 0.000000f, -0.038988f, -0.167036f, 0.985180f, 0.000000f, -0.006818f, 0.037604f, 0.000497f, 1.000000f } },
		{ -70.000000f, { 0.993247f, 0.062436f, 0.097787f, 0.000000f, -0.078439f, 0.982410f, 0.169466f, 0.000000f, -0.085486f, -0.175992f, 0.980673f, 0.000000f, 0.004034f, -0.011865f, 0.000584f, 1.000000f } },
		{ -35.000000f, { 0.999820f, 0.013133f, 0.013688f, 0.000000f, -0.014143f, 0.996967f, 0.076523f, 0.000000f, -0.012642f, -0.076703f, 0.996974f, 0.000000f, 0.000909f, -0.005134f, 0.001348f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.809734f, 0.581612f, 0.077833f, 0.000000f, -0.581956f, 0.812961f, -0.020538f, 0.000000f, -0.075221f, -0.028665f, 0.996755f, 0.000000f, 0.009848f, 0.030299f, -0.009559f, 1.000000f } },
		{ 70.000000f, { 0.910657f, 0.056209f, 0.409321f, 0.000000f, -0.057954f, 0.998286f, -0.008152f, 0.000000f, -0.409078f, -0.016298f, 0.912354f, 0.000000f, -0.006564f, 0.022758f, 0.000008f, 1.000000f } },
		{ -50.000000f, { 0.967252f, -0.033406f, 0.251608f, 0.000000f, -0.040969f, 0.957754f, 0.284655f, 0.000000f, -0.250488f, -0.285641f, 0.925022f, 0.000000f, 0.044789f, 0.051841f, -0.001504f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.978601f, 0.201882f, 0.039795f, 0.000000f, -0.205131f, 0.972352f, 0.111593f, 0.000000f, -0.016166f, -0.117368f, 0.992957f, 0.000000f, 0.014555f, 0.008233f, 0.001759f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.993121f, -0.075196f, -0.089757f, 0.000000f, 0.067191f, 0.993754f, -0.089102f, 0.000000f, 0.095896f, 0.082459f, 0.991970f, 0.000000f, -0.002843f, 0.000224f, 0.003570f, 1.000000f } },
		{ -100.000000f, { 0.986522f, 0.163015f, 0.014172f, 0.000000f, -0.162943f, 0.986616f, -0.006129f, 0.000000f, -0.014981f, 0.003738f, 0.999881f, 0.000000f, -0.000345f, 0.003613f, 0.003599f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.996611f, -0.056483f, -0.059797f, 0.000000f, 0.055737f, 0.998346f, -0.014072f, 0.000000f, 0.060493f, 0.010692f, 0.998111f, 0.000000f, 0.002617f, 0.000585f, 0.001419f, 1.000000f } },
		{ -70.000000f, { 0.995777f, -0.049755f, -0.077156f, 0.000000f, 0.049672f, 0.998761f, -0.002992f, 0.000000f, 0.077209f, -0.000853f, 0.997015f, 0.000000f, 0.003778f, -0.000332f, 0.002223f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.996315f, -0.058773f, -0.062470f, 0.000000f, 0.059598f, 0.998157f, 0.011426f, 0.000000f, 0.061683f, -0.015107f, 0.997981f, 0.000000f, 0.003065f, -0.001424f, 0.000704f, 1.000000f } },
		{ -70.000000f, { 0.999676f, -0.004853f, -0.024993f, 0.000000f, 0.012358f, 0.950766f, 0.309664f, 0.000000f, 0.022259f, -0.309872f, 0.950518f, 0.000000f, -0.000461f, 0.007740f, -0.058461f, 1.000000f } },
		{ -35.000000f, { 0.999985f, -0.005437f, 0.000989f, 0.000000f, 0.005204f, 0.986695f, 0.162498f, 0.000000f, -0.001859f, -0.162490f, 0.986708f, 0.000000f, -0.000007f, -0.006801f, -0.028521f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999791f, -0.011647f, -0.016816f, 0.000000f, 0.008723f, 0.986336f, -0.164514f, 0.000000f, 0.018502f, 0.164333f, 0.986231f, 0.000000f, -0.000964f, 0.021926f, 0.014703f, 1.000000f } },
		{ -50.000000f, { 0.962787f, 0.010144f, -0.270072f, 0.000000f, -0.012847f, 0.999883f, -0.008243f, 0.000000f, 0.269956f, 0.011406f, 0.962805f, 0.000000f, 0.024599f, 0.000667f, 0.004125f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.975599f, 0.037572f, 0.216323f, 0.000000f, -0.028422f, 0.998571f, -0.045257f, 0.000000f, -0.217714f, 0.038004f, 0.975272f, 0.000000f, -0.008914f, 0.000393f, -0.028422f, 1.000000f } },
		{ -50.000000f, { 0.955715f, 0.293055f, 0.026979f, 0.000000f, -0.293001f, 0.956093f, -0.006050f, 0.000000f, -0.027567f, -0.002123f, 0.999618f, 0.000000f, 0.038258f, -0.002377f, 0.000087f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.964515f, -0.263843f, -0.009852f, 0.000000f, 0.263964f, 0.962802f, 0.057746f, 0.000000f, -0.005750f, -0.058297f, 0.998283f, 0.000000f, -0.019571f, 0.033106f, -0.001049f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.999927f, -0.008508f, -0.008575f, 0.000000f, 0.010214f, 0.974506f, 0.224129f, 0.000000f, 0.006449f, -0.224200f, 0.974522f, 0.000000f, -0.000048f, -0.003182f, -0.040190f, 1.000000f } },
		{ 100.000000f, { 0.998650f, -0.008176f, -0.051293f, 0.000000f, 0.028567f, 0.911210f, 0.410949f, 0.000000f, 0.043379f, -0.411860f, 0.910214f, 0.000000f, -0.000009f, 0.034023f, -0.071206f, 1.000000f } },
		{ -50.000000f, { 0.896695f, 0.358833f, 0.259184f, 0.000000f, -0.318013f, 0.929526f, -0.186679f, 0.000000f, -0.307905f, 0.084970f, 0.947615f, 0.000000f, -0.017200f, 0.005098f, -0.023268f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.231879f, 0.723444f, -0.650277f, 0.000000f, -0.902766f, 0.409013f, 0.133121f, 0.000000f, 0.362278f, 0.556180f, 0.747943f, 0.000000f, 0.008967f, 0.026825f, -0.030173f, 1.000000f } },
		{ -70.000000f, { 0.939978f, -0.336886f, -0.054314f, 0.000000f, 0.340960f, 0.933643f, 0.109805f, 0.000000f, 0.013718f, -0.121733f, 0.992468f, 0.000000f, -0.015210f, 0.046912f, 0.003514f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.918626f, 0.392462f, 0.045829f, 0.000000f, -0.392907f, 0.919578f, 0.000761f, 0.000000f, -0.041845f, -0.018706f, 0.998949f, 0.000000f, 0.049230f, 0.006369f, -0.001409f, 1.000000f } },
		{ -70.000000f, { 0.968159f, 0.087599f, -0.234511f, 0.000000f, -0.012675f, 0.952730f, 0.303553f, 0.000000f, 0.250017f, -0.290915f, 0.923504f, 0.000000f, -0.006787f, -0.024099f, -0.039446f, 1.000000f } },
		{ -35.000000f, { 0.998774f, -0.004554f, -0.049283f, 0.000000f, 0.010960f, 0.991385f, 0.130520f, 0.000000f, 0.048264f, -0.130900f, 0.990220f, 0.000000f, -0.001922f, -0.016262f, -0.015672f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.904268f, 0.120814f, -0.409516f, 0.000000f, -0.164995f, 0.983501f, -0.074182f, 0.000000f, 0.393797f, 0.134648f, 0.909282f, 0.000000f, -0.048907f, 0.024302f, 0.024201f, 1.000000f } },
		{ 70.000000f, { 0.931339f, 0.273562f, -0.240359f, 0.000000f, -0.203384f, 0.938265f, 0.279809f, 0.000000f, 0.302065f, -0.211712f, 0.929481f, 0.000000f, 0.012279f, 0.048104f, -0.003348f, 1.000000f } },
		{ -50.000000f, { 0.887582f, 0.402017f, -0.224900f, 0.000000f, -0.376912f, 0.914483f, 0.147165f, 0.000000f, 0.264830f, -0.045853f, 0.963204f, 0.000000f, -0.017717f, 0.000420f, 0.003823f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.664915f, 0.327434f, -0.671323f, 0.000000f, -0.227445f, 0.944866f, 0.235579f, 0.000000f, 0.711447f, -0.003951f, 0.702729f, 0.000000f, -0.030240f, 0.003525f, 0.005929f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.917994f, 0.383515f, -0.101009f, 0.000000f, -0.383409f, 0.923334f, 0.021236f, 0.000000f, 0.101410f, 0.019234f, 0.994659f, 0.000000f, -0.048086f, 0.004169f, -0.009162f, 1.000000f } },
		{ -100.000000f, { 0.956912f, -0.253600f, -0.141448f, 0.000000f, 0.269178f, 0.957403f, 0.104508f, 0.000000f, 0.108920f, -0.138080f, 0.984414f, 0.000000f, -0.007453f, -0.004563f, -0.001774f, 1.000000f } },
		{ -50.000000f, { 0.997411f, 0.001976f, 0.071889f, 0.000000f, 0.002283f, 0.998249f, -0.059107f, 0.000000f, -0.071880f, 0.059118f, 0.995660f, 0.000000f, -0.000300f, -0.000749f, 0.002331f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.997608f, -0.038469f, -0.057424f, 0.000000f, 0.057847f, 0.919401f, 0.389043f, 0.000000f, 0.037829f, -0.391435f, 0.919428f, 0.000000f, -0.001735f, -0.005091f, -0.020102f, 1.000000f } },
		{ -35.000000f, { 0.999865f, -0.012619f, -0.010550f, 0.000000f, 0.014515f, 0.978639f, 0.205075f, 0.000000f, 0.007737f, -0.205201f, 0.978689f, 0.000000f, -0.000499f, -0.004707f, -0.009638f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999977f, -0.002908f, -0.006096f, 0.000000f, 0.001538f, 0.976891f, -0.213732f, 0.000000f, 0.006576f, 0.213718f, 0.976873f, 0.000000f, -0.000021f, 0.007490f, 0.006792f, 1.000000f } },
		{ -50.000000f, { 0.963253f, 0.060272f, -0.261747f, 0.000000f, -0.066208f, 0.997709f, -0.013910f, 0.000000f, 0.260309f, 0.030729f, 0.965036f, 0.000000f, 0.020072f, -0.000500f, 0.018383f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.966585f, -0.007058f, 0.256248f, 0.000000f, 0.004773f, 0.999943f, 0.009538f, 0.000000f, -0.256300f, -0.007996f, 0.966564f, 0.000000f, 0.001170f, 0.000171f, -0.024726f, 1.000000f } },
		{ -50.000000f, { 0.942540f, 0.334091f, -0.000956f, 0.000000f, -0.334077f, 0.942466f, -0.012271f, 0.000000f, -0.003199f, 0.011885f, 0.999924f, 0.000000f, 0.021826f, -0.019309f, 0.000005f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.942977f, -0.332820f, -0.005040f, 0.000000f, 0.332767f, 0.942254f, 0.037729f, 0.000000f, -0.007808f, -0.037255f, 0.999275f, 0.000000f, -0.002037f, 0.024360f, -0.001122f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.999709f, -0.021412f, -0.011150f, 0.000000f, 0.023827f, 0.949444f, 0.313030f, 0.000000f, 0.003883f, -0.313205f, 0.949678f, 0.000000f, -0.000812f, -0.005467f, -0.016766f, 1.000000f } },
		{ 100.000000f, { 0.988867f, -0.067349f, -0.132689f, 0.000000f, 0.131322f, 0.814332f, 0.565348f, 0.000000f, 0.069977f, -0.576479f, 0.814110f, 0.000000f, -0.003493f, -0.000067f, -0.031821f, 1.000000f } },
		{ -50.000000f, { 0.879589f, -0.469018f, -0.079653f, 0.000000f, 0.474224f, 0.877749f, 0.068327f, 0.000000f, 0.037869f, -0.097873f, 0.994478f, 0.000000f, 0.033715f, -0.002051f, -0.030374f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.532317f, -0.495453f, -0.686414f, 0.000000f, 0.439390f, 0.854773f, -0.276226f, 0.000000f, 0.723585f, -0.154564f, 0.672707f, 0.000000f, 0.015802f, 0.000522f, 0.047793f, 1.000000f } },
		{ -70.000000f, { 0.868414f, -0.489801f, -0.077145f, 0.000000f, 0.495838f, 0.857477f, 0.137399f, 0.000000f, -0.001148f, -0.157570f, 0.987507f, 0.000000f, 0.005169f, 0.038492f, 0.000233f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.868424f, 0.486218f, 0.097118f, 0.000000f, -0.478516f, 0.873176f, -0.092663f, 0.000000f, -0.129855f, 0.033998f, 0.990950f, 0.000000f, 0.040242f, -0.027127f, -0.002275f, 1.000000f } },
		{ -70.000000f, { 0.998605f, -0.044243f, -0.028825f, 0.000000f, 0.046721f, 0.994673f, 0.091881f, 0.000000f, 0.024606f, -0.093099f, 0.995353f, 0.000000f, -0.002785f, -0.011352f, 0.000936f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.811530f, -0.584067f, 0.016884f, 0.000000f, 0.579896f, 0.808606f, 0.099384f, 0.000000f, -0.071700f, -0.070862f, 0.994906f, 0.000000f, -0.010141f, 0.029583f, -0.010194f, 1.000000f } },
		{ 70.000000f, { 0.972818f, -0.064928f, -0.222284f, 0.000000f, 0.047957f, 0.995566f, -0.080917f, 0.000000f, 0.226553f, 0.068057f, 0.971618f, 0.000000f, 0.005439f, 0.021377f, -0.000293f, 1.000000f } },
		{ -50.000000f, { 0.956777f, 0.005386f, -0.290773f, 0.000000f, 0.093193f, 0.941426f, 0.324087f, 0.000000f, 0.275486f, -0.337177f, 0.900233f, 0.000000f, -0.041683f, 0.049537f, -0.002847f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.968350f, -0.249166f, 0.014640f, 0.000000f, 0.246469f, 0.963828f, 0.101435f, 0.000000f, -0.039384f, -0.094616f, 0.994734f, 0.000000f, -0.011962f, 0.007739f, -0.000996f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.999291f, -0.014673f, 0.034678f, 0.000000f, 0.017739f, 0.995801f, -0.089811f, 0.000000f, -0.033215f, 0.090362f, 0.995355f, 0.000000f, 0.002045f, -0.001593f, 0.004422f, 1.000000f } },
		{ -100.000000f, { 0.996201f, -0.086183f, 0.012534f, 0.000000f, 0.086391f, 0.996114f, -0.017146f, 0.000000f, -0.011007f, 0.018164f, 0.999774f, 0.000000f, 0.000200f, 0.002536f, 0.002306f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.999708f, 0.003623f, 0.023892f, 0.000000f, -0.002203f, 0.998245f, -0.059178f, 0.000000f, -0.024065f, 0.059109f, 0.997961f, 0.000000f, 0.000581f, 0.001322f, -0.005605f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 100.000000f, { 0.999071f, 0.003643f, 0.042938f, 0.000000f, 0.000188f, 0.996043f, -0.088875f, 0.000000f, -0.043092f, 0.088800f, 0.995117f, 0.000000f, 0.001662f, 0.002338f, -0.008073f, 1.000000f } },
		{ -50.000000f, { 0.995534f, -0.080179f, 0.049831f, 0.000000f, 0.090187f, 0.963755f, -0.251083f, 0.000000f, -0.027893f, 0.254456f, 0.966682f, 0.000000f, 0.019909f, -0.004548f, -0.012019f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.996716f, -0.062070f, -0.052012f, 0.000000f, 0.062538f, 0.998015f, 0.007421f, 0.000000f, 0.051448f, -0.010650f, 0.998619f, 0.000000f, 0.003364f, 0.000309f, 0.001167f, 1.000000f } },
		{ -70.000000f, { 0.998512f, -0.018977f, 0.051128f, 0.000000f, -0.001305f, 0.928919f, 0.370281f, 0.000000f, -0.054521f, -0.369796f, 0.927512f, 0.000000f, 0.002181f, -0.009704f, 0.019591f, 1.000000f } },
		{ -35.000000f, { 0.999987f, -0.004730f, 0.001749f, 0.000000f, 0.004336f, 0.983545f, 0.180609f, 0.000000f, -0.002574f, -0.180599f, 0.983553f, 0.000000f, 0.000922f, -0.004886f, 0.009356f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.876244f, 0.097639f, 0.471872f, 0.000000f, 0.315162f, 0.624641f, -0.714491f, 0.000000f, -0.364512f, 0.774784f, 0.516566f, 0.000000f, 0.033250f, -0.017699f, -0.022909f, 1.000000f } },
		{ 70.000000f, { 0.977071f, 0.186876f, 0.102030f, 0.000000f, -0.097392f, 0.818407f, -0.566325f, 0.000000f, -0.189335f, 0.543403f, 0.817842f, 0.000000f, 0.000831f, -0.004334f, -0.028916f, 1.000000f } },
		{ -50.000000f, { 0.836235f, 0.023284f, -0.547877f, 0.000000f, -0.144612f, 0.973095f, -0.179369f, 0.000000f, 0.528960f, 0.229225f, 0.817103f, 0.000000f, -0.061102f, -0.018907f, -0.033380f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.791917f, 0.304495f, 0.529292f, 0.000000f, -0.470063f, 0.857254f, 0.210133f, 0.000000f, -0.389753f, -0.415208f, 0.822006f, 0.000000f, -0.030754f, -0.005106f, 0.041911f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.995913f, -0.086988f, 0.024297f, 0.000000f, 0.087053f, 0.996202f, -0.001648f, 0.000000f, -0.024061f, 0.003756f, 0.999703f, 0.000000f, -0.005766f, 0.001457f, -0.000886f, 1.000000f } },
		{ -100.000000f, { 0.993360f, 0.091380f, -0.069895f, 0.000000f, -0.091990f, 0.995744f, -0.005559f, 0.000000f, 0.069090f, 0.011952f, 0.997539f, 0.000000f, -0.027189f, 0.010247f, 0.005214f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.999528f, 0.008906f, 0.029385f, 0.000000f, -0.006955f, 0.997806f, -0.065841f, 0.000000f, -0.029907f, 0.065606f, 0.997397f, 0.000000f, -0.000696f, -0.002593f, 0.006183f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 100.000000f, { 0.998556f, 0.015419f, 0.051460f, 0.000000f, -0.010392f, 0.995273f, -0.096563f, 0.000000f, -0.052706f, 0.095888f, 0.993996f, 0.000000f, -0.001746f, -0.004271f, 0.008188f, 1.000000f } },
		{ -50.000000f, { 0.997500f, -0.068404f, -0.017758f, 0.000000f, 0.068750f, 0.997440f, 0.019664f, 0.000000f, 0.016367f, -0.020836f, 0.999649f, 0.000000f, -0.006568f, -0.004124f, -0.002849f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.994142f, 0.008218f, 0.107768f, 0.000000f, 0.008904f, 0.987488f, -0.157442f, 0.000000f, -0.107713f, 0.157480f, 0.981630f, 0.000000f, -0.011832f, -0.004407f, 0.004388f, 1.000000f } },
		{ -70.000000f, { 0.998538f, -0.015829f, 0.051687f, 0.000000f, -0.003858f, 0.932858f, 0.360223f, 0.000000f, -0.053919f, -0.359896f, 0.931433f, 0.000000f, -0.002291f, 0.007806f, -0.018841f, 1.000000f } },
		{ -35.000000f, { 0.999984f, -0.004602f, 0.003292f, 0.000000f, 0.003961f, 0.984838f, 0.173433f, 0.000000f, -0.004040f, -0.173417f, 0.984840f, 0.000000f, -0.000817f, 0.004204f, -0.008673f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.896123f, 0.137092f, 0.422101f, 0.000000f, 0.241689f, 0.646941f, -0.723225f, 0.000000f, -0.372222f, 0.750116f, 0.546605f, 0.000000f, -0.027412f, 0.016946f, 0.024449f, 1.000000f } },
		{ 70.000000f, { 0.980056f, 0.185932f, 0.070135f, 0.000000f, -0.112804f, 0.811091f, -0.573939f, 0.000000f, -0.163600f, 0.554581f, 0.815889f, 0.000000f, 0.002647f, 0.005258f, 0.028926f, 1.000000f } },
		{ -50.000000f, { 0.845825f, 0.030740f, -0.532574f, 0.000000f, -0.138923f, 0.976584f, -0.164267f, 0.000000f, 0.515054f, 0.212928f, 0.830290f, 0.000000f, 0.058964f, 0.018402f, 0.032642f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.791192f, 0.309230f, 0.527628f, 0.000000f, -0.466969f, 0.862573f, 0.194698f, 0.000000f, -0.394911f, -0.400430f, 0.826862f, 0.000000f, 0.026722f, 0.003102f, -0.038950f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.994441f, -0.076031f, 0.072847f, 0.000000f, 0.076357f, 0.997079f, -0.001691f, 0.000000f, -0.072506f, 0.007244f, 0.997342f, 0.000000f, 0.002728f, -0.001368f, 0.000407f, 1.000000f } },
		{ -100.000000f, { 0.993095f, 0.100199f, -0.061008f, 0.000000f, -0.101139f, 0.994794f, -0.012519f, 0.000000f, 0.059436f, 0.018603f, 0.998059f, 0.000000f, 0.026745f, -0.008890f, -0.006020f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
	};

	OrbisAnim::CommandBlock::ExecuteCommandInterpolateMatrix1DImpl(&hierarchyHeader, &params, s_entries, s_stateData);
}

static void HierarchyParentingCommand_Seg3Cmd2(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0010, 0x14F0 + 3 },	// Child[178]: m_brow_02_bind, Parent[129]: brow_grp
		{ 0x0020, 0x14F0 + 3 },	// Child[179]: m_brow_03_bind, Parent[129]: brow_grp
		{ 0x0030, 0x14F0 + 3 },	// Child[180]: m_brow_06_bind, Parent[129]: brow_grp
		{ 0x0040, 0x14F0 + 3 },	// Child[181]: l_brow_01_bind, Parent[129]: brow_grp
		{ 0x0050, 0x14F0 + 3 },	// Child[182]: l_brow_03_bind, Parent[129]: brow_grp
		{ 0x0060, 0x14F0 + 3 },	// Child[183]: l_brow_05_bind, Parent[129]: brow_grp
		{ 0x0070, 0x14F0 + 3 },	// Child[184]: l_brow_06_bind, Parent[129]: brow_grp
		{ 0x0080, 0x14F0 + 3 },	// Child[185]: l_brow_20_bind, Parent[129]: brow_grp
		{ 0x0090, 0x14F0 + 3 },	// Child[186]: l_brow_23_bind, Parent[129]: brow_grp
		{ 0x00A0, 0x14F0 + 3 },	// Child[187]: l_brow_33_bind, Parent[129]: brow_grp
		{ 0x00B0, 0x14F0 + 3 },	// Child[188]: l_brow_34_bind, Parent[129]: brow_grp
		{ 0x00C0, 0x14F0 + 3 },	// Child[189]: l_brow_36_bind, Parent[129]: brow_grp
		{ 0x00D0, 0x14F0 + 3 },	// Child[190]: l_brow_41_bind, Parent[129]: brow_grp
		{ 0x00E0, 0x14F0 + 3 },	// Child[191]: r_brow_01_bind, Parent[129]: brow_grp
		{ 0x00F0, 0x14F0 + 3 },	// Child[192]: r_brow_03_bind, Parent[129]: brow_grp
		{ 0x0100, 0x14F0 + 3 },	// Child[193]: r_brow_05_bind, Parent[129]: brow_grp
		{ 0x0110, 0x14F0 + 3 },	// Child[194]: r_brow_06_bind, Parent[129]: brow_grp
		{ 0x0120, 0x14F0 + 3 },	// Child[195]: r_brow_20_bind, Parent[129]: brow_grp
		{ 0x0130, 0x14F0 + 3 },	// Child[196]: r_brow_23_bind, Parent[129]: brow_grp
		{ 0x0140, 0x14F0 + 3 },	// Child[197]: r_brow_33_bind, Parent[129]: brow_grp
		{ 0x0150, 0x14F0 + 3 },	// Child[198]: r_brow_34_bind, Parent[129]: brow_grp
		{ 0x0160, 0x14F0 + 3 },	// Child[199]: r_brow_36_bind, Parent[129]: brow_grp
		{ 0x0170, 0x14F0 + 3 },	// Child[200]: r_brow_41_bind, Parent[129]: brow_grp
		{ 0x0180, 0x1530 + 3 },	// Child[201]: m_mouth_02_bind, Parent[159]: mouth_grp
		{ 0x0190, 0x1530 + 3 },	// Child[202]: m_mouth_05_bind, Parent[159]: mouth_grp
		{ 0x01A0, 0x1530 + 3 },	// Child[203]: m_mouth_08_bind, Parent[159]: mouth_grp
		{ 0x01B0, 0x1530 + 3 },	// Child[204]: m_mouth_09_bind, Parent[159]: mouth_grp
		{ 0x01C0, 0x1530 + 3 },	// Child[205]: m_mouth_11_bind, Parent[159]: mouth_grp
		{ 0x01D0, 0x1530 + 3 },	// Child[206]: m_mouth_13_bind, Parent[159]: mouth_grp
		{ 0x01E0, 0x1530 + 3 },	// Child[207]: l_mouth_02_bind, Parent[159]: mouth_grp
		{ 0x01F0, 0x1530 + 3 },	// Child[208]: l_mouth_04_bind, Parent[159]: mouth_grp
		{ 0x0200, 0x1530 + 3 },	// Child[209]: l_mouth_06_bind, Parent[159]: mouth_grp
		{ 0x0210, 0x1530 + 3 },	// Child[210]: l_mouth_08_bind, Parent[159]: mouth_grp
		{ 0x0220, 0x1530 + 3 },	// Child[211]: l_mouth_12_bind, Parent[159]: mouth_grp
		{ 0x0230, 0x1530 + 3 },	// Child[212]: l_mouth_27_bind, Parent[159]: mouth_grp
		{ 0x0240, 0x1530 + 3 },	// Child[213]: l_mouth_39_bind, Parent[159]: mouth_grp
		{ 0x0250, 0x1530 + 3 },	// Child[214]: l_mouth_42_bind, Parent[159]: mouth_grp
		{ 0x0260, 0x1530 + 3 },	// Child[215]: r_mouth_02_bind, Parent[159]: mouth_grp
		{ 0x0270, 0x1530 + 3 },	// Child[216]: r_mouth_04_bind, Parent[159]: mouth_grp
		{ 0x0280, 0x1530 + 3 },	// Child[217]: r_mouth_06_bind, Parent[159]: mouth_grp
		{ 0x0290, 0x1530 + 3 },	// Child[218]: r_mouth_08_bind, Parent[159]: mouth_grp
		{ 0x02A0, 0x1530 + 3 },	// Child[219]: r_mouth_12_bind, Parent[159]: mouth_grp
		{ 0x02B0, 0x1530 + 3 },	// Child[220]: r_mouth_27_bind, Parent[159]: mouth_grp
		{ 0x02C0, 0x1530 + 3 },	// Child[221]: r_mouth_39_bind, Parent[159]: mouth_grp
		{ 0x02D0, 0x1530 + 3 },	// Child[222]: r_mouth_42_bind, Parent[159]: mouth_grp
		{ 0x02D0, 0x1530 + 3 },	// Child[222]: r_mouth_42_bind, Parent[159]: mouth_grp
		{ 0x02D0, 0x1530 + 3 },	// Child[222]: r_mouth_42_bind, Parent[159]: mouth_grp
		{ 0x02D0, 0x1530 + 3 }	// Child[222]: r_mouth_42_bind, Parent[159]: mouth_grp
	};

	OrbisAnim_Parenting(12, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

// l_shoulder_helperBend_pose_02_mm
static void NdiMultMatrixCommand_Seg3Cmd3(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		17,
		0,
		OrbisAnim::Location(0x0002)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.036987f, 0.082914f, 0.107166f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x0042),
		OrbisAnim::Location(0x0082),
		OrbisAnim::Location(0x00C2),
		OrbisAnim::Location(0x0102),
		OrbisAnim::Location(0x0142),
		OrbisAnim::Location(0x0182),
		OrbisAnim::Location(0x01C2),
		OrbisAnim::Location(0x0202),
		OrbisAnim::Location(0x0242),
		OrbisAnim::Location(0x0282),
		OrbisAnim::Location(0x02C2),
		OrbisAnim::Location(0x0302),
		OrbisAnim::Location(0x0342),
		OrbisAnim::Location(0x0382),
		OrbisAnim::Location(0x03C2),
		OrbisAnim::Location(0x0402),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_shoulder_helperBend_pose_02_mm
static void NdiMultMatrixCommand_Seg3Cmd4(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		17,
		0,
		OrbisAnim::Location(0x0442)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		-0.000000f, 1.000000f, 0.000000f, 0.000000f,
		-0.000000f, -0.000000f, 1.000000f, 0.000000f,
		-0.000000f, -0.000000f, -0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.036987f, -0.082914f, -0.107166f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x0482),
		OrbisAnim::Location(0x04C2),
		OrbisAnim::Location(0x0502),
		OrbisAnim::Location(0x0542),
		OrbisAnim::Location(0x0582),
		OrbisAnim::Location(0x05C2),
		OrbisAnim::Location(0x0602),
		OrbisAnim::Location(0x0642),
		OrbisAnim::Location(0x0682),
		OrbisAnim::Location(0x06C2),
		OrbisAnim::Location(0x0702),
		OrbisAnim::Location(0x0742),
		OrbisAnim::Location(0x0782),
		OrbisAnim::Location(0x07C2),
		OrbisAnim::Location(0x0802),
		OrbisAnim::Location(0x0842),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// spine_c_helper_pose_01_mm
static void NdiMultMatrixCommand_Seg3Cmd5(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		21,
		0,
		OrbisAnim::Location(0x0882)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.087499f, -0.216034f, 0.100461f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x08C2),
		OrbisAnim::Location(0x0902),
		OrbisAnim::Location(0x0942),
		OrbisAnim::Location(0x0982),
		OrbisAnim::Location(0x09C2),
		OrbisAnim::Location(0x0A02),
		OrbisAnim::Location(0x0A42),
		OrbisAnim::Location(0x0A82),
		OrbisAnim::Location(0x0AC2),
		OrbisAnim::Location(0x0B02),
		OrbisAnim::Location(0x0B42),
		OrbisAnim::Location(0x0B82),
		OrbisAnim::Location(0x0BC2),
		OrbisAnim::Location(0x0C02),
		OrbisAnim::Location(0x0C42),
		OrbisAnim::Location(0x0C82),
		OrbisAnim::Location(0x0CC2),
		OrbisAnim::Location(0x0D02),
		OrbisAnim::Location(0x0D42),
		OrbisAnim::Location(0x0D82),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// spine_c_helper_pose_02_mm
static void NdiMultMatrixCommand_Seg3Cmd6(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		21,
		0,
		OrbisAnim::Location(0x0DC2)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.087499f, -0.216034f, 0.100461f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x0E02),
		OrbisAnim::Location(0x0E42),
		OrbisAnim::Location(0x0E82),
		OrbisAnim::Location(0x0EC2),
		OrbisAnim::Location(0x0F02),
		OrbisAnim::Location(0x0F42),
		OrbisAnim::Location(0x0F82),
		OrbisAnim::Location(0x0FC2),
		OrbisAnim::Location(0x1002),
		OrbisAnim::Location(0x1042),
		OrbisAnim::Location(0x1082),
		OrbisAnim::Location(0x10C2),
		OrbisAnim::Location(0x1102),
		OrbisAnim::Location(0x1142),
		OrbisAnim::Location(0x1182),
		OrbisAnim::Location(0x11C2),
		OrbisAnim::Location(0x1202),
		OrbisAnim::Location(0x1242),
		OrbisAnim::Location(0x1282),
		OrbisAnim::Location(0x12C2),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// spine_a_helper_pose_01_mm
static void NdiMultMatrixCommand_Seg3Cmd7(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		13,
		0,
		OrbisAnim::Location(0x1302)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.081366f, -0.138543f, 0.089592f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x1342),
		OrbisAnim::Location(0x1382),
		OrbisAnim::Location(0x13C2),
		OrbisAnim::Location(0x1402),
		OrbisAnim::Location(0x1442),
		OrbisAnim::Location(0x1482),
		OrbisAnim::Location(0x14C2),
		OrbisAnim::Location(0x1502),
		OrbisAnim::Location(0x1542),
		OrbisAnim::Location(0x1582),
		OrbisAnim::Location(0x15C2),
		OrbisAnim::Location(0x1602),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// spine_a_helper_pose_02_mm
static void NdiMultMatrixCommand_Seg3Cmd8(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		13,
		0,
		OrbisAnim::Location(0x1642)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.081763f, -0.038368f, 0.033609f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x1682),
		OrbisAnim::Location(0x16C2),
		OrbisAnim::Location(0x1702),
		OrbisAnim::Location(0x1742),
		OrbisAnim::Location(0x1782),
		OrbisAnim::Location(0x17C2),
		OrbisAnim::Location(0x1802),
		OrbisAnim::Location(0x1842),
		OrbisAnim::Location(0x1882),
		OrbisAnim::Location(0x18C2),
		OrbisAnim::Location(0x1902),
		OrbisAnim::Location(0x1942),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// spine_a_helper_pose_03_mm
static void NdiMultMatrixCommand_Seg3Cmd9(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		11,
		0,
		OrbisAnim::Location(0x1982)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.081366f, -0.138543f, 0.089592f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x19C2),
		OrbisAnim::Location(0x1A02),
		OrbisAnim::Location(0x1A42),
		OrbisAnim::Location(0x1A82),
		OrbisAnim::Location(0x1AC2),
		OrbisAnim::Location(0x1B02),
		OrbisAnim::Location(0x1B42),
		OrbisAnim::Location(0x1B82),
		OrbisAnim::Location(0x1BC2),
		OrbisAnim::Location(0x1C02),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// spine_a_helper_pose_04_mm
static void NdiMultMatrixCommand_Seg3Cmd10(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		11,
		0,
		OrbisAnim::Location(0x1C42)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.081763f, -0.038368f, 0.033609f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x1C82),
		OrbisAnim::Location(0x1CC2),
		OrbisAnim::Location(0x1D02),
		OrbisAnim::Location(0x1D42),
		OrbisAnim::Location(0x1D82),
		OrbisAnim::Location(0x1DC2),
		OrbisAnim::Location(0x1E02),
		OrbisAnim::Location(0x1E42),
		OrbisAnim::Location(0x1E82),
		OrbisAnim::Location(0x1EC2),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_hip_helperTwist_weighted_01_pose_01_mm
static void NdiMultMatrixCommand_Seg3Cmd11(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		8,
		0,
		OrbisAnim::Location(0x1F02)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.002099f, 0.074121f, -0.011615f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x1F42),
		OrbisAnim::Location(0x1F82),
		OrbisAnim::Location(0x1FC2),
		OrbisAnim::Location(0x2002),
		OrbisAnim::Location(0x2042),
		OrbisAnim::Location(0x2082),
		OrbisAnim::Location(0x20C2),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_hip_helperTwist_weighted_01_pose_01_mm
static void NdiMultMatrixCommand_Seg3Cmd12(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		8,
		0,
		OrbisAnim::Location(0x2102)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.002099f, -0.074121f, 0.011615f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x2142),
		OrbisAnim::Location(0x2182),
		OrbisAnim::Location(0x21C2),
		OrbisAnim::Location(0x2202),
		OrbisAnim::Location(0x2242),
		OrbisAnim::Location(0x2282),
		OrbisAnim::Location(0x22C2),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_shoulder_helperBend_pose_02_decMat
static void NdiDecomposeMatrixCommand_Seg3Cmd13(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0002),
		{
			OrbisAnim::Location(0x237A),
			OrbisAnim::Location(0x237E),
			OrbisAnim::Location(0x2382),
		},
		{
			OrbisAnim::Location(0x2386),
			OrbisAnim::Location(0x238A),
			OrbisAnim::Location(0x238E),
		},
		{
			OrbisAnim::Location(0x2392),
			OrbisAnim::Location(0x2396),
			OrbisAnim::Location(0x239A)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_shoulder_helperBend_pose_02_decMat
static void NdiDecomposeMatrixCommand_Seg3Cmd14(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0442),
		{
			OrbisAnim::Location(0x239E),
			OrbisAnim::Location(0x23A2),
			OrbisAnim::Location(0x23A6),
		},
		{
			OrbisAnim::Location(0x23AA),
			OrbisAnim::Location(0x23AE),
			OrbisAnim::Location(0x23B2),
		},
		{
			OrbisAnim::Location(0x23B6),
			OrbisAnim::Location(0x23BA),
			OrbisAnim::Location(0x23BE)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// spine_c_helper_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg3Cmd15(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0882),
		{
			OrbisAnim::Location(0x23C2),
			OrbisAnim::Location(0x23C6),
			OrbisAnim::Location(0x23CA),
		},
		{
			OrbisAnim::Location(0x23CE),
			OrbisAnim::Location(0x23D2),
			OrbisAnim::Location(0x23D6),
		},
		{
			OrbisAnim::Location(0x23DA),
			OrbisAnim::Location(0x23DE),
			OrbisAnim::Location(0x23E2)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// spine_c_helper_pose_02_decMat
static void NdiDecomposeMatrixCommand_Seg3Cmd16(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0DC2),
		{
			OrbisAnim::Location(0x23E6),
			OrbisAnim::Location(0x23EA),
			OrbisAnim::Location(0x23EE),
		},
		{
			OrbisAnim::Location(0x23F2),
			OrbisAnim::Location(0x23F6),
			OrbisAnim::Location(0x23FA),
		},
		{
			OrbisAnim::Location(0x23FE),
			OrbisAnim::Location(0x2402),
			OrbisAnim::Location(0x2406)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// spine_a_helper_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg3Cmd17(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x1302),
		{
			OrbisAnim::Location(0x240A),
			OrbisAnim::Location(0x240E),
			OrbisAnim::Location(0x2412),
		},
		{
			OrbisAnim::Location(0x2416),
			OrbisAnim::Location(0x241A),
			OrbisAnim::Location(0x241E),
		},
		{
			OrbisAnim::Location(0x2422),
			OrbisAnim::Location(0x2426),
			OrbisAnim::Location(0x242A)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// spine_a_helper_pose_02_decMat
static void NdiDecomposeMatrixCommand_Seg3Cmd18(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x1642),
		{
			OrbisAnim::Location(0x242E),
			OrbisAnim::Location(0x2432),
			OrbisAnim::Location(0x2436),
		},
		{
			OrbisAnim::Location(0x243A),
			OrbisAnim::Location(0x243E),
			OrbisAnim::Location(0x2442),
		},
		{
			OrbisAnim::Location(0x2446),
			OrbisAnim::Location(0x244A),
			OrbisAnim::Location(0x244E)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// spine_a_helper_pose_03_decMat
static void NdiDecomposeMatrixCommand_Seg3Cmd19(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x1982),
		{
			OrbisAnim::Location(0x2452),
			OrbisAnim::Location(0x2456),
			OrbisAnim::Location(0x245A),
		},
		{
			OrbisAnim::Location(0x245E),
			OrbisAnim::Location(0x2462),
			OrbisAnim::Location(0x2466),
		},
		{
			OrbisAnim::Location(0x246A),
			OrbisAnim::Location(0x246E),
			OrbisAnim::Location(0x2472)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// spine_a_helper_pose_04_decMat
static void NdiDecomposeMatrixCommand_Seg3Cmd20(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x1C42),
		{
			OrbisAnim::Location(0x2476),
			OrbisAnim::Location(0x247A),
			OrbisAnim::Location(0x247E),
		},
		{
			OrbisAnim::Location(0x2482),
			OrbisAnim::Location(0x2486),
			OrbisAnim::Location(0x248A),
		},
		{
			OrbisAnim::Location(0x248E),
			OrbisAnim::Location(0x2492),
			OrbisAnim::Location(0x2496)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_hip_helperTwist_weighted_01_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg3Cmd21(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x1F02),
		{
			OrbisAnim::Location(0x249A),
			OrbisAnim::Location(0x249E),
			OrbisAnim::Location(0x24A2),
		},
		{
			OrbisAnim::Location(0x24A6),
			OrbisAnim::Location(0x24AA),
			OrbisAnim::Location(0x24AE),
		},
		{
			OrbisAnim::Location(0x24B2),
			OrbisAnim::Location(0x24B6),
			OrbisAnim::Location(0x24BA)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_hip_helperTwist_weighted_01_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg3Cmd22(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x2102),
		{
			OrbisAnim::Location(0x24BE),
			OrbisAnim::Location(0x24C2),
			OrbisAnim::Location(0x24C6),
		},
		{
			OrbisAnim::Location(0x24CA),
			OrbisAnim::Location(0x24CE),
			OrbisAnim::Location(0x24D2),
		},
		{
			OrbisAnim::Location(0x24D6),
			OrbisAnim::Location(0x24DA),
			OrbisAnim::Location(0x24DE)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

static void HierarchyCopyCommand_Seg3Cmd23(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locJointParams + 0x0890) = *(float*)(locSdkScalarTable + 0x2378);
	*(float*)(locJointParams + 0x0894) = *(float*)(locSdkScalarTable + 0x237C);
	*(float*)(locJointParams + 0x0898) = *(float*)(locSdkScalarTable + 0x2380);
	*(float*)(locSdkScalarTable + 0x2300) = *(float*)(locSdkScalarTable + 0x2384);
	*(float*)(locSdkScalarTable + 0x2328) = *(float*)(locSdkScalarTable + 0x2388);
	*(float*)(locSdkScalarTable + 0x2350) = *(float*)(locSdkScalarTable + 0x238C);
	*(float*)(locJointParams + 0x0870) = *(float*)(locSdkScalarTable + 0x2390);
	*(float*)(locJointParams + 0x0874) = *(float*)(locSdkScalarTable + 0x2394);
	*(float*)(locJointParams + 0x0878) = *(float*)(locSdkScalarTable + 0x2398);
	*(float*)(locJointParams + 0x08C0) = *(float*)(locSdkScalarTable + 0x239C);
	*(float*)(locJointParams + 0x08C4) = *(float*)(locSdkScalarTable + 0x23A0);
	*(float*)(locJointParams + 0x08C8) = *(float*)(locSdkScalarTable + 0x23A4);
	*(float*)(locSdkScalarTable + 0x2304) = *(float*)(locSdkScalarTable + 0x23A8);
	*(float*)(locSdkScalarTable + 0x232C) = *(float*)(locSdkScalarTable + 0x23AC);
	*(float*)(locSdkScalarTable + 0x2354) = *(float*)(locSdkScalarTable + 0x23B0);
	*(float*)(locJointParams + 0x08A0) = *(float*)(locSdkScalarTable + 0x23B4);
	*(float*)(locJointParams + 0x08A4) = *(float*)(locSdkScalarTable + 0x23B8);
	*(float*)(locJointParams + 0x08A8) = *(float*)(locSdkScalarTable + 0x23BC);
	*(float*)(locJointParams + 0x08F0) = *(float*)(locSdkScalarTable + 0x23C0);
	*(float*)(locJointParams + 0x08F4) = *(float*)(locSdkScalarTable + 0x23C4);
	*(float*)(locJointParams + 0x08F8) = *(float*)(locSdkScalarTable + 0x23C8);
	*(float*)(locSdkScalarTable + 0x2308) = *(float*)(locSdkScalarTable + 0x23CC);
	*(float*)(locSdkScalarTable + 0x2330) = *(float*)(locSdkScalarTable + 0x23D0);
	*(float*)(locSdkScalarTable + 0x2358) = *(float*)(locSdkScalarTable + 0x23D4);
	*(float*)(locJointParams + 0x08D0) = *(float*)(locSdkScalarTable + 0x23D8);
	*(float*)(locJointParams + 0x08D4) = *(float*)(locSdkScalarTable + 0x23DC);
	*(float*)(locJointParams + 0x08D8) = *(float*)(locSdkScalarTable + 0x23E0);
	*(float*)(locJointParams + 0x0920) = *(float*)(locSdkScalarTable + 0x23E4);
	*(float*)(locJointParams + 0x0924) = *(float*)(locSdkScalarTable + 0x23E8);
	*(float*)(locJointParams + 0x0928) = *(float*)(locSdkScalarTable + 0x23EC);
	*(float*)(locSdkScalarTable + 0x230C) = *(float*)(locSdkScalarTable + 0x23F0);
	*(float*)(locSdkScalarTable + 0x2334) = *(float*)(locSdkScalarTable + 0x23F4);
	*(float*)(locSdkScalarTable + 0x235C) = *(float*)(locSdkScalarTable + 0x23F8);
	*(float*)(locJointParams + 0x0900) = *(float*)(locSdkScalarTable + 0x23FC);
	*(float*)(locJointParams + 0x0904) = *(float*)(locSdkScalarTable + 0x2400);
	*(float*)(locJointParams + 0x0908) = *(float*)(locSdkScalarTable + 0x2404);
	*(float*)(locJointParams + 0x0950) = *(float*)(locSdkScalarTable + 0x2408);
	*(float*)(locJointParams + 0x0954) = *(float*)(locSdkScalarTable + 0x240C);
	*(float*)(locJointParams + 0x0958) = *(float*)(locSdkScalarTable + 0x2410);
	*(float*)(locSdkScalarTable + 0x2310) = *(float*)(locSdkScalarTable + 0x2414);
	*(float*)(locSdkScalarTable + 0x2338) = *(float*)(locSdkScalarTable + 0x2418);
	*(float*)(locSdkScalarTable + 0x2360) = *(float*)(locSdkScalarTable + 0x241C);
	*(float*)(locJointParams + 0x0930) = *(float*)(locSdkScalarTable + 0x2420);
	*(float*)(locJointParams + 0x0934) = *(float*)(locSdkScalarTable + 0x2424);
	*(float*)(locJointParams + 0x0938) = *(float*)(locSdkScalarTable + 0x2428);
	*(float*)(locJointParams + 0x0980) = *(float*)(locSdkScalarTable + 0x242C);
	*(float*)(locJointParams + 0x0984) = *(float*)(locSdkScalarTable + 0x2430);
	*(float*)(locJointParams + 0x0988) = *(float*)(locSdkScalarTable + 0x2434);
	*(float*)(locSdkScalarTable + 0x2314) = *(float*)(locSdkScalarTable + 0x2438);
	*(float*)(locSdkScalarTable + 0x233C) = *(float*)(locSdkScalarTable + 0x243C);
	*(float*)(locSdkScalarTable + 0x2364) = *(float*)(locSdkScalarTable + 0x2440);
	*(float*)(locJointParams + 0x0960) = *(float*)(locSdkScalarTable + 0x2444);
	*(float*)(locJointParams + 0x0964) = *(float*)(locSdkScalarTable + 0x2448);
	*(float*)(locJointParams + 0x0968) = *(float*)(locSdkScalarTable + 0x244C);
	*(float*)(locJointParams + 0x09B0) = *(float*)(locSdkScalarTable + 0x2450);
	*(float*)(locJointParams + 0x09B4) = *(float*)(locSdkScalarTable + 0x2454);
	*(float*)(locJointParams + 0x09B8) = *(float*)(locSdkScalarTable + 0x2458);
	*(float*)(locSdkScalarTable + 0x2318) = *(float*)(locSdkScalarTable + 0x245C);
	*(float*)(locSdkScalarTable + 0x2340) = *(float*)(locSdkScalarTable + 0x2460);
	*(float*)(locSdkScalarTable + 0x2368) = *(float*)(locSdkScalarTable + 0x2464);
	*(float*)(locJointParams + 0x0990) = *(float*)(locSdkScalarTable + 0x2468);
	*(float*)(locJointParams + 0x0994) = *(float*)(locSdkScalarTable + 0x246C);
	*(float*)(locJointParams + 0x0998) = *(float*)(locSdkScalarTable + 0x2470);
	*(float*)(locJointParams + 0x09E0) = *(float*)(locSdkScalarTable + 0x2474);
	*(float*)(locJointParams + 0x09E4) = *(float*)(locSdkScalarTable + 0x2478);
	*(float*)(locJointParams + 0x09E8) = *(float*)(locSdkScalarTable + 0x247C);
	*(float*)(locSdkScalarTable + 0x231C) = *(float*)(locSdkScalarTable + 0x2480);
	*(float*)(locSdkScalarTable + 0x2344) = *(float*)(locSdkScalarTable + 0x2484);
	*(float*)(locSdkScalarTable + 0x236C) = *(float*)(locSdkScalarTable + 0x2488);
	*(float*)(locJointParams + 0x09C0) = *(float*)(locSdkScalarTable + 0x248C);
	*(float*)(locJointParams + 0x09C4) = *(float*)(locSdkScalarTable + 0x2490);
	*(float*)(locJointParams + 0x09C8) = *(float*)(locSdkScalarTable + 0x2494);
	*(float*)(locJointParams + 0x0A10) = *(float*)(locSdkScalarTable + 0x2498);
	*(float*)(locJointParams + 0x0A14) = *(float*)(locSdkScalarTable + 0x249C);
	*(float*)(locJointParams + 0x0A18) = *(float*)(locSdkScalarTable + 0x24A0);
	*(float*)(locSdkScalarTable + 0x2320) = *(float*)(locSdkScalarTable + 0x24A4);
	*(float*)(locSdkScalarTable + 0x2348) = *(float*)(locSdkScalarTable + 0x24A8);
	*(float*)(locSdkScalarTable + 0x2370) = *(float*)(locSdkScalarTable + 0x24AC);
	*(float*)(locJointParams + 0x09F0) = *(float*)(locSdkScalarTable + 0x24B0);
	*(float*)(locJointParams + 0x09F4) = *(float*)(locSdkScalarTable + 0x24B4);
	*(float*)(locJointParams + 0x09F8) = *(float*)(locSdkScalarTable + 0x24B8);
	*(float*)(locJointParams + 0x0A40) = *(float*)(locSdkScalarTable + 0x24BC);
	*(float*)(locJointParams + 0x0A44) = *(float*)(locSdkScalarTable + 0x24C0);
	*(float*)(locJointParams + 0x0A48) = *(float*)(locSdkScalarTable + 0x24C4);
	*(float*)(locSdkScalarTable + 0x2324) = *(float*)(locSdkScalarTable + 0x24C8);
	*(float*)(locSdkScalarTable + 0x234C) = *(float*)(locSdkScalarTable + 0x24CC);
	*(float*)(locSdkScalarTable + 0x2374) = *(float*)(locSdkScalarTable + 0x24D0);
	*(float*)(locJointParams + 0x0A20) = *(float*)(locSdkScalarTable + 0x24D4);
	*(float*)(locJointParams + 0x0A24) = *(float*)(locSdkScalarTable + 0x24D8);
	*(float*)(locJointParams + 0x0A28) = *(float*)(locSdkScalarTable + 0x24DC);
	*(float*)(locJointParams + 0x0A28) = *(float*)(locSdkScalarTable + 0x24DC);
	*(float*)(locJointParams + 0x0A28) = *(float*)(locSdkScalarTable + 0x24DC);
}

static void HierarchySdkDrivenRotCommand_Seg3Cmd24(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2300)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2328)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2350)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0880) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2304)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x232C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2354)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x08B0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2308)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2330)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2358)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x08E0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x230C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2334)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x235C)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0910) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2310)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2338)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2360)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0940) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2314)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x233C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2364)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0970) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2318)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2340)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2368)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x09A0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x231C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2344)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x236C)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x09D0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2320)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2348)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2370)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0A00) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2324)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x234C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2374)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0A30) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2324)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x234C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2374)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0A30) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2324)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x234C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x2374)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0A30) = q;
	}
}

static void HierarchyParentingCommand_Seg3Cmd25(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x02E0, 0x10B0 + 3 },	// Child[223]: l_shoulder_helperBend_pose_02, Parent[79]: l_shoulder_helperBend
		{ 0x02F0, 0x11B0 + 3 },	// Child[224]: r_shoulder_helperBend_pose_02, Parent[93]: r_shoulder_helperBend
		{ 0x0300, 0x0E70 + 3 },	// Child[225]: spine_c_helper_pose_01, Parent[62]: spine_c_helper
		{ 0x0310, 0x0E70 + 3 },	// Child[226]: spine_c_helper_pose_02, Parent[62]: spine_c_helper
		{ 0x0320, 0x0E30 + 3 },	// Child[227]: spine_a_helper_pose_01, Parent[60]: spine_a_helper
		{ 0x0330, 0x0E30 + 3 },	// Child[228]: spine_a_helper_pose_02, Parent[60]: spine_a_helper
		{ 0x0340, 0x0E30 + 3 },	// Child[229]: spine_a_helper_pose_03, Parent[60]: spine_a_helper
		{ 0x0350, 0x0E30 + 3 },	// Child[230]: spine_a_helper_pose_04, Parent[60]: spine_a_helper
		{ 0x0360, 0x13B0 + 3 },	// Child[231]: l_hip_helperTwist_weighted_01_pose_01, Parent[116]: l_hip_helperTwist_weighted_01
		{ 0x0370, 0x1470 + 3 },	// Child[232]: r_hip_helperTwist_weighted_01_pose_01, Parent[121]: r_hip_helperTwist_weighted_01
		{ 0x0370, 0x1470 + 3 },	// Child[232]: r_hip_helperTwist_weighted_01_pose_01, Parent[121]: r_hip_helperTwist_weighted_01
		{ 0x0370, 0x1470 + 3 }	// Child[232]: r_hip_helperTwist_weighted_01_pose_01, Parent[121]: r_hip_helperTwist_weighted_01
	};

	OrbisAnim_Parenting(3, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

static void HierarchyConstantCommand_Seg4Cmd0(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Const", OrbisAnim::Perf::kBlue);
	*(vec_float4*)(locJointParams + 0x0930) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0950) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0960) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0980) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0990) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x09B0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x09C0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x09E0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x09F0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0A10) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0A20) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0A40) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0A50) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0A70) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0A80) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0AA0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0AB0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0AD0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0AE0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0B00) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0B10) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0B30) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0B40) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0B60) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0B70) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0B90) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0BA0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0BC0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0BD0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0BF0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0C00) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0C20) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0C30) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0C50) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0C60) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0C80) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0C90) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0CB0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0CC0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0CE0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0CF0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0D10) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0D20) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0D40) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0D50) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0D70) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0D80) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0DA0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0DB0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0DD0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0DE0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0E00) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0E10) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0E30) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0E40) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0E60) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4610) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4620) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4630) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4640) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4650) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4660) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4670) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4680) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4690) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x46A0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x46B0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x46C0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x46D0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x46E0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x46F0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4700) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4710) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4720) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4730) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4740) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4750) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4760) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4770) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4780) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4790) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x47A0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x47B0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x47C0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x47D0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x47E0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x47F0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4800) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4810) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4820) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4830) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4840) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4850) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4860) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4870) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4880) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4890) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x48A0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x48B0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x48C0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x48D0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x48E0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x48F0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4900) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4910) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4920) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4930) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4940) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4950) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4960) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4970) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4980) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x4990) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x49A0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x49B0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x49C0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x49D0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x49E0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x49F0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x49F0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
}

// spine_e_helper_angleDriver_pitch_neck_c_helper_pose_01Mat1D
static void NdiInterpolateMatrix1DCommand_Seg4Cmd1(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::InterpolateMatrix1DParams params{
		0x11BF64,
		247,
	};

	static CONST_EXPR OrbisAnim::CommandBlock::InterpolateMatrix1DParams::Entry s_entries[] = {
		{ 1, 0, 0, 0, 2, 0, OrbisAnim::Location(0x16BB), OrbisAnim::Location(0x0042) },
		{ 1, 0, 0, 0, 3, 2, OrbisAnim::Location(0x1607), OrbisAnim::Location(0x0082) },
		{ 1, 0, 0, 0, 3, 5, OrbisAnim::Location(0x160F), OrbisAnim::Location(0x00C2) },
		{ 1, 0, 0, 0, 2, 8, OrbisAnim::Location(0x160B), OrbisAnim::Location(0x0102) },
		{ 1, 0, 0, 0, 3, 10, OrbisAnim::Location(0x1613), OrbisAnim::Location(0x0142) },
		{ 1, 0, 0, 0, 3, 13, OrbisAnim::Location(0x161B), OrbisAnim::Location(0x0182) },
		{ 1, 0, 0, 0, 2, 16, OrbisAnim::Location(0x1617), OrbisAnim::Location(0x01C2) },
		{ 1, 0, 0, 0, 5, 18, OrbisAnim::Location(0x161F), OrbisAnim::Location(0x0202) },
		{ 1, 0, 0, 0, 3, 23, OrbisAnim::Location(0x1627), OrbisAnim::Location(0x0242) },
		{ 1, 0, 0, 0, 3, 26, OrbisAnim::Location(0x1623), OrbisAnim::Location(0x0282) },
		{ 1, 0, 0, 0, 5, 29, OrbisAnim::Location(0x159B), OrbisAnim::Location(0x02C2) },
		{ 1, 0, 0, 0, 3, 34, OrbisAnim::Location(0x15A3), OrbisAnim::Location(0x0302) },
		{ 1, 0, 0, 0, 3, 37, OrbisAnim::Location(0x159F), OrbisAnim::Location(0x0342) },
		{ 1, 0, 0, 0, 2, 40, OrbisAnim::Location(0x15D3), OrbisAnim::Location(0x0382) },
		{ 1, 0, 0, 0, 2, 42, OrbisAnim::Location(0x1663), OrbisAnim::Location(0x03C2) },
		{ 1, 0, 0, 0, 2, 44, OrbisAnim::Location(0x16BB), OrbisAnim::Location(0x0442) },
		{ 1, 0, 0, 0, 5, 46, OrbisAnim::Location(0x1607), OrbisAnim::Location(0x0482) },
		{ 1, 0, 0, 0, 2, 51, OrbisAnim::Location(0x160F), OrbisAnim::Location(0x04C2) },
		{ 1, 0, 0, 0, 3, 53, OrbisAnim::Location(0x160B), OrbisAnim::Location(0x0502) },
		{ 1, 0, 0, 0, 2, 56, OrbisAnim::Location(0x1613), OrbisAnim::Location(0x0542) },
		{ 1, 0, 0, 0, 2, 58, OrbisAnim::Location(0x161B), OrbisAnim::Location(0x0582) },
		{ 1, 0, 0, 0, 2, 60, OrbisAnim::Location(0x1617), OrbisAnim::Location(0x05C2) },
		{ 1, 0, 0, 0, 3, 62, OrbisAnim::Location(0x161F), OrbisAnim::Location(0x0602) },
		{ 1, 0, 0, 0, 2, 65, OrbisAnim::Location(0x1627), OrbisAnim::Location(0x0642) },
		{ 1, 0, 0, 0, 3, 67, OrbisAnim::Location(0x1623), OrbisAnim::Location(0x0682) },
		{ 1, 0, 0, 0, 5, 70, OrbisAnim::Location(0x159B), OrbisAnim::Location(0x06C2) },
		{ 1, 0, 0, 0, 3, 75, OrbisAnim::Location(0x15A3), OrbisAnim::Location(0x0702) },
		{ 1, 0, 0, 0, 3, 78, OrbisAnim::Location(0x159F), OrbisAnim::Location(0x0742) },
		{ 1, 0, 0, 0, 2, 81, OrbisAnim::Location(0x15D3), OrbisAnim::Location(0x0782) },
		{ 1, 0, 0, 0, 2, 83, OrbisAnim::Location(0x16AF), OrbisAnim::Location(0x0802) },
		{ 1, 0, 0, 0, 2, 85, OrbisAnim::Location(0x16C3), OrbisAnim::Location(0x0842) },
		{ 1, 0, 0, 0, 2, 87, OrbisAnim::Location(0x16BF), OrbisAnim::Location(0x0882) },
		{ 1, 0, 0, 0, 5, 89, OrbisAnim::Location(0x1607), OrbisAnim::Location(0x08C2) },
		{ 1, 0, 0, 0, 3, 94, OrbisAnim::Location(0x160F), OrbisAnim::Location(0x0902) },
		{ 1, 0, 0, 0, 3, 97, OrbisAnim::Location(0x160B), OrbisAnim::Location(0x0942) },
		{ 1, 0, 0, 0, 5, 100, OrbisAnim::Location(0x1613), OrbisAnim::Location(0x0982) },
		{ 1, 0, 0, 0, 3, 105, OrbisAnim::Location(0x161B), OrbisAnim::Location(0x09C2) },
		{ 1, 0, 0, 0, 3, 108, OrbisAnim::Location(0x1617), OrbisAnim::Location(0x0A02) },
		{ 1, 0, 0, 0, 4, 111, OrbisAnim::Location(0x161F), OrbisAnim::Location(0x0A42) },
		{ 1, 0, 0, 0, 2, 115, OrbisAnim::Location(0x1627), OrbisAnim::Location(0x0A82) },
		{ 1, 0, 0, 0, 3, 117, OrbisAnim::Location(0x1623), OrbisAnim::Location(0x0AC2) },
		{ 1, 0, 0, 0, 4, 120, OrbisAnim::Location(0x159B), OrbisAnim::Location(0x0B02) },
		{ 1, 0, 0, 0, 2, 124, OrbisAnim::Location(0x15A3), OrbisAnim::Location(0x0B42) },
		{ 1, 0, 0, 0, 3, 126, OrbisAnim::Location(0x159F), OrbisAnim::Location(0x0B82) },
		{ 1, 0, 0, 0, 3, 129, OrbisAnim::Location(0x15D3), OrbisAnim::Location(0x0BC2) },
		{ 1, 0, 0, 0, 2, 132, OrbisAnim::Location(0x15D7), OrbisAnim::Location(0x0C02) },
		{ 1, 0, 0, 0, 2, 134, OrbisAnim::Location(0x15DB), OrbisAnim::Location(0x0C42) },
		{ 1, 0, 0, 0, 2, 136, OrbisAnim::Location(0x1663), OrbisAnim::Location(0x0C82) },
		{ 1, 0, 0, 0, 2, 138, OrbisAnim::Location(0x16AF), OrbisAnim::Location(0x0D02) },
		{ 1, 0, 0, 0, 4, 140, OrbisAnim::Location(0x16BB), OrbisAnim::Location(0x0D42) },
		{ 1, 0, 0, 0, 3, 144, OrbisAnim::Location(0x16C3), OrbisAnim::Location(0x0D82) },
		{ 1, 0, 0, 0, 2, 147, OrbisAnim::Location(0x16BF), OrbisAnim::Location(0x0DC2) },
		{ 1, 0, 0, 0, 5, 149, OrbisAnim::Location(0x1607), OrbisAnim::Location(0x0E02) },
		{ 1, 0, 0, 0, 3, 154, OrbisAnim::Location(0x160F), OrbisAnim::Location(0x0E42) },
		{ 1, 0, 0, 0, 3, 157, OrbisAnim::Location(0x160B), OrbisAnim::Location(0x0E82) },
		{ 1, 0, 0, 0, 5, 160, OrbisAnim::Location(0x1613), OrbisAnim::Location(0x0EC2) },
		{ 1, 0, 0, 0, 3, 165, OrbisAnim::Location(0x161B), OrbisAnim::Location(0x0F02) },
		{ 1, 0, 0, 0, 3, 168, OrbisAnim::Location(0x1617), OrbisAnim::Location(0x0F42) },
		{ 1, 0, 0, 0, 4, 171, OrbisAnim::Location(0x161F), OrbisAnim::Location(0x0F82) },
		{ 1, 0, 0, 0, 2, 175, OrbisAnim::Location(0x1627), OrbisAnim::Location(0x0FC2) },
		{ 1, 0, 0, 0, 2, 177, OrbisAnim::Location(0x1623), OrbisAnim::Location(0x1002) },
		{ 1, 0, 0, 0, 3, 179, OrbisAnim::Location(0x159B), OrbisAnim::Location(0x1042) },
		{ 1, 0, 0, 0, 3, 182, OrbisAnim::Location(0x15A3), OrbisAnim::Location(0x1082) },
		{ 1, 0, 0, 0, 3, 185, OrbisAnim::Location(0x159F), OrbisAnim::Location(0x10C2) },
		{ 1, 0, 0, 0, 2, 188, OrbisAnim::Location(0x15D3), OrbisAnim::Location(0x1102) },
		{ 1, 0, 0, 0, 2, 190, OrbisAnim::Location(0x15DF), OrbisAnim::Location(0x1142) },
		{ 1, 0, 0, 0, 3, 192, OrbisAnim::Location(0x1663), OrbisAnim::Location(0x1182) },
		{ 1, 0, 0, 0, 2, 195, OrbisAnim::Location(0x1667), OrbisAnim::Location(0x11C2) },
		{ 1, 0, 0, 0, 3, 197, OrbisAnim::Location(0x1587), OrbisAnim::Location(0x1202) },
		{ 1, 0, 0, 0, 2, 200, OrbisAnim::Location(0x166B), OrbisAnim::Location(0x1242) },
		{ 1, 0, 0, 0, 2, 202, OrbisAnim::Location(0x166F), OrbisAnim::Location(0x1282) },
		{ 1, 0, 0, 0, 3, 204, OrbisAnim::Location(0x15D3), OrbisAnim::Location(0x1302) },
		{ 1, 0, 0, 0, 2, 207, OrbisAnim::Location(0x15DB), OrbisAnim::Location(0x1342) },
		{ 1, 0, 0, 0, 2, 209, OrbisAnim::Location(0x15DF), OrbisAnim::Location(0x1382) },
		{ 1, 0, 0, 0, 3, 211, OrbisAnim::Location(0x1577), OrbisAnim::Location(0x13C2) },
		{ 1, 0, 0, 0, 4, 214, OrbisAnim::Location(0x15AF), OrbisAnim::Location(0x1402) },
		{ 1, 0, 0, 0, 4, 218, OrbisAnim::Location(0x15FB), OrbisAnim::Location(0x1482) },
		{ 1, 0, 0, 0, 5, 222, OrbisAnim::Location(0x15FB), OrbisAnim::Location(0x1502) },
		{ 1, 0, 0, 0, 3, 227, OrbisAnim::Location(0x1603), OrbisAnim::Location(0x1542) },
		{ 1, 0, 0, 0, 3, 230, OrbisAnim::Location(0x15FF), OrbisAnim::Location(0x1582) },
		{ 1, 0, 0, 0, 2, 233, OrbisAnim::Location(0x15C3), OrbisAnim::Location(0x15C2) },
		{ 1, 0, 0, 0, 2, 235, OrbisAnim::Location(0x16BB), OrbisAnim::Location(0x1642) },
		{ 1, 0, 0, 0, 2, 237, OrbisAnim::Location(0x16BF), OrbisAnim::Location(0x1682) },
		{ 1, 0, 0, 0, 2, 239, OrbisAnim::Location(0x160F), OrbisAnim::Location(0x16C2) },
		{ 1, 0, 0, 0, 3, 241, OrbisAnim::Location(0x15D3), OrbisAnim::Location(0x1702) },
		{ 1, 0, 0, 0, 2, 244, OrbisAnim::Location(0x15D7), OrbisAnim::Location(0x1742) },
		{ 1, 0, 0, 0, 3, 246, OrbisAnim::Location(0x157B), OrbisAnim::Location(0x1782) },
		{ 1, 0, 0, 0, 3, 249, OrbisAnim::Location(0x15DB), OrbisAnim::Location(0x17C2) },
		{ 1, 0, 0, 0, 2, 252, OrbisAnim::Location(0x15DF), OrbisAnim::Location(0x1802) },
		{ 1, 0, 0, 0, 3, 254, OrbisAnim::Location(0x15AF), OrbisAnim::Location(0x1842) },
		{ 1, 0, 0, 0, 2, 257, OrbisAnim::Location(0x1663), OrbisAnim::Location(0x1882) },
		{ 1, 0, 0, 0, 3, 259, OrbisAnim::Location(0x16AF), OrbisAnim::Location(0x1902) },
		{ 1, 0, 0, 0, 3, 262, OrbisAnim::Location(0x16B7), OrbisAnim::Location(0x1942) },
		{ 1, 0, 0, 0, 3, 265, OrbisAnim::Location(0x16B3), OrbisAnim::Location(0x1982) },
		{ 1, 0, 0, 0, 4, 268, OrbisAnim::Location(0x16BB), OrbisAnim::Location(0x19C2) },
		{ 1, 0, 0, 0, 3, 272, OrbisAnim::Location(0x16C3), OrbisAnim::Location(0x1A02) },
		{ 1, 0, 0, 0, 3, 275, OrbisAnim::Location(0x16BF), OrbisAnim::Location(0x1A42) },
		{ 1, 0, 0, 0, 3, 278, OrbisAnim::Location(0x1607), OrbisAnim::Location(0x1A82) },
		{ 1, 0, 0, 0, 2, 281, OrbisAnim::Location(0x160F), OrbisAnim::Location(0x1AC2) },
		{ 1, 0, 0, 0, 3, 283, OrbisAnim::Location(0x15D3), OrbisAnim::Location(0x1B02) },
		{ 1, 0, 0, 0, 2, 286, OrbisAnim::Location(0x15D7), OrbisAnim::Location(0x1B42) },
		{ 1, 0, 0, 0, 3, 288, OrbisAnim::Location(0x157B), OrbisAnim::Location(0x1B82) },
		{ 1, 0, 0, 0, 3, 291, OrbisAnim::Location(0x15DB), OrbisAnim::Location(0x1BC2) },
		{ 1, 0, 0, 0, 2, 294, OrbisAnim::Location(0x15DF), OrbisAnim::Location(0x1C02) },
		{ 1, 0, 0, 0, 3, 296, OrbisAnim::Location(0x1577), OrbisAnim::Location(0x1C42) },
		{ 1, 0, 0, 0, 2, 299, OrbisAnim::Location(0x15AF), OrbisAnim::Location(0x1C82) },
		{ 1, 0, 0, 0, 3, 301, OrbisAnim::Location(0x1663), OrbisAnim::Location(0x1CC2) },
		{ 1, 0, 0, 0, 2, 304, OrbisAnim::Location(0x1667), OrbisAnim::Location(0x1D02) },
		{ 1, 0, 0, 0, 3, 306, OrbisAnim::Location(0x166B), OrbisAnim::Location(0x1D42) },
		{ 1, 0, 0, 0, 2, 309, OrbisAnim::Location(0x166F), OrbisAnim::Location(0x1D82) },
		{ 1, 0, 0, 0, 3, 311, OrbisAnim::Location(0x1663), OrbisAnim::Location(0x1E02) },
		{ 1, 0, 0, 0, 2, 314, OrbisAnim::Location(0x166B), OrbisAnim::Location(0x1E42) },
		{ 1, 0, 0, 0, 2, 316, OrbisAnim::Location(0x166F), OrbisAnim::Location(0x1E82) },
		{ 1, 0, 0, 0, 3, 318, OrbisAnim::Location(0x1583), OrbisAnim::Location(0x1EC2) },
		{ 1, 0, 0, 0, 4, 321, OrbisAnim::Location(0x163F), OrbisAnim::Location(0x1F02) },
		{ 1, 0, 0, 0, 5, 325, OrbisAnim::Location(0x168B), OrbisAnim::Location(0x1F82) },
		{ 1, 0, 0, 0, 2, 330, OrbisAnim::Location(0x1693), OrbisAnim::Location(0x1FC2) },
		{ 1, 0, 0, 0, 2, 332, OrbisAnim::Location(0x168F), OrbisAnim::Location(0x2002) },
		{ 1, 0, 0, 0, 5, 334, OrbisAnim::Location(0x168B), OrbisAnim::Location(0x2082) },
		{ 1, 0, 0, 0, 3, 339, OrbisAnim::Location(0x1693), OrbisAnim::Location(0x20C2) },
		{ 1, 0, 0, 0, 3, 342, OrbisAnim::Location(0x168F), OrbisAnim::Location(0x2102) },
		{ 1, 0, 0, 0, 2, 345, OrbisAnim::Location(0x1653), OrbisAnim::Location(0x2142) },
		{ 1, 0, 0, 0, 4, 347, OrbisAnim::Location(0x16BB), OrbisAnim::Location(0x21C2) },
		{ 1, 0, 0, 0, 3, 351, OrbisAnim::Location(0x16BF), OrbisAnim::Location(0x2202) },
		{ 1, 0, 0, 0, 4, 354, OrbisAnim::Location(0x1607), OrbisAnim::Location(0x2242) },
		{ 1, 0, 0, 0, 2, 358, OrbisAnim::Location(0x160F), OrbisAnim::Location(0x2282) },
		{ 1, 0, 0, 0, 2, 360, OrbisAnim::Location(0x15D3), OrbisAnim::Location(0x22C2) },
		{ 1, 0, 0, 0, 3, 362, OrbisAnim::Location(0x1663), OrbisAnim::Location(0x2302) },
		{ 1, 0, 0, 0, 2, 365, OrbisAnim::Location(0x1667), OrbisAnim::Location(0x2342) },
		{ 1, 0, 0, 0, 3, 367, OrbisAnim::Location(0x1587), OrbisAnim::Location(0x2382) },
		{ 1, 0, 0, 0, 3, 370, OrbisAnim::Location(0x166B), OrbisAnim::Location(0x23C2) },
		{ 1, 0, 0, 0, 2, 373, OrbisAnim::Location(0x166F), OrbisAnim::Location(0x2402) },
		{ 1, 0, 0, 0, 4, 375, OrbisAnim::Location(0x163F), OrbisAnim::Location(0x2442) },
		{ 1, 0, 0, 0, 3, 379, OrbisAnim::Location(0x16AF), OrbisAnim::Location(0x24C2) },
		{ 1, 0, 0, 0, 3, 382, OrbisAnim::Location(0x16B7), OrbisAnim::Location(0x2502) },
		{ 1, 0, 0, 0, 3, 385, OrbisAnim::Location(0x16B3), OrbisAnim::Location(0x2542) },
		{ 1, 0, 0, 0, 3, 388, OrbisAnim::Location(0x16BB), OrbisAnim::Location(0x2582) },
		{ 1, 0, 0, 0, 3, 391, OrbisAnim::Location(0x16C3), OrbisAnim::Location(0x25C2) },
		{ 1, 0, 0, 0, 3, 394, OrbisAnim::Location(0x16BF), OrbisAnim::Location(0x2602) },
		{ 1, 0, 0, 0, 3, 397, OrbisAnim::Location(0x1607), OrbisAnim::Location(0x2642) },
		{ 1, 0, 0, 0, 2, 400, OrbisAnim::Location(0x160F), OrbisAnim::Location(0x2682) },
		{ 1, 0, 0, 0, 2, 402, OrbisAnim::Location(0x15D3), OrbisAnim::Location(0x26C2) },
		{ 1, 0, 0, 0, 3, 404, OrbisAnim::Location(0x15DB), OrbisAnim::Location(0x2702) },
		{ 1, 0, 0, 0, 3, 407, OrbisAnim::Location(0x1663), OrbisAnim::Location(0x2742) },
		{ 1, 0, 0, 0, 2, 410, OrbisAnim::Location(0x1667), OrbisAnim::Location(0x2782) },
		{ 1, 0, 0, 0, 3, 412, OrbisAnim::Location(0x1587), OrbisAnim::Location(0x27C2) },
		{ 1, 0, 0, 0, 3, 415, OrbisAnim::Location(0x166B), OrbisAnim::Location(0x2802) },
		{ 1, 0, 0, 0, 2, 418, OrbisAnim::Location(0x166F), OrbisAnim::Location(0x2842) },
		{ 1, 0, 0, 0, 3, 420, OrbisAnim::Location(0x1583), OrbisAnim::Location(0x2882) },
		{ 1, 0, 0, 0, 2, 423, OrbisAnim::Location(0x163F), OrbisAnim::Location(0x28C2) },
		{ 1, 0, 0, 0, 4, 425, OrbisAnim::Location(0x16BB), OrbisAnim::Location(0x2942) },
		{ 1, 0, 0, 0, 3, 429, OrbisAnim::Location(0x16C3), OrbisAnim::Location(0x2982) },
		{ 1, 0, 0, 0, 3, 432, OrbisAnim::Location(0x16BF), OrbisAnim::Location(0x29C2) },
		{ 1, 0, 0, 0, 5, 435, OrbisAnim::Location(0x1607), OrbisAnim::Location(0x2A02) },
		{ 1, 0, 0, 0, 3, 440, OrbisAnim::Location(0x160F), OrbisAnim::Location(0x2A42) },
		{ 1, 0, 0, 0, 3, 443, OrbisAnim::Location(0x1613), OrbisAnim::Location(0x2A82) },
		{ 1, 0, 0, 0, 2, 446, OrbisAnim::Location(0x159B), OrbisAnim::Location(0x2AC2) },
		{ 1, 0, 0, 0, 2, 448, OrbisAnim::Location(0x159F), OrbisAnim::Location(0x2B02) },
		{ 1, 0, 0, 0, 3, 450, OrbisAnim::Location(0x15D3), OrbisAnim::Location(0x2B42) },
		{ 1, 0, 0, 0, 2, 453, OrbisAnim::Location(0x15D7), OrbisAnim::Location(0x2B82) },
		{ 1, 0, 0, 0, 3, 455, OrbisAnim::Location(0x157B), OrbisAnim::Location(0x2BC2) },
		{ 1, 0, 0, 0, 3, 458, OrbisAnim::Location(0x15DB), OrbisAnim::Location(0x2C02) },
		{ 1, 0, 0, 0, 2, 461, OrbisAnim::Location(0x15DF), OrbisAnim::Location(0x2C42) },
		{ 1, 0, 0, 0, 2, 463, OrbisAnim::Location(0x1663), OrbisAnim::Location(0x2C82) },
		{ 1, 0, 0, 0, 2, 465, OrbisAnim::Location(0x16AF), OrbisAnim::Location(0x2D02) },
		{ 1, 0, 0, 0, 4, 467, OrbisAnim::Location(0x16BB), OrbisAnim::Location(0x2D42) },
		{ 1, 0, 0, 0, 3, 471, OrbisAnim::Location(0x16C3), OrbisAnim::Location(0x2D82) },
		{ 1, 0, 0, 0, 3, 474, OrbisAnim::Location(0x16BF), OrbisAnim::Location(0x2DC2) },
		{ 1, 0, 0, 0, 5, 477, OrbisAnim::Location(0x1607), OrbisAnim::Location(0x2E02) },
		{ 1, 0, 0, 0, 3, 482, OrbisAnim::Location(0x160F), OrbisAnim::Location(0x2E42) },
		{ 1, 0, 0, 0, 2, 485, OrbisAnim::Location(0x160B), OrbisAnim::Location(0x2E82) },
		{ 1, 0, 0, 0, 2, 487, OrbisAnim::Location(0x1613), OrbisAnim::Location(0x2EC2) },
		{ 1, 0, 0, 0, 2, 489, OrbisAnim::Location(0x161B), OrbisAnim::Location(0x2F02) },
		{ 1, 0, 0, 0, 2, 491, OrbisAnim::Location(0x1617), OrbisAnim::Location(0x2F42) },
		{ 1, 0, 0, 0, 3, 493, OrbisAnim::Location(0x161F), OrbisAnim::Location(0x2F82) },
		{ 1, 0, 0, 0, 2, 496, OrbisAnim::Location(0x1623), OrbisAnim::Location(0x2FC2) },
		{ 1, 0, 0, 0, 2, 498, OrbisAnim::Location(0x15D3), OrbisAnim::Location(0x3002) },
		{ 1, 0, 0, 0, 3, 500, OrbisAnim::Location(0x1663), OrbisAnim::Location(0x3042) },
		{ 1, 0, 0, 0, 2, 503, OrbisAnim::Location(0x1667), OrbisAnim::Location(0x3082) },
		{ 1, 0, 0, 0, 3, 505, OrbisAnim::Location(0x1587), OrbisAnim::Location(0x30C2) },
		{ 1, 0, 0, 0, 3, 508, OrbisAnim::Location(0x166B), OrbisAnim::Location(0x3102) },
		{ 1, 0, 0, 0, 3, 511, OrbisAnim::Location(0x15C7), OrbisAnim::Location(0x3182) },
		{ 1, 0, 0, 0, 3, 514, OrbisAnim::Location(0x1593), OrbisAnim::Location(0x31C2) },
		{ 1, 0, 0, 0, 4, 517, OrbisAnim::Location(0x15CF), OrbisAnim::Location(0x3202) },
		{ 1, 0, 0, 0, 4, 521, OrbisAnim::Location(0x15EF), OrbisAnim::Location(0x3242) },
		{ 1, 0, 0, 0, 3, 525, OrbisAnim::Location(0x15AB), OrbisAnim::Location(0x3282) },
		{ 1, 0, 0, 0, 2, 528, OrbisAnim::Location(0x1593), OrbisAnim::Location(0x3302) },
		{ 1, 0, 0, 0, 4, 530, OrbisAnim::Location(0x15CF), OrbisAnim::Location(0x3342) },
		{ 1, 0, 0, 0, 5, 534, OrbisAnim::Location(0x15EF), OrbisAnim::Location(0x3382) },
		{ 1, 0, 0, 0, 3, 539, OrbisAnim::Location(0x15F7), OrbisAnim::Location(0x33C2) },
		{ 1, 0, 0, 0, 3, 542, OrbisAnim::Location(0x15F3), OrbisAnim::Location(0x3402) },
		{ 1, 0, 0, 0, 3, 545, OrbisAnim::Location(0x15AB), OrbisAnim::Location(0x3442) },
		{ 1, 0, 0, 0, 2, 548, OrbisAnim::Location(0x15C7), OrbisAnim::Location(0x34C2) },
		{ 1, 0, 0, 0, 2, 550, OrbisAnim::Location(0x1593), OrbisAnim::Location(0x3502) },
		{ 1, 0, 0, 0, 4, 552, OrbisAnim::Location(0x15CF), OrbisAnim::Location(0x3542) },
		{ 1, 0, 0, 0, 2, 556, OrbisAnim::Location(0x15EF), OrbisAnim::Location(0x3582) },
		{ 1, 0, 0, 0, 3, 558, OrbisAnim::Location(0x1657), OrbisAnim::Location(0x3602) },
		{ 1, 0, 0, 0, 3, 561, OrbisAnim::Location(0x1597), OrbisAnim::Location(0x3642) },
		{ 1, 0, 0, 0, 4, 564, OrbisAnim::Location(0x165F), OrbisAnim::Location(0x3682) },
		{ 1, 0, 0, 0, 4, 568, OrbisAnim::Location(0x167F), OrbisAnim::Location(0x36C2) },
		{ 1, 0, 0, 0, 3, 572, OrbisAnim::Location(0x163B), OrbisAnim::Location(0x3702) },
		{ 1, 0, 0, 0, 2, 575, OrbisAnim::Location(0x1597), OrbisAnim::Location(0x3782) },
		{ 1, 0, 0, 0, 4, 577, OrbisAnim::Location(0x165F), OrbisAnim::Location(0x37C2) },
		{ 1, 0, 0, 0, 5, 581, OrbisAnim::Location(0x167F), OrbisAnim::Location(0x3802) },
		{ 1, 0, 0, 0, 3, 586, OrbisAnim::Location(0x1687), OrbisAnim::Location(0x3842) },
		{ 1, 0, 0, 0, 3, 589, OrbisAnim::Location(0x1683), OrbisAnim::Location(0x3882) },
		{ 1, 0, 0, 0, 3, 592, OrbisAnim::Location(0x163B), OrbisAnim::Location(0x38C2) },
		{ 1, 0, 0, 0, 2, 595, OrbisAnim::Location(0x1657), OrbisAnim::Location(0x3942) },
		{ 1, 0, 0, 0, 2, 597, OrbisAnim::Location(0x1597), OrbisAnim::Location(0x3982) },
		{ 1, 0, 0, 0, 4, 599, OrbisAnim::Location(0x165F), OrbisAnim::Location(0x39C2) },
		{ 1, 0, 0, 0, 2, 603, OrbisAnim::Location(0x167F), OrbisAnim::Location(0x3A02) },
		{ 1, 0, 0, 0, 2, 605, OrbisAnim::Location(0x1633), OrbisAnim::Location(0x3A82) },
		{ 1, 0, 0, 0, 3, 607, OrbisAnim::Location(0x15C7), OrbisAnim::Location(0x3AC2) },
		{ 1, 0, 0, 0, 2, 610, OrbisAnim::Location(0x15CB), OrbisAnim::Location(0x3B02) },
		{ 1, 0, 0, 0, 3, 612, OrbisAnim::Location(0x1593), OrbisAnim::Location(0x3B42) },
		{ 1, 0, 0, 0, 3, 615, OrbisAnim::Location(0x15CF), OrbisAnim::Location(0x3B82) },
		{ 1, 0, 0, 0, 4, 618, OrbisAnim::Location(0x15C7), OrbisAnim::Location(0x3C02) },
		{ 1, 0, 0, 0, 2, 622, OrbisAnim::Location(0x15CB), OrbisAnim::Location(0x3C42) },
		{ 1, 0, 0, 0, 3, 624, OrbisAnim::Location(0x1593), OrbisAnim::Location(0x3C82) },
		{ 1, 0, 0, 0, 4, 627, OrbisAnim::Location(0x15CF), OrbisAnim::Location(0x3CC2) },
		{ 1, 0, 0, 0, 4, 631, OrbisAnim::Location(0x1697), OrbisAnim::Location(0x3D42) },
		{ 1, 0, 0, 0, 3, 635, OrbisAnim::Location(0x169F), OrbisAnim::Location(0x3D82) },
		{ 1, 0, 0, 0, 3, 638, OrbisAnim::Location(0x169B), OrbisAnim::Location(0x3DC2) },
		{ 1, 0, 0, 0, 3, 641, OrbisAnim::Location(0x162B), OrbisAnim::Location(0x3E02) },
		{ 1, 0, 0, 0, 3, 644, OrbisAnim::Location(0x1633), OrbisAnim::Location(0x3E42) },
		{ 1, 0, 0, 0, 3, 647, OrbisAnim::Location(0x162F), OrbisAnim::Location(0x3E82) },
		{ 1, 0, 0, 0, 5, 650, OrbisAnim::Location(0x15C7), OrbisAnim::Location(0x3EC2) },
		{ 1, 0, 0, 0, 2, 655, OrbisAnim::Location(0x15CB), OrbisAnim::Location(0x3F02) },
		{ 1, 0, 0, 0, 3, 657, OrbisAnim::Location(0x1593), OrbisAnim::Location(0x3F42) },
		{ 1, 0, 0, 0, 4, 660, OrbisAnim::Location(0x15CF), OrbisAnim::Location(0x3F82) },
		{ 1, 0, 0, 0, 3, 664, OrbisAnim::Location(0x1657), OrbisAnim::Location(0x4002) },
		{ 1, 0, 0, 0, 2, 667, OrbisAnim::Location(0x165B), OrbisAnim::Location(0x4042) },
		{ 1, 0, 0, 0, 3, 669, OrbisAnim::Location(0x1597), OrbisAnim::Location(0x4082) },
		{ 1, 0, 0, 0, 3, 672, OrbisAnim::Location(0x165F), OrbisAnim::Location(0x40C2) },
		{ 1, 0, 0, 0, 4, 675, OrbisAnim::Location(0x1657), OrbisAnim::Location(0x4142) },
		{ 1, 0, 0, 0, 3, 679, OrbisAnim::Location(0x1597), OrbisAnim::Location(0x4182) },
		{ 1, 0, 0, 0, 4, 682, OrbisAnim::Location(0x165F), OrbisAnim::Location(0x41C2) },
		{ 1, 0, 0, 0, 4, 686, OrbisAnim::Location(0x1697), OrbisAnim::Location(0x4242) },
		{ 1, 0, 0, 0, 3, 690, OrbisAnim::Location(0x169F), OrbisAnim::Location(0x4282) },
		{ 1, 0, 0, 0, 3, 693, OrbisAnim::Location(0x169B), OrbisAnim::Location(0x42C2) },
		{ 1, 0, 0, 0, 3, 696, OrbisAnim::Location(0x162B), OrbisAnim::Location(0x4302) },
		{ 1, 0, 0, 0, 3, 699, OrbisAnim::Location(0x1633), OrbisAnim::Location(0x4342) },
		{ 1, 0, 0, 0, 3, 702, OrbisAnim::Location(0x162F), OrbisAnim::Location(0x4382) },
		{ 1, 0, 0, 0, 5, 705, OrbisAnim::Location(0x1657), OrbisAnim::Location(0x43C2) },
		{ 1, 0, 0, 0, 2, 710, OrbisAnim::Location(0x165B), OrbisAnim::Location(0x4402) },
		{ 1, 0, 0, 0, 3, 712, OrbisAnim::Location(0x1597), OrbisAnim::Location(0x4442) },
		{ 1, 0, 0, 0, 4, 715, OrbisAnim::Location(0x165F), OrbisAnim::Location(0x4482) },
	};

	static CONST_EXPR OrbisAnim::CommandBlock::InterpolateMatrix1DState s_stateData[] = {
		{ -70.000000f, { 0.997176f, 0.013972f, 0.073782f, 0.000000f, -0.017493f, 0.998728f, 0.047289f, 0.000000f, -0.073028f, -0.048446f, 0.996153f, 0.000000f, 0.000134f, -0.000106f, 0.002434f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.953678f, 0.195056f, -0.229022f, 0.000000f, 0.051097f, 0.645211f, 0.762294f, 0.000000f, 0.296458f, -0.738685f, 0.605357f, 0.000000f, 0.001493f, -0.000398f, 0.021647f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.991065f, 0.122518f, 0.052714f, 0.000000f, -0.113528f, 0.982340f, -0.148730f, 0.000000f, -0.070005f, 0.141416f, 0.987472f, 0.000000f, 0.007146f, 0.002149f, 0.019945f, 1.000000f } },
		{ -50.000000f, { 0.999346f, -0.016065f, -0.032381f, 0.000000f, 0.014051f, 0.998008f, -0.061495f, 0.000000f, 0.033304f, 0.061000f, 0.997582f, 0.000000f, -0.002462f, 0.000593f, 0.000829f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.992026f, 0.045077f, 0.117699f, 0.000000f, -0.039787f, 0.998106f, -0.046913f, 0.000000f, -0.119591f, 0.041856f, 0.991941f, 0.000000f, 0.003597f, 0.001683f, 0.001167f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.995557f, -0.049558f, -0.080068f, 0.000000f, 0.040393f, 0.992855f, -0.112279f, 0.000000f, 0.085060f, 0.108546f, 0.990446f, 0.000000f, -0.007459f, -0.003651f, -0.004668f, 1.000000f } },
		{ -70.000000f, { 0.999454f, -0.032985f, -0.001793f, 0.000000f, 0.033031f, 0.997205f, 0.067015f, 0.000000f, -0.000423f, -0.067038f, 0.997750f, 0.000000f, -0.001263f, 0.001049f, -0.000597f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.997068f, 0.033033f, -0.069020f, 0.000000f, -0.038989f, 0.995461f, -0.086812f, 0.000000f, 0.065839f, 0.089249f, 0.993831f, 0.000000f, 0.000041f, -0.005130f, 0.003150f, 1.000000f } },
		{ -50.000000f, { 0.992106f, -0.042177f, -0.118096f, 0.000000f, 0.033864f, 0.996863f, -0.071543f, 0.000000f, 0.120743f, 0.066979f, 0.990422f, 0.000000f, -0.003883f, 0.000193f, -0.004589f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.981795f, 0.113734f, 0.152127f, 0.000000f, -0.118719f, 0.992636f, 0.024065f, 0.000000f, -0.148270f, -0.041688f, 0.988068f, 0.000000f, -0.001726f, 0.002438f, 0.004411f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.996365f, 0.061555f, 0.058888f, 0.000000f, -0.059407f, 0.997527f, -0.037552f, 0.000000f, -0.061054f, 0.033918f, 0.997558f, 0.000000f, -0.003276f, -0.003121f, -0.001948f, 1.000000f } },
		{ -70.000000f, { 0.998953f, 0.019864f, -0.041220f, 0.000000f, -0.015474f, 0.994437f, 0.104194f, 0.000000f, 0.043061f, -0.103447f, 0.993702f, 0.000000f, -0.001221f, -0.012873f, 0.001410f, 1.000000f } },
		{ -35.000000f, { 0.999959f, -0.002301f, -0.008775f, 0.000000f, 0.002925f, 0.997415f, 0.071792f, 0.000000f, 0.008587f, -0.071815f, 0.997381f, 0.000000f, -0.000471f, -0.004796f, 0.002373f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.993008f, 0.082405f, -0.084526f, 0.000000f, -0.090555f, 0.991097f, -0.097605f, 0.000000f, 0.075730f, 0.104577f, 0.991629f, 0.000000f, -0.010407f, 0.000447f, -0.004921f, 1.000000f } },
		{ 70.000000f, { 0.941330f, 0.256148f, -0.219741f, 0.000000f, -0.317124f, 0.894093f, -0.316275f, 0.000000f, 0.115456f, 0.367404f, 0.922867f, 0.000000f, -0.009616f, -0.005015f, -0.008134f, 1.000000f } },
		{ -50.000000f, { 0.997494f, 0.009767f, -0.070080f, 0.000000f, -0.010915f, 0.999812f, -0.016024f, 0.000000f, 0.069911f, 0.016748f, 0.997413f, 0.000000f, -0.000841f, 0.001444f, -0.008093f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.997439f, -0.015898f, 0.069729f, 0.000000f, 0.014371f, 0.999647f, 0.022352f, 0.000000f, -0.070059f, -0.021292f, 0.997316f, 0.000000f, -0.008951f, -0.000105f, 0.003405f, 1.000000f } },
		{ -70.000000f, { 0.982686f, 0.172687f, -0.067138f, 0.000000f, -0.172250f, 0.984977f, 0.012289f, 0.000000f, 0.068252f, -0.000512f, 0.997668f, 0.000000f, -0.008425f, -0.000327f, 0.002203f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.998203f, -0.050093f, 0.032897f, 0.000000f, 0.050393f, 0.998694f, -0.008361f, 0.000000f, -0.032435f, 0.010004f, 0.999424f, 0.000000f, -0.003837f, -0.012294f, -0.000096f, 1.000000f } },
		{ -70.000000f, { 0.938954f, -0.314725f, -0.138974f, 0.000000f, 0.159081f, 0.755331f, -0.635742f, 0.000000f, 0.305056f, 0.574824f, 0.759288f, 0.000000f, 0.020916f, 0.048402f, -0.060945f, 1.000000f } },
		{ -35.000000f, { 0.999611f, -0.027775f, -0.002677f, 0.000000f, 0.026097f, 0.964542f, -0.262636f, 0.000000f, 0.009877f, 0.262464f, 0.964891f, 0.000000f, 0.004626f, 0.020168f, -0.021340f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 25.000000f, { 0.999634f, 0.011925f, 0.024269f, 0.000000f, -0.015798f, 0.985958f, 0.166246f, 0.000000f, -0.021945f, -0.166569f, 0.985786f, 0.000000f, -0.004601f, -0.004267f, -0.000740f, 1.000000f } },
		{ 50.000000f, { 0.995473f, 0.073268f, -0.060547f, 0.000000f, -0.056037f, 0.966939f, 0.248774f, 0.000000f, 0.076773f, -0.244255f, 0.966667f, 0.000000f, -0.004775f, -0.007672f, 0.007589f, 1.000000f } },
		{ -50.000000f, { 0.767337f, -0.620839f, 0.160476f, 0.000000f, 0.633021f, 0.773343f, -0.035011f, 0.000000f, -0.102367f, 0.128450f, 0.986419f, 0.000000f, -0.009572f, -0.026726f, 0.015396f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.698796f, 0.674745f, -0.237494f, 0.000000f, -0.645842f, 0.737869f, 0.196052f, 0.000000f, 0.307525f, 0.016383f, 0.951399f, 0.000000f, 0.011530f, 0.039257f, -0.021363f, 1.000000f } },
		{ -70.000000f, { 0.830190f, -0.382353f, -0.405699f, 0.000000f, 0.456645f, 0.883845f, 0.101457f, 0.000000f, 0.319782f, -0.269489f, 0.908358f, 0.000000f, 0.001010f, -0.029264f, -0.042589f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.841513f, 0.361775f, 0.401216f, 0.000000f, -0.273483f, 0.925750f, -0.261139f, 0.000000f, -0.465900f, 0.110026f, 0.877970f, 0.000000f, -0.033482f, 0.021879f, 0.023277f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.993681f, 0.074328f, -0.084100f, 0.000000f, -0.072825f, 0.997128f, 0.020803f, 0.000000f, 0.085405f, -0.014547f, 0.996240f, 0.000000f, -0.002036f, 0.005203f, -0.001341f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.999551f, 0.029946f, 0.001023f, 0.000000f, -0.029915f, 0.995396f, 0.091057f, 0.000000f, 0.001708f, -0.091047f, 0.995845f, 0.000000f, 0.000403f, -0.000866f, -0.000908f, 1.000000f } },
		{ -70.000000f, { 0.999542f, 0.002121f, -0.030181f, 0.000000f, -0.003995f, 0.998058f, -0.062161f, 0.000000f, 0.029991f, 0.062253f, 0.997610f, 0.000000f, 0.000458f, -0.000192f, 0.005056f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.961565f, 0.190579f, 0.197666f, 0.000000f, -0.167634f, 0.977622f, -0.127101f, 0.000000f, -0.217465f, 0.089080f, 0.971995f, 0.000000f, -0.003452f, 0.015629f, -0.002418f, 1.000000f } },
		{ -35.000000f, { 0.994449f, -0.089564f, -0.055215f, 0.000000f, 0.090238f, 0.995872f, 0.009840f, 0.000000f, 0.054106f, -0.014768f, 0.998426f, 0.000000f, 0.000372f, -0.005552f, 0.000988f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.996676f, 0.070246f, 0.041250f, 0.000000f, -0.066183f, 0.993489f, -0.092733f, 0.000000f, -0.047495f, 0.089694f, 0.994836f, 0.000000f, 0.001585f, 0.002754f, 0.000217f, 1.000000f } },
		{ 70.000000f, { 0.974813f, -0.056057f, -0.215865f, 0.000000f, 0.130607f, 0.928054f, 0.348795f, 0.000000f, 0.180782f, -0.368204f, 0.912000f, 0.000000f, -0.005801f, 0.014725f, 0.002345f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.999417f, -0.027325f, 0.020461f, 0.000000f, 0.026040f, 0.997822f, 0.060604f, 0.000000f, -0.022072f, -0.060035f, 0.997952f, 0.000000f, 0.000143f, 0.002678f, 0.005012f, 1.000000f } },
		{ -70.000000f, { 0.996593f, 0.063457f, 0.052686f, 0.000000f, -0.061260f, 0.997225f, -0.042314f, 0.000000f, -0.055225f, 0.038943f, 0.997714f, 0.000000f, 0.002105f, -0.000263f, 0.000375f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.996025f, -0.078050f, 0.042920f, 0.000000f, 0.079843f, 0.995932f, -0.041762f, 0.000000f, -0.039486f, 0.045023f, 0.998205f, 0.000000f, 0.006065f, -0.004876f, -0.001726f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999762f, 0.018187f, -0.012043f, 0.000000f, -0.016877f, 0.994726f, 0.101168f, 0.000000f, 0.013819f, -0.100941f, 0.994796f, 0.000000f, 0.000466f, 0.003349f, 0.003235f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.997630f, 0.036799f, -0.058147f, 0.000000f, -0.034906f, 0.998837f, 0.033253f, 0.000000f, 0.059303f, -0.031145f, 0.997754f, 0.000000f, -0.000057f, 0.005387f, 0.005076f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.997357f, -0.046733f, 0.055629f, 0.000000f, 0.045386f, 0.998651f, 0.025236f, 0.000000f, -0.056733f, -0.022645f, 0.998133f, 0.000000f, 0.007529f, 0.003944f, 0.002485f, 1.000000f } },
		{ -70.000000f, { 0.998916f, 0.017204f, -0.043250f, 0.000000f, -0.014545f, 0.998029f, 0.061047f, 0.000000f, 0.044215f, -0.060351f, 0.997197f, 0.000000f, -0.001191f, -0.006893f, -0.005275f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.997655f, 0.063445f, 0.025675f, 0.000000f, -0.062195f, 0.996962f, -0.046884f, 0.000000f, -0.028572f, 0.045178f, 0.998570f, 0.000000f, 0.007452f, 0.003640f, -0.008419f, 1.000000f } },
		{ -50.000000f, { 0.997621f, -0.022576f, -0.065136f, 0.000000f, 0.025784f, 0.998473f, 0.048845f, 0.000000f, 0.063934f, -0.050408f, 0.996680f, 0.000000f, 0.007978f, 0.001322f, -0.000365f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.989782f, 0.111435f, -0.088961f, 0.000000f, -0.112734f, 0.993578f, -0.009705f, 0.000000f, 0.087308f, 0.019634f, 0.995988f, 0.000000f, -0.008662f, -0.012769f, -0.002037f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.997204f, -0.070353f, 0.025210f, 0.000000f, 0.070795f, 0.997344f, -0.017090f, 0.000000f, -0.023940f, 0.018827f, 0.999536f, 0.000000f, 0.013023f, 0.002407f, 0.000599f, 1.000000f } },
		{ -70.000000f, { 0.873526f, 0.485399f, -0.036620f, 0.000000f, -0.375569f, 0.624191f, -0.685079f, 0.000000f, -0.309678f, 0.612188f, 0.727548f, 0.000000f, -0.007882f, 0.012295f, -0.053182f, 1.000000f } },
		{ -35.000000f, { 0.994190f, 0.101796f, 0.034972f, 0.000000f, -0.086024f, 0.946751f, -0.310263f, 0.000000f, -0.064694f, 0.305452f, 0.950007f, 0.000000f, 0.000323f, 0.016060f, -0.018503f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 25.000000f, { 0.994050f, -0.108924f, 0.000347f, 0.000000f, 0.104980f, 0.958894f, 0.263633f, 0.000000f, -0.029048f, -0.262028f, 0.964623f, 0.000000f, 0.002859f, -0.010103f, 0.010254f, 1.000000f } },
		{ 50.000000f, { 0.976589f, -0.214274f, -0.018978f, 0.000000f, 0.186688f, 0.800408f, 0.569645f, 0.000000f, -0.106870f, -0.559852f, 0.821672f, 0.000000f, 0.001241f, -0.020790f, 0.009779f, 1.000000f } },
		{ -50.000000f, { 0.859089f, -0.471020f, 0.200264f, 0.000000f, 0.474816f, 0.879512f, 0.031751f, 0.000000f, -0.191090f, 0.067812f, 0.979227f, 0.000000f, -0.013087f, 0.022806f, -0.020399f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.725917f, 0.605735f, -0.325774f, 0.000000f, -0.622975f, 0.779799f, 0.061769f, 0.000000f, 0.291454f, 0.158110f, 0.943428f, 0.000000f, -0.006377f, -0.030185f, 0.018482f, 1.000000f } },
		{ -70.000000f, { 0.499256f, -0.212691f, -0.839944f, 0.000000f, 0.273822f, 0.958452f, -0.079942f, 0.000000f, 0.822049f, -0.190084f, 0.536753f, 0.000000f, 0.067837f, 0.010587f, 0.038561f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.388754f, 0.299534f, 0.871292f, 0.000000f, -0.317320f, 0.931349f, -0.178598f, 0.000000f, -0.864973f, -0.207048f, 0.457114f, 0.000000f, 0.018855f, -0.035756f, -0.073093f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.997944f, -0.062677f, 0.013372f, 0.000000f, 0.062631f, 0.998029f, 0.003835f, 0.000000f, -0.013586f, -0.002990f, 0.999903f, 0.000000f, -0.001094f, 0.001586f, -0.001866f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.998891f, -0.046105f, 0.009504f, 0.000000f, 0.046535f, 0.997586f, -0.051541f, 0.000000f, -0.007105f, 0.051926f, 0.998626f, 0.000000f, 0.000236f, -0.002523f, -0.001089f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.997924f, -0.003951f, 0.064275f, 0.000000f, 0.005357f, 0.999750f, -0.021717f, 0.000000f, -0.064173f, 0.022016f, 0.997696f, 0.000000f, -0.007237f, 0.000548f, 0.002409f, 1.000000f } },
		{ -50.000000f, { 0.996177f, -0.055495f, 0.067458f, 0.000000f, 0.056934f, 0.998186f, -0.019589f, 0.000000f, -0.066249f, 0.023355f, 0.997530f, 0.000000f, 0.003406f, -0.000870f, 0.002550f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.943147f, -0.291712f, -0.159304f, 0.000000f, 0.331219f, 0.784914f, 0.523645f, 0.000000f, -0.027714f, -0.546639f, 0.836910f, 0.000000f, 0.002134f, 0.017588f, -0.028832f, 1.000000f } },
		{ -35.000000f, { 0.993366f, -0.109089f, 0.036386f, 0.000000f, 0.103111f, 0.985022f, 0.138203f, 0.000000f, -0.050918f, -0.133534f, 0.989735f, 0.000000f, 0.001359f, 0.013213f, -0.017325f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.991640f, -0.004192f, -0.128965f, 0.000000f, -0.029023f, 0.966614f, -0.254587f, 0.000000f, 0.125727f, 0.256202f, 0.958412f, 0.000000f, 0.003235f, -0.007207f, 0.017573f, 1.000000f } },
		{ 70.000000f, { 0.786578f, 0.558431f, -0.263535f, 0.000000f, -0.527053f, 0.384795f, -0.757726f, 0.000000f, -0.321731f, 0.734907f, 0.596993f, 0.000000f, 0.009454f, -0.023422f, 0.067122f, 1.000000f } },
		{ -50.000000f, { 0.805231f, 0.528999f, -0.267886f, 0.000000f, -0.510829f, 0.848271f, 0.139608f, 0.000000f, 0.301092f, 0.024427f, 0.953282f, 0.000000f, -0.026543f, 0.010371f, -0.012466f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.700039f, -0.644907f, 0.306661f, 0.000000f, 0.677254f, 0.735748f, 0.001253f, 0.000000f, -0.226434f, 0.206811f, 0.951818f, 0.000000f, 0.005106f, -0.030658f, 0.019800f, 1.000000f } },
		{ -70.000000f, { 0.849298f, 0.359593f, 0.386504f, 0.000000f, -0.379657f, 0.924759f, -0.026119f, 0.000000f, -0.366815f, -0.124556f, 0.921918f, 0.000000f, 0.034030f, 0.066442f, 0.035228f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.629125f, -0.727846f, -0.272841f, 0.000000f, 0.710161f, 0.680919f, -0.178945f, 0.000000f, 0.316026f, -0.081182f, 0.945271f, 0.000000f, -0.069787f, -0.008338f, -0.004782f, 1.000000f } },
		{ -70.000000f, { 0.997929f, -0.044370f, -0.046579f, 0.000000f, 0.063078f, 0.532763f, 0.843911f, 0.000000f, -0.012629f, -0.845101f, 0.534458f, 0.000000f, 0.001442f, 0.042307f, -0.018146f, 1.000000f } },
		{ -35.000000f, { 0.999278f, -0.037986f, -0.000765f, 0.000000f, 0.033971f, 0.884274f, 0.465731f, 0.000000f, -0.017015f, -0.465420f, 0.884926f, 0.000000f, 0.000602f, 0.018524f, -0.016657f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.988019f, 0.087264f, -0.127291f, 0.000000f, -0.134389f, 0.891995f, -0.431607f, 0.000000f, 0.075880f, 0.443542f, 0.893035f, 0.000000f, -0.000596f, -0.005177f, 0.024590f, 1.000000f } },
		{ 70.000000f, { 0.987129f, -0.062026f, -0.147407f, 0.000000f, -0.082822f, 0.590220f, -0.802982f, 0.000000f, 0.136808f, 0.804856f, 0.577487f, 0.000000f, -0.001099f, 0.007747f, 0.044599f, 1.000000f } },
		{ -50.000000f, { 0.730955f, 0.322272f, -0.601536f, 0.000000f, -0.240199f, 0.946560f, 0.215241f, 0.000000f, 0.638756f, -0.012843f, 0.769302f, 0.000000f, -0.039425f, 0.005612f, -0.019133f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.712914f, -0.450918f, 0.537054f, 0.000000f, 0.423817f, 0.887209f, 0.182316f, 0.000000f, -0.558689f, 0.097637f, 0.823610f, 0.000000f, 0.015537f, -0.012611f, 0.045976f, 1.000000f } },
		{ -70.000000f, { 0.634349f, 0.771545f, 0.048159f, 0.000000f, -0.771118f, 0.627139f, 0.109882f, 0.000000f, 0.054576f, -0.106840f, 0.992777f, 0.000000f, 0.013562f, 0.067115f, 0.003590f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.488266f, -0.872355f, -0.024341f, 0.000000f, 0.872454f, 0.488597f, -0.009879f, 0.000000f, 0.020511f, -0.016413f, 0.999655f, 0.000000f, -0.058061f, -0.018946f, 0.000820f, 1.000000f } },
		{ -70.000000f, { 0.996033f, -0.064553f, 0.061247f, 0.000000f, 0.069571f, 0.994061f, -0.083684f, 0.000000f, -0.055481f, 0.087613f, 0.994608f, 0.000000f, 0.001711f, 0.001129f, 0.003355f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.982021f, 0.158522f, -0.102499f, 0.000000f, -0.140179f, 0.976031f, 0.166470f, 0.000000f, 0.126431f, -0.149109f, 0.980705f, 0.000000f, -0.001244f, 0.003194f, 0.000560f, 1.000000f } },
		{ 70.000000f, { 0.972451f, 0.185094f, -0.141702f, 0.000000f, -0.145653f, 0.957075f, 0.250586f, 0.000000f, 0.182001f, -0.223043f, 0.957668f, 0.000000f, -0.000968f, -0.000980f, 0.000118f, 1.000000f } },
		{ -50.000000f, { 0.999525f, 0.030824f, 0.000058f, 0.000000f, -0.030786f, 0.998202f, 0.051421f, 0.000000f, 0.001527f, -0.051399f, 0.998677f, 0.000000f, -0.001241f, 0.000237f, 0.003280f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.990282f, -0.084573f, 0.110400f, 0.000000f, 0.082687f, 0.996342f, 0.021562f, 0.000000f, -0.111820f, -0.012223f, 0.993653f, 0.000000f, -0.004231f, -0.000910f, 0.003626f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.995198f, 0.084598f, -0.049244f, 0.000000f, -0.083711f, 0.996293f, 0.019798f, 0.000000f, 0.050736f, -0.015581f, 0.998591f, 0.000000f, -0.000973f, 0.004306f, -0.000194f, 1.000000f } },
		{ -70.000000f, { 0.971450f, -0.206817f, 0.116238f, 0.000000f, 0.218509f, 0.970815f, -0.098850f, 0.000000f, -0.092402f, 0.121427f, 0.988290f, 0.000000f, 0.003790f, -0.010666f, 0.005923f, 1.000000f } },
		{ -35.000000f, { 0.996012f, -0.056102f, 0.069377f, 0.000000f, 0.058076f, 0.997953f, -0.026767f, 0.000000f, -0.067733f, 0.030689f, 0.997231f, 0.000000f, 0.001499f, -0.003102f, 0.002506f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.993711f, 0.107778f, -0.030366f, 0.000000f, -0.105802f, 0.992544f, 0.060519f, 0.000000f, 0.036662f, -0.056926f, 0.997705f, 0.000000f, -0.002683f, -0.003367f, 0.002363f, 1.000000f } },
		{ -50.000000f, { 0.993142f, -0.105991f, 0.049335f, 0.000000f, 0.102795f, 0.992683f, 0.063355f, 0.000000f, -0.055689f, -0.057849f, 0.996771f, 0.000000f, 0.000930f, -0.004286f, 0.002429f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.984571f, -0.133505f, 0.113118f, 0.000000f, 0.129533f, 0.990694f, 0.041794f, 0.000000f, -0.117645f, -0.026497f, 0.992702f, 0.000000f, -0.000805f, -0.004814f, 0.007869f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.985930f, 0.148435f, -0.076867f, 0.000000f, -0.151839f, 0.987576f, -0.040486f, 0.000000f, 0.069903f, 0.051587f, 0.996219f, 0.000000f, -0.001268f, 0.007836f, -0.001007f, 1.000000f } },
		{ -35.000000f, { 0.994565f, -0.047164f, -0.092819f, 0.000000f, 0.051515f, 0.997656f, 0.045042f, 0.000000f, 0.090477f, -0.049579f, 0.994664f, 0.000000f, -0.000775f, -0.001706f, -0.008860f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.914266f, -0.251127f, 0.317889f, 0.000000f, 0.331662f, 0.914587f, -0.231367f, 0.000000f, -0.232635f, 0.316963f, 0.919465f, 0.000000f, 0.011222f, -0.022481f, 0.044549f, 1.000000f } },
		{ -50.000000f, { 0.997978f, 0.002971f, 0.063491f, 0.000000f, 0.000811f, 0.998231f, -0.059456f, 0.000000f, -0.063555f, 0.059388f, 0.996210f, 0.000000f, 0.003540f, -0.003708f, -0.002142f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.994933f, -0.081631f, 0.058695f, 0.000000f, 0.082757f, 0.996424f, -0.017019f, 0.000000f, -0.057096f, 0.021790f, 0.998131f, 0.000000f, 0.004939f, -0.005830f, 0.000163f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.980507f, -0.105604f, 0.165693f, 0.000000f, 0.084486f, 0.987946f, 0.129708f, 0.000000f, -0.177393f, -0.113181f, 0.977610f, 0.000000f, -0.001877f, -0.000487f, -0.008383f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.998600f, 0.052774f, 0.003678f, 0.000000f, -0.052726f, 0.998535f, -0.012172f, 0.000000f, -0.004315f, 0.011961f, 0.999919f, 0.000000f, -0.000379f, -0.002011f, -0.000999f, 1.000000f } },
		{ -70.000000f, { 0.999475f, -0.024383f, -0.021355f, 0.000000f, 0.026826f, 0.992066f, 0.122824f, 0.000000f, 0.018191f, -0.123332f, 0.992199f, 0.000000f, 0.003640f, 0.011919f, -0.008867f, 1.000000f } },
		{ -35.000000f, { 0.998988f, -0.034959f, -0.028295f, 0.000000f, 0.036538f, 0.997685f, 0.057362f, 0.000000f, 0.026224f, -0.058338f, 0.997952f, 0.000000f, 0.002131f, 0.004484f, -0.005023f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.995675f, 0.083959f, 0.039772f, 0.000000f, -0.081804f, 0.995237f, -0.053029f, 0.000000f, -0.044035f, 0.049546f, 0.997801f, 0.000000f, -0.002035f, -0.000637f, 0.003660f, 1.000000f } },
		{ -50.000000f, { 0.985381f, 0.160904f, -0.055978f, 0.000000f, -0.164118f, 0.984704f, -0.058513f, 0.000000f, 0.045706f, 0.066845f, 0.996716f, 0.000000f, 0.007943f, -0.002681f, 0.000599f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.995351f, -0.085055f, -0.045184f, 0.000000f, 0.087653f, 0.994402f, 0.059012f, 0.000000f, 0.039912f, -0.062699f, 0.997234f, 0.000000f, -0.006769f, 0.009480f, 0.000530f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.993466f, 0.081182f, -0.080211f, 0.000000f, -0.085500f, 0.994984f, -0.051938f, 0.000000f, 0.075592f, 0.058457f, 0.995424f, 0.000000f, -0.005398f, -0.000035f, 0.004236f, 1.000000f } },
		{ -70.000000f, { 0.998173f, -0.053117f, 0.028798f, 0.000000f, 0.035219f, 0.898766f, 0.437011f, 0.000000f, -0.049095f, -0.435199f, 0.898995f, 0.000000f, 0.000286f, 0.023521f, -0.029694f, 1.000000f } },
		{ -35.000000f, { 0.996017f, -0.085674f, -0.024718f, 0.000000f, 0.089158f, 0.952644f, 0.290724f, 0.000000f, -0.001360f, -0.291770f, 0.956488f, 0.000000f, 0.004567f, 0.012949f, -0.015032f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.993549f, 0.097913f, 0.057216f, 0.000000f, -0.066661f, 0.912403f, -0.403829f, 0.000000f, -0.091744f, 0.397410f, 0.913044f, 0.000000f, -0.005389f, 0.001472f, 0.014587f, 1.000000f } },
		{ 70.000000f, { 0.790486f, -0.586705f, 0.175811f, 0.000000f, 0.464987f, 0.388039f, -0.795747f, 0.000000f, 0.398647f, 0.710776f, 0.579550f, 0.000000f, -0.011924f, -0.012291f, 0.056138f, 1.000000f } },
		{ -50.000000f, { 0.855154f, 0.465760f, -0.227550f, 0.000000f, -0.473797f, 0.880374f, 0.021419f, 0.000000f, 0.210306f, 0.089496f, 0.973531f, 0.000000f, 0.002205f, -0.019666f, 0.015250f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.873978f, -0.420879f, 0.242946f, 0.000000f, 0.404008f, 0.907103f, 0.118077f, 0.000000f, -0.270073f, -0.005045f, 0.962826f, 0.000000f, 0.017133f, 0.003936f, -0.011942f, 1.000000f } },
		{ -70.000000f, { 0.554807f, 0.758560f, 0.341725f, 0.000000f, -0.769486f, 0.624032f, -0.135924f, 0.000000f, -0.316353f, -0.187541f, 0.929919f, 0.000000f, 0.064109f, -0.019364f, -0.002410f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.835338f, -0.531455f, -0.140593f, 0.000000f, 0.548662f, 0.821960f, 0.152811f, 0.000000f, 0.034350f, -0.204787f, 0.978204f, 0.000000f, -0.030281f, 0.064840f, 0.033164f, 1.000000f } },
		{ -70.000000f, { 0.999592f, -0.025429f, 0.013024f, 0.000000f, 0.001288f, 0.495510f, 0.868601f, 0.000000f, -0.028541f, -0.868230f, 0.495340f, 0.000000f, 0.000140f, 0.041554f, -0.018392f, 1.000000f } },
		{ -35.000000f, { 0.999910f, -0.013415f, -0.000609f, 0.000000f, 0.011920f, 0.865813f, 0.500225f, 0.000000f, -0.006183f, -0.500187f, 0.865895f, 0.000000f, 0.000490f, 0.017806f, -0.016133f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.990448f, -0.074269f, 0.116178f, 0.000000f, 0.118666f, 0.888206f, -0.443856f, 0.000000f, -0.070225f, 0.453403f, 0.888535f, 0.000000f, -0.001583f, -0.011279f, 0.027255f, 1.000000f } },
		{ 70.000000f, { 0.995167f, 0.039367f, -0.089961f, 0.000000f, -0.098190f, 0.410706f, -0.906466f, 0.000000f, 0.001262f, 0.910918f, 0.412586f, 0.000000f, -0.001396f, 0.005535f, 0.044682f, 1.000000f } },
		{ -50.000000f, { 0.810034f, 0.239036f, -0.535450f, 0.000000f, -0.233326f, 0.969130f, 0.079662f, 0.000000f, 0.537963f, 0.060406f, 0.840801f, 0.000000f, -0.012310f, -0.003576f, 0.044761f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.743974f, -0.246381f, 0.621127f, 0.000000f, 0.184987f, 0.969153f, 0.162859f, 0.000000f, -0.642093f, -0.006262f, 0.766601f, 0.000000f, 0.033767f, 0.000451f, -0.021096f, 1.000000f } },
		{ -70.000000f, { 0.499273f, 0.866332f, 0.014003f, 0.000000f, -0.865776f, 0.499457f, -0.031213f, 0.000000f, -0.034034f, 0.003460f, 0.999415f, 0.000000f, 0.059804f, -0.019831f, 0.000714f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.618939f, -0.782312f, -0.070019f, 0.000000f, 0.784247f, 0.620449f, 0.000243f, 0.000000f, 0.043253f, -0.055062f, 0.997546f, 0.000000f, -0.011237f, 0.066344f, 0.002282f, 1.000000f } },
		{ -70.000000f, { 0.996854f, 0.025956f, -0.074892f, 0.000000f, -0.032372f, 0.995789f, -0.085770f, 0.000000f, 0.072350f, 0.087924f, 0.993496f, 0.000000f, -0.000619f, -0.000385f, 0.004336f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.998230f, -0.056157f, 0.019562f, 0.000000f, 0.055990f, 0.998391f, 0.009012f, 0.000000f, -0.020037f, -0.007901f, 0.999768f, 0.000000f, 0.000624f, 0.004230f, -0.001233f, 1.000000f } },
		{ 70.000000f, { 0.997609f, -0.056144f, 0.040300f, 0.000000f, 0.052388f, 0.994663f, 0.088883f, 0.000000f, -0.045075f, -0.086560f, 0.995226f, 0.000000f, 0.000518f, 0.005201f, 0.000976f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.997742f, 0.010924f, -0.066272f, 0.000000f, -0.009184f, 0.999606f, 0.026513f, 0.000000f, 0.066535f, -0.025844f, 0.997449f, 0.000000f, -0.000344f, 0.000077f, 0.004174f, 1.000000f } },
		{ -70.000000f, { 0.993877f, -0.108406f, -0.021364f, 0.000000f, 0.106422f, 0.991200f, -0.078718f, 0.000000f, 0.029709f, 0.075963f, 0.996668f, 0.000000f, 0.001654f, 0.007596f, 0.002455f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.994004f, 0.030535f, -0.104993f, 0.000000f, -0.033008f, 0.999215f, -0.021895f, 0.000000f, 0.104242f, 0.025230f, 0.994232f, 0.000000f, -0.000258f, -0.001706f, 0.007119f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.998222f, 0.054883f, -0.023271f, 0.000000f, -0.054924f, 0.998490f, -0.001132f, 0.000000f, 0.023174f, 0.002408f, 0.999729f, 0.000000f, -0.001060f, 0.002222f, -0.000434f, 1.000000f } },
		{ -50.000000f, { 0.988270f, -0.135665f, 0.070128f, 0.000000f, 0.135266f, 0.990754f, 0.010427f, 0.000000f, -0.070894f, -0.000818f, 0.997484f, 0.000000f, 0.001190f, 0.003857f, -0.000653f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.994927f, 0.077510f, -0.064131f, 0.000000f, -0.073159f, 0.995025f, 0.067618f, 0.000000f, 0.069053f, -0.062583f, 0.995648f, 0.000000f, 0.002078f, -0.004551f, 0.003354f, 1.000000f } },
		{ -70.000000f, { 0.996078f, -0.060775f, -0.064310f, 0.000000f, 0.057295f, 0.996861f, -0.054637f, 0.000000f, 0.067429f, 0.050738f, 0.996433f, 0.000000f, -0.000998f, 0.003515f, 0.005825f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.999811f, 0.005661f, 0.018603f, 0.000000f, -0.006693f, 0.998415f, 0.055884f, 0.000000f, -0.018257f, -0.055998f, 0.998264f, 0.000000f, 0.002329f, 0.001552f, 0.002411f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.953866f, 0.207502f, -0.216987f, 0.000000f, -0.211307f, 0.977403f, 0.005781f, 0.000000f, 0.213283f, 0.040337f, 0.976157f, 0.000000f, -0.003988f, -0.001597f, -0.005242f, 1.000000f } },
		{ -50.000000f, { 0.998617f, -0.052175f, 0.006471f, 0.000000f, 0.052147f, 0.998630f, 0.004447f, 0.000000f, -0.006695f, -0.004104f, 0.999969f, 0.000000f, 0.000596f, -0.000245f, 0.000312f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.997303f, 0.013670f, 0.072110f, 0.000000f, -0.021920f, 0.993136f, 0.114890f, 0.000000f, -0.070045f, -0.116161f, 0.990757f, 0.000000f, 0.000881f, 0.001982f, -0.009442f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.820315f, 0.367216f, -0.438446f, 0.000000f, -0.505776f, 0.823672f, -0.256428f, 0.000000f, 0.266971f, 0.432108f, 0.861400f, 0.000000f, -0.009258f, -0.024473f, 0.054061f, 1.000000f } },
		{ -50.000000f, { 0.997421f, -0.050139f, -0.051356f, 0.000000f, 0.048420f, 0.998242f, -0.034178f, 0.000000f, 0.052980f, 0.031603f, 0.998095f, 0.000000f, -0.002542f, -0.000875f, -0.001986f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.997339f, -0.072899f, 0.000188f, 0.000000f, 0.072899f, 0.997336f, 0.002591f, 0.000000f, -0.000376f, -0.002570f, 0.999997f, 0.000000f, -0.003700f, 0.000155f, -0.000699f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.997736f, 0.066976f, -0.006166f, 0.000000f, -0.066846f, 0.997576f, 0.019331f, 0.000000f, 0.007446f, -0.018875f, 0.999794f, 0.000000f, 0.003529f, 0.001468f, -0.000307f, 1.000000f } },
		{ -35.000000f, { 0.997289f, -0.073416f, 0.004873f, 0.000000f, 0.073080f, 0.996059f, 0.050266f, 0.000000f, -0.008544f, -0.049774f, 0.998724f, 0.000000f, 0.001602f, 0.004312f, 0.000994f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -50.000000f, { 0.997586f, 0.054808f, -0.042645f, 0.000000f, -0.055885f, 0.998137f, -0.024490f, 0.000000f, 0.041223f, 0.026815f, 0.998790f, 0.000000f, -0.002246f, -0.001658f, 0.001031f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.998313f, 0.057966f, -0.003302f, 0.000000f, -0.057968f, 0.998318f, -0.000563f, 0.000000f, 0.003263f, 0.000754f, 0.999994f, 0.000000f, -0.000530f, 0.000061f, -0.000522f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.983960f, 0.136778f, -0.114520f, 0.000000f, -0.130102f, 0.989439f, 0.063903f, 0.000000f, 0.122051f, -0.047978f, 0.991364f, 0.000000f, -0.001378f, 0.000216f, 0.000318f, 1.000000f } },
		{ -35.000000f, { 0.999222f, -0.018623f, -0.034763f, 0.000000f, 0.027084f, 0.964788f, 0.261632f, 0.000000f, 0.028667f, -0.262370f, 0.964542f, 0.000000f, -0.001828f, 0.003911f, -0.001807f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -50.000000f, { 0.993638f, -0.071294f, 0.087187f, 0.000000f, 0.074358f, 0.996705f, -0.032411f, 0.000000f, -0.084589f, 0.038688f, 0.995665f, 0.000000f, 0.000698f, -0.000122f, 0.000198f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.972318f, 0.198430f, -0.123385f, 0.000000f, -0.203544f, 0.978600f, -0.030202f, 0.000000f, 0.114751f, 0.054480f, 0.991899f, 0.000000f, 0.009368f, 0.002298f, -0.000968f, 1.000000f } },
		{ -0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.972442f, -0.188927f, 0.136613f, 0.000000f, 0.187147f, 0.981991f, 0.025878f, 0.000000f, -0.139042f, 0.000401f, 0.990286f, 0.000000f, -0.008859f, 0.002881f, -0.001256f, 1.000000f } },
		{ -30.000000f, { 0.999547f, 0.021362f, 0.021206f, 0.000000f, -0.026299f, 0.962502f, 0.269998f, 0.000000f, -0.014643f, -0.270433f, 0.962627f, 0.000000f, 0.000618f, -0.003574f, -0.004558f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.995734f, 0.064978f, -0.065506f, 0.000000f, -0.086263f, 0.907526f, -0.411042f, 0.000000f, 0.032740f, 0.414939f, 0.909260f, 0.000000f, 0.002088f, 0.002698f, 0.014073f, 1.000000f } },
		{ 100.000000f, { 0.999971f, -0.007300f, 0.002031f, 0.000000f, 0.007034f, 0.794734f, -0.606917f, 0.000000f, 0.002816f, 0.606913f, 0.794763f, 0.000000f, -0.000731f, 0.002165f, 0.072240f, 1.000000f } },
		{ -150.000000f, { 0.996555f, 0.060399f, 0.056839f, 0.000000f, -0.005038f, 0.728132f, -0.685419f, 0.000000f, -0.082785f, 0.682771f, 0.725928f, 0.000000f, -0.003021f, 0.029199f, -0.040113f, 1.000000f } },
		{ -75.000000f, { 0.998496f, -0.019071f, 0.051404f, 0.000000f, 0.033355f, 0.955394f, -0.293444f, 0.000000f, -0.043515f, 0.294717f, 0.954593f, 0.000000f, -0.000886f, 0.022454f, -0.008652f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.999106f, 0.040196f, -0.013118f, 0.000000f, -0.033452f, 0.941201f, 0.336188f, 0.000000f, 0.025860f, -0.335448f, 0.941704f, 0.000000f, 0.000029f, -0.012920f, -0.004213f, 1.000000f } },
		{ -150.000000f, { 0.833619f, -0.271193f, 0.481180f, 0.000000f, 0.550322f, 0.333400f, -0.765500f, 0.000000f, 0.047173f, 0.902939f, 0.427172f, 0.000000f, 0.000983f, 0.018586f, 0.039012f, 1.000000f } },
		{ -75.000000f, { 0.993461f, -0.111878f, 0.022776f, 0.000000f, 0.081996f, 0.560320f, -0.824208f, 0.000000f, 0.079449f, 0.820686f, 0.565829f, 0.000000f, 0.000983f, 0.004652f, 0.020384f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999768f, 0.019259f, 0.009597f, 0.000000f, -0.021308f, 0.948137f, 0.317146f, 0.000000f, -0.002992f, -0.317277f, 0.948328f, 0.000000f, 0.000249f, 0.006855f, -0.009529f, 1.000000f } },
		{ 70.000000f, { 0.999104f, 0.020769f, -0.036889f, 0.000000f, -0.005691f, 0.929366f, 0.369116f, 0.000000f, 0.041950f, -0.368575f, 0.928651f, 0.000000f, -0.000998f, -0.005025f, -0.029232f, 1.000000f } },
		{ -50.000000f, { 0.901750f, -0.016980f, 0.431924f, 0.000000f, 0.035351f, 0.998778f, -0.034538f, 0.000000f, -0.430810f, 0.046414f, 0.901248f, 0.000000f, 0.004678f, -0.000158f, 0.000680f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.896711f, 0.113954f, -0.427696f, 0.000000f, -0.083880f, 0.992531f, 0.088582f, 0.000000f, 0.434596f, -0.043558f, 0.899572f, 0.000000f, -0.003398f, -0.000247f, 0.002874f, 1.000000f } },
		{ -70.000000f, { 0.866254f, -0.497975f, -0.040301f, 0.000000f, 0.497622f, 0.867184f, -0.019072f, 0.000000f, 0.044446f, -0.003533f, 0.999006f, 0.000000f, -0.016200f, 0.013152f, 0.000137f, 1.000000f } },
		{ -0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.769968f, 0.637228f, 0.033021f, 0.000000f, -0.638031f, 0.768209f, 0.052644f, 0.000000f, 0.008179f, -0.061602f, 0.998067f, 0.000000f, 0.018369f, 0.009882f, 0.000301f, 1.000000f } },
		{ -50.000000f, { 0.997846f, -0.058824f, -0.029042f, 0.000000f, 0.058245f, 0.998094f, -0.020384f, 0.000000f, 0.030186f, 0.018649f, 0.999370f, 0.000000f, -0.001722f, 0.000490f, 0.000170f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.997105f, 0.075046f, -0.012240f, 0.000000f, -0.075360f, 0.996773f, -0.027660f, 0.000000f, 0.010125f, 0.028502f, 0.999542f, 0.000000f, -0.001062f, 0.014625f, 0.000256f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -50.000000f, { 0.997114f, -0.048516f, 0.058399f, 0.000000f, 0.047322f, 0.998645f, 0.021663f, 0.000000f, -0.059371f, -0.018837f, 0.998058f, 0.000000f, -0.007257f, 0.004002f, -0.007974f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.996261f, -0.022255f, 0.083481f, 0.000000f, 0.022934f, 0.999711f, -0.007183f, 0.000000f, -0.083297f, 0.009071f, 0.996484f, 0.000000f, 0.001994f, 0.000147f, 0.001071f, 1.000000f } },
		{ -35.000000f, { 0.903283f, -0.371471f, -0.214686f, 0.000000f, 0.345926f, 0.926556f, -0.147747f, 0.000000f, 0.253802f, 0.059192f, 0.965443f, 0.000000f, -0.007413f, 0.003594f, 0.001809f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.585651f, 0.794699f, 0.159583f, 0.000000f, -0.668807f, 0.585001f, -0.458772f, 0.000000f, -0.457941f, 0.161950f, 0.874106f, 0.000000f, 0.040535f, 0.041419f, -0.016955f, 1.000000f } },
		{ -50.000000f, { 0.979301f, 0.131043f, -0.154264f, 0.000000f, -0.126562f, 0.991209f, 0.038559f, 0.000000f, 0.157961f, -0.018237f, 0.987277f, 0.000000f, 0.013970f, 0.007073f, -0.006252f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.998052f, 0.060898f, 0.013518f, 0.000000f, -0.061160f, 0.997930f, 0.019870f, 0.000000f, -0.012280f, -0.020658f, 0.999711f, 0.000000f, -0.001127f, 0.000999f, 0.001289f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.998236f, -0.052796f, -0.027140f, 0.000000f, 0.052223f, 0.998406f, -0.021396f, 0.000000f, 0.028226f, 0.019941f, 0.999403f, 0.000000f, -0.000672f, 0.000341f, -0.000112f, 1.000000f } },
		{ -35.000000f, { 0.506287f, -0.809846f, -0.296350f, 0.000000f, 0.833861f, 0.547361f, -0.071217f, 0.000000f, 0.219885f, -0.211058f, 0.952420f, 0.000000f, -0.010766f, 0.010859f, -0.002880f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.928492f, 0.362405f, 0.081027f, 0.000000f, -0.116597f, 0.491664f, -0.862943f, 0.000000f, -0.352573f, 0.791789f, 0.498762f, 0.000000f, 0.033960f, 0.022358f, -0.000987f, 1.000000f } },
		{ -50.000000f, { 0.772155f, 0.046635f, -0.633720f, 0.000000f, -0.244607f, 0.942265f, -0.228700f, 0.000000f, 0.586467f, 0.331604f, 0.738982f, 0.000000f, -0.000368f, 0.013904f, -0.023972f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -30.000000f, { 0.998219f, -0.057458f, -0.016053f, 0.000000f, 0.057657f, 0.998262f, 0.012226f, 0.000000f, 0.015322f, -0.013129f, 0.999796f, 0.000000f, -0.001036f, 0.004714f, -0.003166f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 100.000000f, { 0.993099f, 0.112320f, -0.033741f, 0.000000f, -0.110894f, 0.992964f, 0.041524f, 0.000000f, 0.038168f, -0.037496f, 0.998568f, 0.000000f, 0.003671f, -0.006045f, 0.007844f, 1.000000f } },
		{ -35.000000f, { 0.997817f, 0.056286f, 0.034538f, 0.000000f, -0.055863f, 0.998352f, -0.013100f, 0.000000f, -0.035219f, 0.011142f, 0.999318f, 0.000000f, 0.004201f, 0.000805f, -0.000594f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.999780f, -0.006213f, 0.020030f, 0.000000f, 0.010141f, 0.979248f, -0.202412f, 0.000000f, -0.018357f, 0.202570f, 0.979096f, 0.000000f, -0.002472f, 0.038926f, -0.000267f, 1.000000f } },
		{ -35.000000f, { 0.999992f, -0.002236f, 0.003159f, 0.000000f, 0.002521f, 0.995656f, -0.093072f, 0.000000f, -0.002937f, 0.093079f, 0.995654f, 0.000000f, -0.001232f, 0.018363f, 0.005910f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -50.000000f, { 0.993382f, -0.114851f, 0.001163f, 0.000000f, 0.114842f, 0.993367f, 0.005848f, 0.000000f, -0.001827f, -0.005676f, 0.999982f, 0.000000f, -0.003467f, 0.007380f, 0.002977f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.993663f, 0.112203f, 0.006664f, 0.000000f, -0.112025f, 0.993441f, -0.022933f, 0.000000f, -0.009193f, 0.022041f, 0.999715f, 0.000000f, 0.004595f, -0.000493f, -0.000044f, 1.000000f } },
		{ -50.000000f, { 0.990279f, -0.048810f, 0.130253f, 0.000000f, 0.050918f, 0.998619f, -0.012905f, 0.000000f, -0.129444f, 0.019411f, 0.991397f, 0.000000f, -0.022995f, 0.006318f, -0.015141f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.992847f, 0.029189f, -0.115768f, 0.000000f, -0.034500f, 0.998429f, -0.044144f, 0.000000f, 0.114297f, 0.047822f, 0.992295f, 0.000000f, 0.024231f, 0.005059f, -0.005621f, 1.000000f } },
		{ -70.000000f, { 0.999844f, 0.009032f, 0.015153f, 0.000000f, -0.004108f, 0.954572f, -0.297953f, 0.000000f, -0.017155f, 0.297844f, 0.954460f, 0.000000f, -0.004062f, 0.053537f, -0.016641f, 1.000000f } },
		{ -35.000000f, { 0.999992f, 0.000130f, 0.004043f, 0.000000f, 0.000431f, 0.990379f, -0.138378f, 0.000000f, -0.004022f, 0.138379f, 0.990371f, 0.000000f, -0.002271f, 0.028331f, 0.000168f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999903f, -0.008889f, 0.010679f, 0.000000f, 0.007904f, 0.995997f, 0.089036f, 0.000000f, -0.011428f, -0.088943f, 0.995971f, 0.000000f, 0.002178f, -0.020473f, -0.016225f, 1.000000f } },
		{ -50.000000f, { 0.989613f, -0.114697f, -0.086667f, 0.000000f, 0.114045f, 0.993398f, -0.012454f, 0.000000f, 0.087523f, 0.002441f, 0.996159f, 0.000000f, 0.007889f, 0.004869f, 0.002772f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.983266f, 0.182171f, -0.001541f, 0.000000f, -0.181842f, 0.980906f, -0.068972f, 0.000000f, -0.011053f, 0.068098f, 0.997617f, 0.000000f, -0.004948f, -0.005227f, -0.005410f, 1.000000f } },
		{ -50.000000f, { 0.988498f, -0.013132f, 0.150661f, 0.000000f, 0.016038f, 0.999708f, -0.018087f, 0.000000f, -0.150380f, 0.020295f, 0.988420f, 0.000000f, -0.036391f, 0.008967f, -0.022225f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.986003f, 0.015900f, -0.165970f, 0.000000f, -0.026134f, 0.997877f, -0.059660f, 0.000000f, 0.164669f, 0.063162f, 0.984325f, 0.000000f, 0.037310f, 0.009435f, -0.008183f, 1.000000f } },
		{ -70.000000f, { 0.997370f, 0.069563f, -0.020357f, 0.000000f, -0.069204f, 0.997443f, 0.017857f, 0.000000f, 0.021547f, -0.016402f, 0.999633f, 0.000000f, -0.002208f, -0.003495f, -0.000534f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.999305f, 0.012678f, 0.035052f, 0.000000f, -0.014943f, 0.997763f, 0.065159f, 0.000000f, -0.034148f, -0.065637f, 0.997259f, 0.000000f, -0.001813f, -0.001230f, 0.000403f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.997622f, 0.057234f, -0.038401f, 0.000000f, -0.055782f, 0.997725f, 0.037869f, 0.000000f, 0.040481f, -0.035637f, 0.998545f, 0.000000f, -0.000670f, -0.002201f, 0.002518f, 1.000000f } },
		{ -35.000000f, { 0.970087f, 0.053861f, -0.236707f, 0.000000f, 0.033780f, 0.935640f, 0.351336f, 0.000000f, 0.240396f, -0.348823f, 0.905833f, 0.000000f, -0.000799f, -0.025599f, 0.000446f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.695213f, 0.261370f, -0.669601f, 0.000000f, -0.620118f, 0.689172f, -0.374827f, 0.000000f, 0.363501f, 0.675816f, 0.641201f, 0.000000f, -0.005079f, 0.068872f, -0.126958f, 1.000000f } },
		{ -50.000000f, { 0.988780f, -0.095259f, -0.115061f, 0.000000f, 0.089926f, 0.994657f, -0.050695f, 0.000000f, 0.119276f, 0.039779f, 0.992064f, 0.000000f, 0.037755f, 0.010160f, -0.017581f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.971562f, 0.149992f, 0.183223f, 0.000000f, -0.153811f, 0.988077f, 0.006729f, 0.000000f, -0.180029f, -0.034720f, 0.983048f, 0.000000f, -0.021425f, -0.000168f, 0.001554f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.985481f, -0.132025f, -0.106753f, 0.000000f, 0.132099f, 0.991216f, -0.006410f, 0.000000f, 0.106662f, -0.007785f, 0.994265f, 0.000000f, 0.018954f, -0.003088f, -0.003869f, 1.000000f } },
		{ -35.000000f, { 0.851663f, 0.474333f, -0.222887f, 0.000000f, -0.312050f, 0.800629f, 0.511486f, 0.000000f, 0.421065f, -0.366061f, 0.829882f, 0.000000f, 0.018365f, -0.064506f, 0.006068f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.961293f, -0.011040f, 0.275307f, 0.000000f, 0.157659f, 0.841490f, -0.516758f, 0.000000f, -0.225963f, 0.540160f, 0.810659f, 0.000000f, 0.002752f, 0.059536f, -0.108140f, 1.000000f } },
		{ -50.000000f, { 0.914985f, -0.178102f, -0.362053f, 0.000000f, 0.116369f, 0.975661f, -0.185860f, 0.000000f, 0.386343f, 0.127927f, 0.913441f, 0.000000f, 0.063000f, 0.009645f, -0.042152f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.996829f, -0.078622f, -0.012258f, 0.000000f, 0.078397f, 0.996763f, -0.017842f, 0.000000f, 0.013621f, 0.016824f, 0.999766f, 0.000000f, 0.001856f, -0.000474f, 0.000122f, 1.000000f } },
		{ -0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.997275f, 0.072333f, 0.014520f, 0.000000f, -0.072580f, 0.997213f, 0.017263f, 0.000000f, -0.013231f, -0.018270f, 0.999746f, 0.000000f, -0.002534f, 0.000656f, -0.000376f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.995913f, -0.075376f, 0.049751f, 0.000000f, 0.073594f, 0.996612f, 0.036732f, 0.000000f, -0.052351f, -0.032920f, 0.998086f, 0.000000f, -0.001951f, 0.000464f, -0.002578f, 1.000000f } },
		{ -35.000000f, { 0.995033f, 0.078574f, 0.061117f, 0.000000f, -0.082440f, 0.994568f, 0.063547f, 0.000000f, -0.055792f, -0.068270f, 0.996106f, 0.000000f, 0.001529f, 0.002761f, 0.000003f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.982492f, 0.075090f, -0.170500f, 0.000000f, -0.060206f, 0.994043f, 0.090853f, 0.000000f, 0.176307f, -0.078997f, 0.981160f, 0.000000f, 0.004783f, -0.003317f, -0.007138f, 1.000000f } },
		{ -50.000000f, { 0.987864f, 0.070994f, -0.138144f, 0.000000f, -0.079798f, 0.995047f, -0.059269f, 0.000000f, 0.133252f, 0.069573f, 0.988637f, 0.000000f, 0.003903f, 0.000868f, 0.002127f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.987797f, 0.123380f, -0.095046f, 0.000000f, -0.122220f, 0.992341f, 0.017953f, 0.000000f, 0.096533f, -0.006117f, 0.995311f, 0.000000f, -0.001788f, 0.000427f, 0.001465f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.997095f, -0.045671f, 0.060961f, 0.000000f, 0.040057f, 0.995107f, 0.090324f, 0.000000f, -0.064788f, -0.087620f, 0.994045f, 0.000000f, 0.000812f, -0.001298f, -0.001825f, 1.000000f } },
		{ -50.000000f, { 0.996142f, 0.036829f, -0.079651f, 0.000000f, -0.043151f, 0.995928f, -0.079159f, 0.000000f, 0.076411f, 0.082291f, 0.993675f, 0.000000f, 0.000701f, -0.000680f, 0.000714f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.997420f, 0.071511f, -0.006305f, 0.000000f, -0.071335f, 0.997144f, 0.024798f, 0.000000f, 0.008060f, -0.024284f, 0.999673f, 0.000000f, 0.000337f, -0.000234f, 0.000753f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.984697f, 0.132743f, -0.112919f, 0.000000f, -0.126077f, 0.989935f, 0.064286f, 0.000000f, 0.120316f, -0.049066f, 0.991522f, 0.000000f, 0.001100f, -0.000443f, -0.000148f, 1.000000f } },
		{ -35.000000f, { 0.999242f, 0.003354f, -0.038781f, 0.000000f, 0.007503f, 0.961001f, 0.276444f, 0.000000f, 0.038196f, -0.276526f, 0.960247f, 0.000000f, 0.001809f, -0.004041f, 0.001928f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -50.000000f, { 0.992759f, -0.078084f, 0.091281f, 0.000000f, 0.082604f, 0.995481f, -0.046834f, 0.000000f, -0.087212f, 0.054035f, 0.994723f, 0.000000f, -0.000462f, 0.000323f, -0.000709f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.973570f, 0.193362f, -0.121543f, 0.000000f, -0.198635f, 0.979526f, -0.032760f, 0.000000f, 0.112720f, 0.056037f, 0.992045f, 0.000000f, -0.009319f, -0.002320f, 0.000927f, 1.000000f } },
		{ -0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.973473f, -0.185629f, 0.133758f, 0.000000f, 0.184281f, 0.982616f, 0.022500f, 0.000000f, -0.135609f, 0.002746f, 0.990759f, 0.000000f, 0.008915f, -0.002847f, 0.001267f, 1.000000f } },
		{ -30.000000f, { 0.999559f, 0.022072f, 0.019889f, 0.000000f, -0.026603f, 0.962966f, 0.268306f, 0.000000f, -0.013230f, -0.268716f, 0.963128f, 0.000000f, -0.000549f, 0.003697f, 0.004643f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.995012f, 0.074367f, -0.066483f, 0.000000f, -0.095285f, 0.905785f, -0.412885f, 0.000000f, 0.029514f, 0.417160f, 0.908354f, 0.000000f, -0.002153f, -0.002921f, -0.014229f, 1.000000f } },
		{ 100.000000f, { 1.000000f, 0.000778f, -0.000114f, 0.000000f, -0.000685f, 0.791239f, -0.611507f, 0.000000f, -0.000385f, 0.611507f, 0.791239f, 0.000000f, 0.000678f, -0.002531f, -0.072679f, 1.000000f } },
		{ -150.000000f, { 0.992226f, 0.074272f, 0.099859f, 0.000000f, 0.000942f, 0.797891f, -0.602801f, 0.000000f, -0.124448f, 0.598208f, 0.791618f, 0.000000f, 0.003686f, -0.028079f, 0.039881f, 1.000000f } },
		{ -75.000000f, { 0.996943f, -0.022878f, 0.074703f, 0.000000f, 0.038570f, 0.975646f, -0.215932f, 0.000000f, -0.067943f, 0.218153f, 0.973547f, 0.000000f, 0.001315f, -0.022326f, 0.008322f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 1.000000f, -0.000090f, -0.000317f, 0.000000f, 0.000074f, 0.998707f, -0.050827f, 0.000000f, 0.000321f, 0.050827f, 0.998707f, 0.000000f, -0.000002f, 0.000175f, 0.001884f, 1.000000f } },
		{ 70.000000f, { 0.999191f, 0.036735f, -0.016364f, 0.000000f, -0.028531f, 0.934323f, 0.355283f, 0.000000f, 0.028340f, -0.354529f, 0.934615f, 0.000000f, -0.000164f, 0.013600f, 0.004499f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.997931f, -0.017469f, 0.061870f, 0.000000f, 0.018442f, 0.999715f, -0.015186f, 0.000000f, -0.061587f, 0.016295f, 0.997969f, 0.000000f, -0.000440f, -0.000083f, 0.001938f, 1.000000f } },
		{ -70.000000f, { 0.998533f, 0.051131f, 0.017831f, 0.000000f, -0.051131f, 0.998692f, -0.000427f, 0.000000f, -0.017830f, -0.000485f, 0.999841f, 0.000000f, 0.002512f, 0.000228f, -0.000034f, 1.000000f } },
		{ -0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -150.000000f, { 0.850049f, -0.485292f, 0.204716f, 0.000000f, 0.509939f, 0.661001f, -0.550491f, 0.000000f, 0.131832f, 0.572337f, 0.809352f, 0.000000f, -0.000801f, -0.022112f, -0.041686f, 1.000000f } },
		{ -75.000000f, { 0.989830f, -0.128257f, -0.061537f, 0.000000f, 0.041197f, 0.672488f, -0.738960f, 0.000000f, 0.136159f, 0.728910f, 0.670933f, 0.000000f, -0.001007f, -0.006696f, -0.021031f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999812f, 0.019366f, -0.000868f, 0.000000f, -0.018464f, 0.965001f, 0.261595f, 0.000000f, 0.005904f, -0.261530f, 0.965177f, 0.000000f, -0.000225f, -0.005803f, 0.008332f, 1.000000f } },
		{ 70.000000f, { 0.999665f, 0.016186f, -0.020183f, 0.000000f, -0.008652f, 0.944348f, 0.328834f, 0.000000f, 0.024382f, -0.328549f, 0.944172f, 0.000000f, 0.000321f, 0.007743f, 0.028983f, 1.000000f } },
		{ -50.000000f, { 0.928775f, -0.038784f, 0.368610f, 0.000000f, 0.045001f, 0.998953f, -0.008280f, 0.000000f, -0.367903f, 0.024278f, 0.929547f, 0.000000f, -0.003884f, 0.000157f, -0.000884f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.920446f, 0.125151f, -0.370293f, 0.000000f, -0.102706f, 0.991505f, 0.079808f, 0.000000f, 0.377136f, -0.035428f, 0.925480f, 0.000000f, 0.002876f, 0.000380f, -0.002958f, 1.000000f } },
		{ -70.000000f, { 0.904929f, -0.425550f, -0.003234f, 0.000000f, 0.425448f, 0.904836f, -0.016328f, 0.000000f, 0.009874f, 0.013400f, 0.999861f, 0.000000f, 0.014250f, -0.011121f, -0.000101f, 1.000000f } },
		{ -0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.826769f, 0.562528f, 0.003948f, 0.000000f, -0.561841f, 0.825369f, 0.055679f, 0.000000f, 0.028063f, -0.048252f, 0.998441f, 0.000000f, -0.016243f, -0.008032f, -0.000182f, 1.000000f } },
		{ -50.000000f, { 0.997918f, -0.053173f, -0.036490f, 0.000000f, 0.052866f, 0.998558f, -0.009320f, 0.000000f, 0.036933f, 0.007372f, 0.999291f, 0.000000f, 0.001149f, -0.000363f, -0.000153f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.996420f, 0.068356f, -0.049749f, 0.000000f, -0.074169f, 0.989212f, -0.126331f, 0.000000f, 0.040577f, 0.129568f, 0.990740f, 0.000000f, 0.001809f, -0.012032f, -0.004156f, 1.000000f } },
		{ -35.000000f, { 0.999764f, 0.017413f, -0.012957f, 0.000000f, -0.018314f, 0.997159f, -0.073061f, 0.000000f, 0.011648f, 0.073282f, 0.997243f, 0.000000f, 0.000882f, -0.004837f, -0.003851f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999707f, 0.024198f, -0.000769f, 0.000000f, -0.024034f, 0.995740f, 0.089019f, 0.000000f, 0.002920f, -0.088975f, 0.996030f, 0.000000f, -0.000740f, 0.000338f, 0.005887f, 1.000000f } },
		{ -50.000000f, { 0.998546f, -0.053644f, 0.005303f, 0.000000f, 0.053503f, 0.998283f, 0.023826f, 0.000000f, -0.006572f, -0.023507f, 0.999702f, 0.000000f, -0.012274f, -0.006406f, 0.002818f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.997870f, 0.020293f, 0.061995f, 0.000000f, -0.024954f, 0.996844f, 0.075356f, 0.000000f, -0.060271f, -0.076743f, 0.995228f, 0.000000f, 0.006262f, -0.005243f, 0.006048f, 1.000000f } },
		{ -70.000000f, { 0.997330f, -0.030581f, 0.066310f, 0.000000f, 0.026857f, 0.998050f, 0.056349f, 0.000000f, -0.067904f, -0.054418f, 0.996207f, 0.000000f, -0.000428f, -0.002160f, 0.000381f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999147f, 0.023640f, 0.033846f, 0.000000f, -0.025766f, 0.997630f, 0.063802f, 0.000000f, -0.032258f, -0.064620f, 0.997388f, 0.000000f, -0.001640f, -0.002039f, -0.000741f, 1.000000f } },
		{ 70.000000f, { 0.997322f, 0.065166f, 0.033210f, 0.000000f, -0.068748f, 0.990200f, 0.121561f, 0.000000f, -0.024962f, -0.123519f, 0.992028f, 0.000000f, -0.000097f, -0.004704f, 0.002402f, 1.000000f } },
		{ -50.000000f, { 0.994951f, -0.064245f, 0.077101f, 0.000000f, 0.065947f, 0.997628f, -0.019725f, 0.000000f, -0.075651f, 0.024710f, 0.996828f, 0.000000f, -0.001704f, 0.000976f, -0.000346f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.994764f, 0.091471f, 0.045574f, 0.000000f, -0.091301f, 0.995806f, -0.005795f, 0.000000f, -0.045913f, 0.001604f, 0.998944f, 0.000000f, -0.005005f, -0.001615f, -0.000978f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.916716f, -0.350461f, -0.191855f, 0.000000f, 0.323506f, 0.932885f, -0.158334f, 0.000000f, 0.234468f, 0.083081f, 0.968567f, 0.000000f, 0.007264f, -0.004227f, 0.002470f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.661019f, 0.744040f, 0.097254f, 0.000000f, -0.618540f, 0.613666f, -0.490736f, 0.000000f, -0.424809f, 0.264230f, 0.865864f, 0.000000f, -0.039628f, -0.038396f, 0.020566f, 1.000000f } },
		{ -50.000000f, { 0.975349f, 0.138099f, -0.172115f, 0.000000f, -0.134174f, 0.990364f, 0.034293f, 0.000000f, 0.175192f, -0.010354f, 0.984480f, 0.000000f, -0.014247f, -0.006353f, 0.005960f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.997637f, 0.066844f, 0.015868f, 0.000000f, -0.067201f, 0.997470f, 0.023177f, 0.000000f, -0.014279f, -0.024188f, 0.999605f, 0.000000f, 0.001471f, -0.001188f, -0.001549f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.997999f, -0.051478f, -0.036708f, 0.000000f, 0.050375f, 0.998269f, -0.030367f, 0.000000f, 0.038208f, 0.028457f, 0.998865f, 0.000000f, 0.000592f, -0.000183f, 0.000065f, 1.000000f } },
		{ -35.000000f, { 0.585988f, -0.772957f, -0.243221f, 0.000000f, 0.794084f, 0.607552f, -0.017628f, 0.000000f, 0.161395f, -0.182808f, 0.969811f, 0.000000f, 0.003206f, -0.014504f, 0.006448f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.947015f, 0.320242f, 0.024657f, 0.000000f, -0.113563f, 0.405657f, -0.906943f, 0.000000f, -0.300443f, 0.856088f, 0.420531f, 0.000000f, -0.032882f, -0.022060f, -0.001584f, 1.000000f } },
		{ -50.000000f, { 0.824338f, 0.045573f, -0.564260f, 0.000000f, -0.229688f, 0.937948f, -0.259802f, 0.000000f, 0.517407f, 0.343768f, 0.783654f, 0.000000f, -0.001267f, -0.014668f, 0.020265f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -30.000000f, { 0.997869f, -0.062552f, -0.018564f, 0.000000f, 0.062510f, 0.998040f, -0.002810f, 0.000000f, 0.018703f, 0.001643f, 0.999824f, 0.000000f, 0.000544f, -0.004486f, 0.002612f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.998714f, -0.043709f, -0.025675f, 0.000000f, 0.044950f, 0.997740f, 0.049941f, 0.000000f, 0.023434f, -0.051031f, 0.998422f, 0.000000f, -0.001783f, 0.005284f, -0.006283f, 1.000000f } },
		{ 100.000000f, { 0.993734f, 0.095703f, -0.057745f, 0.000000f, -0.092101f, 0.993810f, 0.062115f, 0.000000f, 0.063332f, -0.056407f, 0.996397f, 0.000000f, -0.003316f, 0.005542f, -0.007673f, 1.000000f } },
		{ -70.000000f, { 0.999181f, -0.014843f, 0.037655f, 0.000000f, 0.021206f, 0.984401f, -0.174657f, 0.000000f, -0.034475f, 0.175312f, 0.983909f, 0.000000f, 0.002205f, -0.037659f, -0.000469f, 1.000000f } },
		{ -35.000000f, { 0.999954f, -0.002711f, 0.009219f, 0.000000f, 0.003490f, 0.996328f, -0.085551f, 0.000000f, -0.008953f, 0.085579f, 0.996291f, 0.000000f, 0.001188f, -0.017783f, -0.006017f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -50.000000f, { 0.994172f, 0.103410f, 0.030486f, 0.000000f, -0.103102f, 0.994604f, -0.011515f, 0.000000f, -0.031512f, 0.008305f, 0.999469f, 0.000000f, -0.004445f, 0.000561f, 0.000354f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.993677f, -0.111812f, -0.010203f, 0.000000f, 0.111873f, 0.993707f, 0.005582f, 0.000000f, 0.009515f, -0.006689f, 0.999932f, 0.000000f, 0.003121f, -0.006893f, -0.003037f, 1.000000f } },
		{ -50.000000f, { 0.995510f, 0.032452f, -0.088925f, 0.000000f, -0.035426f, 0.998857f, -0.032076f, 0.000000f, 0.087783f, 0.035082f, 0.995522f, 0.000000f, -0.023068f, -0.004879f, 0.005679f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.994124f, -0.047233f, 0.097397f, 0.000000f, 0.048839f, 0.998706f, -0.014173f, 0.000000f, -0.096601f, 0.018846f, 0.995145f, 0.000000f, 0.021519f, -0.006297f, 0.013938f, 1.000000f } },
		{ -70.000000f, { 0.995161f, -0.040989f, 0.089301f, 0.000000f, 0.059430f, 0.974840f, -0.214838f, 0.000000f, -0.078248f, 0.219105f, 0.972559f, 0.000000f, 0.002581f, -0.051396f, 0.016793f, 1.000000f } },
		{ -35.000000f, { 0.999266f, -0.024134f, 0.029738f, 0.000000f, 0.026955f, 0.994779f, -0.098429f, 0.000000f, -0.027207f, 0.099158f, 0.994700f, 0.000000f, 0.001496f, -0.027347f, -0.000143f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -50.000000f, { 0.965914f, 0.257177f, -0.029494f, 0.000000f, -0.258490f, 0.964356f, -0.056573f, 0.000000f, 0.013894f, 0.062268f, 0.997963f, 0.000000f, 0.006461f, 0.008515f, 0.004458f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.992285f, -0.061460f, -0.107672f, 0.000000f, 0.058592f, 0.997843f, -0.029604f, 0.000000f, 0.109259f, 0.023067f, 0.993746f, 0.000000f, -0.006552f, -0.002968f, -0.001736f, 1.000000f } },
		{ -50.000000f, { 0.970416f, 0.061128f, -0.233574f, 0.000000f, -0.084106f, 0.992411f, -0.089706f, 0.000000f, 0.226317f, 0.106697f, 0.968192f, 0.000000f, -0.033935f, -0.009840f, 0.007428f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.974896f, -0.124396f, 0.184671f, 0.000000f, 0.124323f, 0.992169f, 0.012020f, 0.000000f, -0.184720f, 0.011241f, 0.982727f, 0.000000f, 0.031687f, -0.010598f, 0.022375f, 1.000000f } },
		{ -70.000000f, { 0.968405f, 0.212036f, -0.131269f, 0.000000f, -0.213676f, 0.976903f, 0.001631f, 0.000000f, 0.128583f, 0.026470f, 0.991345f, 0.000000f, 0.004040f, 0.005335f, -0.001864f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.997995f, 0.048442f, -0.040739f, 0.000000f, -0.050303f, 0.997675f, -0.045971f, 0.000000f, 0.038417f, 0.047929f, 0.998112f, 0.000000f, 0.000895f, 0.001335f, 0.000007f, 1.000000f } },
		{ -50.000000f, { 0.999658f, -0.000572f, 0.026133f, 0.000000f, -0.001254f, 0.997559f, 0.069821f, 0.000000f, -0.026109f, -0.069829f, 0.997217f, 0.000000f, 0.001009f, 0.000941f, -0.001979f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.983602f, -0.041701f, -0.175465f, 0.000000f, 0.031040f, 0.997526f, -0.063074f, 0.000000f, 0.177662f, 0.056593f, 0.982463f, 0.000000f, -0.007861f, 0.002071f, 0.008625f, 1.000000f } },
		{ -35.000000f, { 0.998067f, 0.059191f, -0.018924f, 0.000000f, -0.059402f, 0.998176f, -0.010770f, 0.000000f, 0.018252f, 0.011873f, 0.999763f, 0.000000f, -0.000041f, -0.000631f, -0.000261f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.998578f, -0.053302f, 0.000683f, 0.000000f, 0.053260f, 0.998155f, 0.029165f, 0.000000f, -0.002236f, -0.029087f, 0.999574f, 0.000000f, -0.000669f, 0.001408f, 0.002043f, 1.000000f } },
		{ -35.000000f, { 0.941032f, 0.179925f, -0.286506f, 0.000000f, -0.092006f, 0.951040f, 0.295057f, 0.000000f, 0.325567f, -0.251298f, 0.911513f, 0.000000f, 0.001768f, 0.027700f, -0.000538f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.726324f, 0.164032f, -0.667493f, 0.000000f, -0.545104f, 0.729018f, -0.413997f, 0.000000f, 0.418706f, 0.664549f, 0.618918f, 0.000000f, 0.004375f, -0.069825f, 0.121619f, 1.000000f } },
		{ -50.000000f, { 0.975177f, -0.183889f, -0.123350f, 0.000000f, 0.168302f, 0.977550f, -0.126769f, 0.000000f, 0.143892f, 0.102862f, 0.984233f, 0.000000f, -0.040166f, -0.012402f, 0.019256f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.975236f, 0.132769f, 0.176879f, 0.000000f, -0.136141f, 0.990665f, 0.007013f, 0.000000f, -0.174297f, -0.030920f, 0.984208f, 0.000000f, 0.021023f, 0.000282f, -0.001417f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.985537f, -0.147443f, -0.083528f, 0.000000f, 0.147758f, 0.989021f, -0.002432f, 0.000000f, 0.082969f, -0.009945f, 0.996503f, 0.000000f, -0.019424f, 0.003205f, 0.004420f, 1.000000f } },
		{ -35.000000f, { 0.687041f, 0.610088f, -0.394675f, 0.000000f, -0.461058f, 0.785844f, 0.412158f, 0.000000f, 0.561606f, -0.101201f, 0.821193f, 0.000000f, -0.016249f, 0.063068f, -0.006616f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.990393f, -0.019950f, 0.136835f, 0.000000f, 0.096302f, 0.809635f, -0.578980f, 0.000000f, -0.099236f, 0.586595f, 0.803778f, 0.000000f, -0.000576f, -0.056158f, 0.105872f, 1.000000f } },
		{ -50.000000f, { 0.926373f, -0.325648f, -0.189171f, 0.000000f, 0.299007f, 0.941368f, -0.156270f, 0.000000f, 0.228969f, 0.088201f, 0.969430f, 0.000000f, -0.063076f, -0.010479f, 0.045074f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.995826f, -0.082761f, 0.038483f, 0.000000f, 0.081964f, 0.996396f, 0.021842f, 0.000000f, -0.040152f, -0.018597f, 0.999021f, 0.000000f, -0.001767f, 0.000209f, -0.000050f, 1.000000f } },
		{ -0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.998225f, 0.058598f, -0.010598f, 0.000000f, -0.058725f, 0.998200f, -0.012134f, 0.000000f, 0.009868f, 0.012735f, 0.999870f, 0.000000f, 0.001858f, -0.000010f, 0.000614f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.995341f, -0.083925f, 0.047469f, 0.000000f, 0.083091f, 0.996355f, 0.019295f, 0.000000f, -0.048915f, -0.015261f, 0.998686f, 0.000000f, 0.001501f, -0.000712f, 0.002253f, 1.000000f } },
		{ -70.000000f, { 0.999862f, -0.016482f, 0.001850f, 0.000000f, 0.015487f, 0.967757f, 0.251407f, 0.000000f, -0.005934f, -0.251344f, 0.967880f, 0.000000f, -0.000712f, -0.002817f, -0.021727f, 1.000000f } },
		{ -35.000000f, { 0.999957f, 0.005813f, -0.007227f, 0.000000f, -0.004766f, 0.990527f, 0.137236f, 0.000000f, 0.007956f, -0.137196f, 0.990512f, 0.000000f, -0.000785f, -0.005251f, -0.010174f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999123f, -0.025705f, 0.033044f, 0.000000f, 0.029872f, 0.990731f, -0.132513f, 0.000000f, -0.029332f, 0.133384f, 0.990630f, 0.000000f, 0.001507f, 0.010986f, 0.004612f, 1.000000f } },
		{ -50.000000f, { 0.977288f, 0.052648f, -0.205272f, 0.000000f, -0.051815f, 0.998612f, 0.009433f, 0.000000f, 0.205484f, 0.001418f, 0.978659f, 0.000000f, 0.006078f, 0.001019f, -0.015850f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.996381f, -0.027893f, 0.080290f, 0.000000f, 0.032714f, 0.997699f, -0.059378f, 0.000000f, -0.078449f, 0.061790f, 0.995001f, 0.000000f, -0.014578f, -0.000397f, -0.000487f, 1.000000f } },
		{ -50.000000f, { 0.988516f, 0.151117f, 0.000361f, 0.000000f, -0.151107f, 0.988472f, -0.009436f, 0.000000f, -0.001783f, 0.009273f, 0.999955f, 0.000000f, 0.007386f, 0.014611f, -0.000937f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.975068f, -0.220464f, -0.025244f, 0.000000f, 0.219541f, 0.974980f, -0.034868f, 0.000000f, 0.032299f, 0.028457f, 0.999073f, 0.000000f, -0.014216f, -0.002174f, -0.001578f, 1.000000f } },
		{ -70.000000f, { 0.999475f, -0.016227f, -0.028043f, 0.000000f, 0.009389f, 0.973465f, -0.228642f, 0.000000f, 0.031009f, 0.228259f, 0.973107f, 0.000000f, 0.001229f, 0.021040f, -0.003168f, 1.000000f } },
		{ -35.000000f, { 0.997825f, 0.009924f, -0.065161f, 0.000000f, -0.015062f, 0.996774f, -0.078829f, 0.000000f, 0.064168f, 0.079639f, 0.994756f, 0.000000f, -0.000699f, 0.009223f, 0.000543f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.994328f, -0.106342f, -0.001628f, 0.000000f, 0.105280f, 0.981994f, 0.156855f, 0.000000f, -0.015082f, -0.156137f, 0.987620f, 0.000000f, 0.005756f, -0.002473f, -0.001105f, 1.000000f } },
		{ 70.000000f, { 0.991229f, 0.058222f, -0.118640f, 0.000000f, -0.045117f, 0.992875f, 0.110292f, 0.000000f, 0.124216f, -0.103972f, 0.986793f, 0.000000f, -0.005472f, -0.000125f, -0.013874f, 1.000000f } },
		{ -50.000000f, { 0.995581f, 0.088000f, 0.032771f, 0.000000f, -0.088617f, 0.995905f, 0.017882f, 0.000000f, -0.031063f, -0.020707f, 0.999303f, 0.000000f, -0.008429f, 0.005101f, 0.008280f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.999326f, -0.018928f, 0.031450f, 0.000000f, 0.021717f, 0.995630f, -0.090830f, 0.000000f, -0.029593f, 0.091452f, 0.995370f, 0.000000f, 0.001190f, -0.004588f, -0.008076f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999603f, -0.010361f, -0.026185f, 0.000000f, 0.012008f, 0.997905f, 0.063565f, 0.000000f, 0.025471f, -0.063854f, 0.997634f, 0.000000f, 0.000090f, 0.000385f, 0.001384f, 1.000000f } },
		{ 70.000000f, { 0.998886f, -0.012554f, -0.045489f, 0.000000f, 0.014819f, 0.998649f, 0.049807f, 0.000000f, 0.044802f, -0.050425f, 0.997722f, 0.000000f, 0.001461f, 0.001747f, 0.000943f, 1.000000f } },
		{ -70.000000f, { 0.999620f, 0.015162f, 0.022998f, 0.000000f, -0.013390f, 0.997068f, -0.075339f, 0.000000f, -0.024073f, 0.075003f, 0.996893f, 0.000000f, -0.000381f, 0.000051f, -0.004955f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.999390f, 0.034885f, 0.001359f, 0.000000f, -0.034772f, 0.998130f, -0.050282f, 0.000000f, -0.003111f, 0.050204f, 0.998734f, 0.000000f, -0.001760f, -0.000992f, -0.002195f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.994047f, -0.012361f, 0.108251f, 0.000000f, 0.005022f, 0.997686f, 0.067807f, 0.000000f, -0.108839f, -0.066859f, 0.991808f, 0.000000f, 0.004397f, -0.009636f, -0.025418f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.939743f, -0.092205f, 0.329212f, 0.000000f, 0.217085f, 0.904840f, -0.366248f, 0.000000f, -0.264115f, 0.415646f, 0.870334f, 0.000000f, -0.013973f, 0.082246f, 0.067014f, 1.000000f } },
		{ -50.000000f, { 0.926193f, 0.365562f, -0.092357f, 0.000000f, -0.371507f, 0.926621f, -0.057926f, 0.000000f, 0.064404f, 0.087962f, 0.994040f, 0.000000f, 0.030837f, 0.015012f, -0.001838f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.988936f, 0.068343f, -0.131661f, 0.000000f, -0.064682f, 0.997396f, 0.031888f, 0.000000f, 0.133498f, -0.023019f, 0.990782f, 0.000000f, 0.014651f, -0.001602f, -0.003433f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.986554f, -0.063958f, 0.150401f, 0.000000f, 0.062928f, 0.997951f, 0.011599f, 0.000000f, -0.150835f, -0.001978f, 0.988557f, 0.000000f, -0.013996f, 0.000524f, -0.004091f, 1.000000f } },
		{ -35.000000f, { 0.997648f, -0.060020f, -0.033096f, 0.000000f, 0.062813f, 0.993864f, 0.091042f, 0.000000f, 0.027428f, -0.092907f, 0.995297f, 0.000000f, -0.002511f, 0.001081f, -0.003354f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.917801f, 0.216301f, 0.332948f, 0.000000f, -0.074803f, 0.917761f, -0.390026f, 0.000000f, -0.389930f, 0.333061f, 0.858502f, 0.000000f, 0.005961f, 0.001886f, 0.012912f, 1.000000f } },
		{ -50.000000f, { 0.996226f, 0.081736f, -0.029211f, 0.000000f, -0.078960f, 0.993155f, 0.086069f, 0.000000f, 0.036046f, -0.083438f, 0.995861f, 0.000000f, -0.002808f, 0.001991f, 0.000529f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.997932f, -0.045956f, -0.044943f, 0.000000f, 0.048719f, 0.996860f, 0.062429f, 0.000000f, 0.041933f, -0.064490f, 0.997037f, 0.000000f, -0.003687f, 0.002378f, 0.003658f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999911f, -0.011973f, 0.005846f, 0.000000f, 0.012455f, 0.995778f, -0.090946f, 0.000000f, -0.004732f, 0.091011f, 0.995839f, 0.000000f, -0.002184f, -0.000805f, 0.000745f, 1.000000f } },
		{ -70.000000f, { 0.990565f, 0.064040f, 0.121161f, 0.000000f, -0.121945f, 0.815310f, 0.566038f, 0.000000f, -0.062535f, -0.575472f, 0.815427f, 0.000000f, -0.000814f, -0.001732f, -0.017669f, 1.000000f } },
		{ -35.000000f, { 0.998734f, 0.031795f, 0.038976f, 0.000000f, -0.042106f, 0.952361f, 0.302052f, 0.000000f, -0.027515f, -0.303311f, 0.952494f, 0.000000f, 0.000396f, -0.004505f, -0.008996f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999977f, -0.000398f, -0.006726f, 0.000000f, -0.001506f, 0.959816f, -0.280626f, 0.000000f, 0.006567f, 0.280629f, 0.959794f, 0.000000f, -0.002162f, 0.009752f, 0.006248f, 1.000000f } },
		{ -50.000000f, { 0.991585f, 0.098320f, -0.084214f, 0.000000f, -0.101748f, 0.994106f, -0.037419f, 0.000000f, 0.080038f, 0.045673f, 0.995745f, 0.000000f, 0.011790f, -0.003848f, -0.001844f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.984300f, -0.077576f, 0.158540f, 0.000000f, 0.067793f, 0.995499f, 0.066219f, 0.000000f, -0.162964f, -0.054431f, 0.985129f, 0.000000f, -0.005257f, 0.004964f, -0.015912f, 1.000000f } },
		{ -50.000000f, { 0.957002f, 0.289617f, -0.016406f, 0.000000f, -0.289868f, 0.952597f, -0.092392f, 0.000000f, -0.011130f, 0.093174f, 0.995588f, 0.000000f, 0.014041f, -0.006991f, 0.000554f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.966303f, -0.230616f, -0.114346f, 0.000000f, 0.215135f, 0.967463f, -0.133164f, 0.000000f, 0.141335f, 0.104077f, 0.984476f, 0.000000f, -0.007393f, 0.016746f, -0.000071f, 1.000000f } },
		{ -70.000000f, { 0.969939f, -0.227826f, -0.085517f, 0.000000f, 0.154278f, 0.847474f, -0.507924f, 0.000000f, 0.188192f, 0.479462f, 0.857147f, 0.000000f, -0.000378f, 0.022897f, -0.014886f, 1.000000f } },
		{ -35.000000f, { 0.992873f, 0.105083f, 0.056220f, 0.000000f, -0.109965f, 0.989644f, 0.092262f, 0.000000f, -0.045943f, -0.097787f, 0.994146f, 0.000000f, -0.001448f, 0.010818f, 0.005200f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.995584f, -0.053487f, -0.077143f, 0.000000f, 0.044723f, 0.992795f, -0.111164f, 0.000000f, 0.082533f, 0.107223f, 0.990803f, 0.000000f, -0.004851f, -0.000566f, -0.006845f, 1.000000f } },
		{ 70.000000f, { 0.997362f, -0.069042f, 0.022410f, 0.000000f, 0.069389f, 0.997476f, -0.015086f, 0.000000f, -0.021312f, 0.016601f, 0.999635f, 0.000000f, 0.014123f, 0.000361f, -0.012065f, 1.000000f } },
		{ -50.000000f, { 0.992602f, 0.040433f, -0.114482f, 0.000000f, -0.040953f, 0.999159f, -0.002189f, 0.000000f, 0.114297f, 0.006861f, 0.993423f, 0.000000f, -0.003837f, -0.004012f, -0.008571f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.992034f, -0.119349f, 0.040297f, 0.000000f, 0.122383f, 0.988933f, -0.083870f, 0.000000f, -0.029841f, 0.088133f, 0.995662f, 0.000000f, 0.011716f, 0.005398f, 0.003454f, 1.000000f } },
		{ -70.000000f, { 0.994988f, -0.090726f, -0.042049f, 0.000000f, 0.086150f, 0.991232f, -0.100186f, 0.000000f, 0.050770f, 0.096062f, 0.994080f, 0.000000f, 0.002204f, 0.001087f, -0.003657f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.999899f, 0.001581f, -0.014149f, 0.000000f, -0.002440f, 0.998140f, -0.060911f, 0.000000f, 0.014026f, 0.060939f, 0.998043f, 0.000000f, -0.001730f, 0.002636f, -0.001110f, 1.000000f } },
		{ -50.000000f, { 0.995261f, -0.044038f, -0.086701f, 0.000000f, 0.043174f, 0.998998f, -0.011818f, 0.000000f, 0.087134f, 0.008018f, 0.996164f, 0.000000f, -0.004275f, 0.004458f, -0.000302f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.998415f, -0.052645f, -0.019891f, 0.000000f, 0.052394f, 0.998543f, -0.012906f, 0.000000f, 0.020541f, 0.011843f, 0.999719f, 0.000000f, 0.002489f, -0.000076f, -0.000917f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999553f, -0.016422f, -0.024966f, 0.000000f, 0.014976f, 0.998260f, -0.057036f, 0.000000f, 0.025860f, 0.056637f, 0.998060f, 0.000000f, 0.000031f, -0.001194f, 0.001519f, 1.000000f } },
		{ 70.000000f, { 0.998882f, -0.037139f, -0.029238f, 0.000000f, 0.035188f, 0.997289f, -0.064629f, 0.000000f, 0.031559f, 0.063528f, 0.997481f, 0.000000f, -0.001738f, -0.002281f, 0.003264f, 1.000000f } },
		{ -70.000000f, { 0.997371f, -0.028018f, -0.066829f, 0.000000f, 0.025540f, 0.998965f, -0.037648f, 0.000000f, 0.067814f, 0.035842f, 0.997054f, 0.000000f, 0.000155f, -0.002591f, -0.000304f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.999081f, 0.042803f, 0.002042f, 0.000000f, -0.042847f, 0.997100f, 0.062895f, 0.000000f, 0.000656f, -0.062924f, 0.998018f, 0.000000f, -0.002281f, -0.000840f, 0.000816f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.996549f, -0.040335f, 0.072549f, 0.000000f, 0.028646f, 0.987424f, 0.155479f, 0.000000f, -0.077908f, -0.152865f, 0.985171f, 0.000000f, -0.001833f, -0.004441f, -0.022460f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.945931f, -0.062212f, -0.318345f, 0.000000f, -0.148952f, 0.788523f, -0.596694f, 0.000000f, 0.288144f, 0.611850f, 0.736622f, 0.000000f, 0.022934f, 0.083967f, 0.075802f, 1.000000f } },
		{ -50.000000f, { 0.949117f, -0.304905f, 0.078800f, 0.000000f, 0.308940f, 0.950009f, -0.045145f, 0.000000f, -0.061096f, 0.067192f, 0.995868f, 0.000000f, -0.031765f, 0.014692f, -0.000712f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.995056f, -0.055821f, 0.082142f, 0.000000f, 0.055199f, 0.998427f, 0.009836f, 0.000000f, -0.082561f, -0.005253f, 0.996572f, 0.000000f, -0.013014f, -0.001961f, -0.002711f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.994317f, 0.067685f, -0.082177f, 0.000000f, -0.065115f, 0.997313f, 0.033569f, 0.000000f, 0.084228f, -0.028027f, 0.996052f, 0.000000f, 0.013061f, 0.000747f, -0.003837f, 1.000000f } },
		{ -35.000000f, { 0.998832f, 0.024782f, 0.041482f, 0.000000f, -0.031232f, 0.986149f, 0.162894f, 0.000000f, -0.036871f, -0.164000f, 0.985771f, 0.000000f, 0.004972f, 0.001844f, 0.000199f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.971522f, -0.188045f, -0.144164f, 0.000000f, 0.170880f, 0.977521f, -0.123499f, 0.000000f, 0.164147f, 0.095348f, 0.981817f, 0.000000f, -0.009991f, 0.004544f, 0.013210f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.994144f, -0.058894f, 0.090605f, 0.000000f, 0.058340f, 0.998258f, 0.008753f, 0.000000f, -0.090963f, -0.003416f, 0.995848f, 0.000000f, -0.001507f, 0.000795f, -0.000861f, 1.000000f } },
		{ 70.000000f, { 0.988943f, -0.109864f, 0.099603f, 0.000000f, 0.114381f, 0.992598f, -0.040815f, 0.000000f, -0.094382f, 0.051756f, 0.994190f, 0.000000f, -0.002438f, 0.002389f, 0.000092f, 1.000000f } },
		{ -70.000000f, { 0.938927f, -0.037391f, 0.342078f, 0.000000f, 0.040623f, 0.999172f, -0.002287f, 0.000000f, -0.341709f, 0.016043f, 0.939669f, 0.000000f, -0.004264f, 0.002849f, -0.000538f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.987460f, -0.016036f, 0.157054f, 0.000000f, 0.006222f, 0.998008f, 0.062784f, 0.000000f, -0.157748f, -0.061019f, 0.985592f, 0.000000f, -0.006513f, -0.000084f, 0.000449f, 1.000000f } },
		{ -100.000000f, { 0.461116f, -0.100595f, 0.881619f, 0.000000f, -0.001476f, 0.993465f, 0.114130f, 0.000000f, -0.887339f, -0.053929f, 0.457954f, 0.000000f, 0.008027f, 0.004307f, 0.004576f, 1.000000f } },
		{ -50.000000f, { 0.991274f, -0.088671f, 0.097537f, 0.000000f, 0.083374f, 0.994880f, 0.057112f, 0.000000f, -0.102102f, -0.048482f, 0.993592f, 0.000000f, -0.001626f, 0.012652f, -0.011814f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 30.000000f, { 0.996154f, 0.086393f, -0.014614f, 0.000000f, -0.085764f, 0.995542f, 0.039241f, 0.000000f, 0.017939f, -0.037837f, 0.999123f, 0.000000f, 0.001228f, -0.005347f, 0.004560f, 1.000000f } },
		{ -70.000000f, { 0.998233f, -0.029810f, 0.051402f, 0.000000f, 0.034400f, 0.995270f, -0.090854f, 0.000000f, -0.048451f, 0.092462f, 0.994537f, 0.000000f, -0.003929f, 0.011005f, -0.005358f, 1.000000f } },
		{ -35.000000f, { 0.999510f, -0.014039f, 0.027972f, 0.000000f, 0.015914f, 0.997560f, -0.067970f, 0.000000f, -0.026949f, 0.068382f, 0.997295f, 0.000000f, -0.002658f, 0.008427f, -0.002039f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.968938f, 0.246491f, -0.020041f, 0.000000f, -0.244125f, 0.966289f, 0.081789f, 0.000000f, 0.039525f, -0.074356f, 0.996448f, 0.000000f, 0.005384f, -0.019316f, 0.002839f, 1.000000f } },
		{ -50.000000f, { 0.998025f, -0.059868f, -0.019037f, 0.000000f, 0.059830f, 0.998205f, -0.002543f, 0.000000f, 0.019155f, 0.001399f, 0.999816f, 0.000000f, 0.002007f, 0.002675f, 0.000049f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.998967f, 0.045411f, 0.001907f, 0.000000f, -0.045252f, 0.997644f, -0.051565f, 0.000000f, -0.004244f, 0.051425f, 0.998668f, 0.000000f, -0.000508f, 0.003794f, 0.000877f, 1.000000f } },
		{ -70.000000f, { 0.993875f, -0.030070f, -0.106337f, 0.000000f, 0.029862f, 0.999548f, -0.003541f, 0.000000f, 0.106396f, 0.000344f, 0.994324f, 0.000000f, -0.000673f, -0.000179f, -0.000240f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -100.000000f, { 0.997361f, -0.045325f, -0.056713f, 0.000000f, 0.037077f, 0.989618f, -0.138856f, 0.000000f, 0.062418f, 0.136386f, 0.988687f, 0.000000f, -0.000090f, -0.001129f, -0.002603f, 1.000000f } },
		{ -50.000000f, { 0.994064f, -0.108796f, 0.000492f, 0.000000f, 0.106890f, 0.977473f, 0.181994f, 0.000000f, -0.020281f, -0.180861f, 0.983300f, 0.000000f, 0.001586f, 0.001080f, 0.003900f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 30.000000f, { 0.998727f, 0.048920f, -0.012280f, 0.000000f, -0.050205f, 0.987558f, -0.149025f, 0.000000f, 0.004837f, 0.149452f, 0.988757f, 0.000000f, -0.001274f, -0.002768f, -0.000501f, 1.000000f } },
		{ -70.000000f, { 0.998854f, 0.034778f, 0.032890f, 0.000000f, -0.024262f, 0.960150f, -0.278431f, 0.000000f, -0.041263f, 0.277314f, 0.959893f, 0.000000f, 0.000850f, 0.008444f, 0.007685f, 1.000000f } },
		{ -35.000000f, { 0.999708f, -0.016956f, 0.017205f, 0.000000f, 0.019249f, 0.989493f, -0.143293f, 0.000000f, -0.014595f, 0.143583f, 0.989531f, 0.000000f, 0.000248f, 0.002381f, 0.004777f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999515f, 0.030174f, -0.007659f, 0.000000f, -0.028583f, 0.986987f, 0.158236f, 0.000000f, 0.012334f, -0.157941f, 0.987372f, 0.000000f, -0.000206f, -0.002167f, -0.007753f, 1.000000f } },
		{ 70.000000f, { 0.972905f, 0.217366f, -0.078792f, 0.000000f, -0.189427f, 0.944783f, 0.267399f, 0.000000f, 0.132564f, -0.245229f, 0.960359f, 0.000000f, -0.003644f, -0.007586f, -0.020660f, 1.000000f } },
		{ -50.000000f, { 0.995620f, -0.073500f, 0.057777f, 0.000000f, 0.073676f, 0.997282f, -0.000925f, 0.000000f, -0.057552f, 0.005178f, 0.998329f, 0.000000f, 0.000040f, 0.000482f, -0.000524f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.995612f, 0.058557f, -0.072990f, 0.000000f, -0.058584f, 0.998281f, 0.001765f, 0.000000f, 0.072968f, 0.002519f, 0.997331f, 0.000000f, 0.000025f, -0.000782f, 0.000213f, 1.000000f } },
		{ -70.000000f, { 0.980818f, -0.160590f, -0.110486f, 0.000000f, 0.159744f, 0.987020f, -0.016522f, 0.000000f, 0.111705f, -0.001445f, 0.993740f, 0.000000f, -0.004588f, 0.000533f, 0.001200f, 1.000000f } },
		{ -0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.986692f, 0.134200f, 0.091807f, 0.000000f, -0.135036f, 0.990836f, 0.002928f, 0.000000f, -0.090573f, -0.015287f, 0.995773f, 0.000000f, 0.004851f, -0.000625f, -0.000612f, 1.000000f } },
		{ -50.000000f, { 0.997530f, 0.063817f, 0.029336f, 0.000000f, -0.063789f, 0.997962f, -0.001887f, 0.000000f, -0.029397f, 0.000011f, 0.999568f, 0.000000f, -0.001912f, -0.001194f, -0.000388f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.989229f, -0.135379f, -0.055657f, 0.000000f, 0.130023f, 0.987359f, -0.090638f, 0.000000f, 0.067224f, 0.082425f, 0.994327f, 0.000000f, 0.001277f, 0.000627f, -0.001463f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.996643f, 0.078809f, -0.022170f, 0.000000f, -0.078359f, 0.996715f, 0.020491f, 0.000000f, 0.023712f, -0.018685f, 0.999544f, 0.000000f, -0.004287f, 0.002482f, -0.000635f, 1.000000f } },
		{ -70.000000f, { 0.980307f, -0.009364f, -0.197258f, 0.000000f, 0.024710f, 0.996841f, 0.075482f, 0.000000f, 0.195928f, -0.078869f, 0.977441f, 0.000000f, -0.025731f, 0.001890f, -0.002516f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -100.000000f, { 0.883719f, 0.057189f, 0.464511f, 0.000000f, 0.317558f, 0.655811f, -0.684886f, 0.000000f, -0.343799f, 0.752756f, 0.561392f, 0.000000f, -0.006650f, 0.088910f, 0.016515f, 1.000000f } },
		{ -50.000000f, { 0.991437f, -0.057658f, 0.117164f, 0.000000f, 0.081647f, 0.973939f, -0.211607f, 0.000000f, -0.101909f, 0.219361f, 0.970307f, 0.000000f, 0.004709f, 0.036824f, -0.009882f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 30.000000f, { 0.999896f, -0.006627f, -0.012846f, 0.000000f, 0.009145f, 0.978258f, 0.207190f, 0.000000f, 0.011194f, -0.207286f, 0.978216f, 0.000000f, -0.000297f, -0.020272f, 0.010207f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.999962f, 0.000062f, -0.008666f, 0.000000f, -0.000549f, 0.998425f, -0.056103f, 0.000000f, 0.008648f, 0.056106f, 0.998387f, 0.000000f, -0.000398f, 0.002442f, -0.001072f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.995262f, -0.052762f, 0.081673f, 0.000000f, 0.052483f, 0.998606f, 0.005557f, 0.000000f, -0.081852f, -0.001244f, 0.996644f, 0.000000f, 0.001236f, -0.000926f, 0.000908f, 1.000000f } },
		{ 70.000000f, { 0.991566f, -0.099046f, 0.083585f, 0.000000f, 0.103998f, 0.992936f, -0.057115f, 0.000000f, -0.077337f, 0.065326f, 0.994863f, 0.000000f, 0.001983f, -0.002684f, -0.000031f, 1.000000f } },
		{ -70.000000f, { 0.936244f, -0.031839f, 0.349906f, 0.000000f, 0.034170f, 0.999416f, -0.000489f, 0.000000f, -0.349686f, 0.012414f, 0.936785f, 0.000000f, 0.004471f, -0.002797f, 0.000537f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.985163f, -0.013170f, 0.171115f, 0.000000f, 0.001347f, 0.997614f, 0.069025f, 0.000000f, -0.171616f, -0.067770f, 0.982830f, 0.000000f, 0.006990f, 0.000270f, -0.000468f, 1.000000f } },
		{ -100.000000f, { 0.454298f, -0.106872f, 0.884416f, 0.000000f, 0.003484f, 0.992984f, 0.118201f, 0.000000f, -0.890843f, -0.050617f, 0.451483f, 0.000000f, -0.008023f, -0.004391f, -0.004442f, 1.000000f } },
		{ -50.000000f, { 0.990812f, -0.091227f, 0.099851f, 0.000000f, 0.085157f, 0.994344f, 0.063461f, 0.000000f, -0.105075f, -0.054375f, 0.992977f, 0.000000f, 0.001701f, -0.012766f, 0.011934f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 30.000000f, { 0.995800f, 0.090248f, -0.015426f, 0.000000f, -0.089606f, 0.995244f, 0.038206f, 0.000000f, 0.018800f, -0.036663f, 0.999151f, 0.000000f, -0.001325f, 0.005381f, -0.004714f, 1.000000f } },
		{ -70.000000f, { 0.998217f, -0.030211f, 0.051487f, 0.000000f, 0.034755f, 0.995356f, -0.089771f, 0.000000f, -0.048536f, 0.091400f, 0.994631f, 0.000000f, 0.003980f, -0.010937f, 0.005419f, 1.000000f } },
		{ -35.000000f, { 0.999508f, -0.014186f, 0.027974f, 0.000000f, 0.016046f, 0.997596f, -0.067419f, 0.000000f, -0.026950f, 0.067834f, 0.997333f, 0.000000f, 0.002679f, -0.008417f, 0.002067f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.968793f, 0.247112f, -0.019375f, 0.000000f, -0.244795f, 0.966120f, 0.081777f, 0.000000f, 0.038926f, -0.074483f, 0.996462f, 0.000000f, -0.005378f, 0.019345f, -0.002846f, 1.000000f } },
		{ -50.000000f, { 0.997904f, -0.062237f, -0.017711f, 0.000000f, 0.062224f, 0.998061f, -0.001306f, 0.000000f, 0.017758f, 0.000201f, 0.999842f, 0.000000f, -0.001845f, -0.002617f, -0.000022f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.998951f, 0.045790f, 0.000799f, 0.000000f, -0.045687f, 0.997602f, -0.051990f, 0.000000f, -0.003178f, 0.051899f, 0.998647f, 0.000000f, 0.000366f, -0.003857f, -0.000833f, 1.000000f } },
		{ -70.000000f, { 0.993391f, -0.033392f, -0.109815f, 0.000000f, 0.033007f, 0.999441f, -0.005321f, 0.000000f, 0.109932f, 0.001662f, 0.993938f, 0.000000f, 0.000712f, 0.000206f, 0.000245f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -100.000000f, { 0.997239f, -0.046310f, -0.058051f, 0.000000f, 0.038303f, 0.990489f, -0.132156f, 0.000000f, 0.063619f, 0.129567f, 0.989528f, 0.000000f, 0.000055f, 0.000969f, 0.002653f, 1.000000f } },
		{ -50.000000f, { 0.993876f, -0.110476f, 0.002508f, 0.000000f, 0.108219f, 0.977665f, 0.180168f, 0.000000f, -0.022356f, -0.178793f, 0.983633f, 0.000000f, -0.001623f, -0.000984f, -0.003973f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 30.000000f, { 0.998670f, 0.049935f, -0.012857f, 0.000000f, -0.051298f, 0.987424f, -0.149539f, 0.000000f, 0.005228f, 0.150000f, 0.988672f, 0.000000f, 0.001321f, 0.002755f, 0.000527f, 1.000000f } },
		{ -70.000000f, { 0.998897f, 0.031803f, 0.034553f, 0.000000f, -0.020934f, 0.960182f, -0.278588f, 0.000000f, -0.042037f, 0.277558f, 0.959789f, 0.000000f, -0.000874f, -0.008367f, -0.007822f, 1.000000f } },
		{ -35.000000f, { 0.999674f, -0.018388f, 0.017716f, 0.000000f, 0.020739f, 0.989470f, -0.143244f, 0.000000f, -0.014896f, 0.143565f, 0.989529f, 0.000000f, -0.000254f, -0.002315f, -0.004815f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999497f, 0.030614f, -0.008229f, 0.000000f, -0.028940f, 0.987127f, 0.157296f, 0.000000f, 0.012939f, -0.156979f, 0.987517f, 0.000000f, 0.000203f, 0.002075f, 0.007702f, 1.000000f } },
		{ 70.000000f, { 0.972451f, 0.218562f, -0.081060f, 0.000000f, -0.190391f, 0.945320f, 0.264803f, 0.000000f, 0.134503f, -0.242074f, 0.960890f, 0.000000f, 0.003650f, 0.007443f, 0.020461f, 1.000000f } },
		{ -50.000000f, { 0.995956f, -0.069822f, 0.056538f, 0.000000f, 0.069973f, 0.997549f, -0.000701f, 0.000000f, -0.056350f, 0.004655f, 0.998400f, 0.000000f, -0.000030f, -0.000473f, 0.000513f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.995947f, 0.055189f, -0.071021f, 0.000000f, -0.055223f, 0.998473f, 0.001481f, 0.000000f, 0.070995f, 0.002447f, 0.997474f, 0.000000f, -0.000004f, 0.000774f, -0.000202f, 1.000000f } },
		{ -70.000000f, { 0.981805f, -0.155559f, -0.108904f, 0.000000f, 0.154799f, 0.987825f, -0.015451f, 0.000000f, 0.109982f, -0.001689f, 0.993932f, 0.000000f, 0.004522f, -0.000507f, -0.001183f, 1.000000f } },
		{ -0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.987280f, 0.130210f, 0.091231f, 0.000000f, -0.131045f, 0.991371f, 0.003192f, 0.000000f, -0.090029f, -0.015107f, 0.995825f, 0.000000f, -0.004766f, 0.000638f, 0.000613f, 1.000000f } },
		{ -50.000000f, { 0.997804f, 0.059187f, 0.029749f, 0.000000f, -0.059139f, 0.998247f, -0.002482f, 0.000000f, -0.029844f, 0.000717f, 0.999554f, 0.000000f, 0.001894f, 0.001263f, 0.000377f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.990097f, -0.129404f, -0.054421f, 0.000000f, 0.124194f, 0.988152f, -0.090170f, 0.000000f, 0.065445f, 0.082519f, 0.994438f, 0.000000f, -0.001292f, -0.000722f, 0.001508f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.996918f, 0.075012f, -0.022965f, 0.000000f, -0.074546f, 0.997006f, 0.020522f, 0.000000f, 0.024436f, -0.018747f, 0.999526f, 0.000000f, 0.003985f, -0.002585f, 0.000574f, 1.000000f } },
		{ -70.000000f, { 0.980053f, -0.011715f, -0.198392f, 0.000000f, 0.027179f, 0.996783f, 0.075404f, 0.000000f, 0.196871f, -0.079292f, 0.977218f, 0.000000f, 0.025818f, -0.001836f, 0.002619f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -100.000000f, { 0.886278f, 0.060971f, 0.459123f, 0.000000f, 0.310894f, 0.656458f, -0.687319f, 0.000000f, -0.343301f, 0.751895f, 0.562849f, 0.000000f, 0.006742f, -0.088783f, -0.016209f, 1.000000f } },
		{ -50.000000f, { 0.991264f, -0.056897f, 0.118990f, 0.000000f, 0.081187f, 0.974215f, -0.210509f, 0.000000f, -0.103944f, 0.218330f, 0.970323f, 0.000000f, -0.004706f, -0.036732f, 0.009786f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 30.000000f, { 0.999864f, -0.009133f, -0.013709f, 0.000000f, 0.011763f, 0.978473f, 0.206040f, 0.000000f, 0.011532f, -0.206173f, 0.978448f, 0.000000f, 0.000289f, 0.020293f, -0.010126f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.999958f, 0.000308f, -0.009183f, 0.000000f, -0.000811f, 0.998495f, -0.054838f, 0.000000f, 0.009153f, 0.054843f, 0.998453f, 0.000000f, 0.000426f, -0.002462f, 0.001076f, 1.000000f } },
		{ -50.000000f, { 0.995850f, 0.085112f, -0.032242f, 0.000000f, -0.081888f, 0.992503f, 0.090730f, 0.000000f, 0.039723f, -0.087713f, 0.995354f, 0.000000f, -0.000755f, 0.000027f, -0.002643f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.879174f, 0.397350f, -0.262995f, 0.000000f, -0.361208f, 0.915718f, 0.176035f, 0.000000f, 0.310776f, -0.059769f, 0.948602f, 0.000000f, 0.000325f, -0.007663f, 0.001063f, 1.000000f } },
		{ 70.000000f, { 0.792706f, 0.568561f, -0.219901f, 0.000000f, -0.452844f, 0.790705f, 0.411968f, 0.000000f, 0.408105f, -0.226988f, 0.884266f, 0.000000f, -0.007808f, 0.014674f, -0.007902f, 1.000000f } },
		{ -50.000000f, { 0.996369f, 0.076090f, 0.038207f, 0.000000f, -0.075769f, 0.997077f, -0.009793f, 0.000000f, -0.038841f, 0.006863f, 0.999222f, 0.000000f, 0.005407f, -0.004659f, -0.000262f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.895716f, -0.413816f, -0.162633f, 0.000000f, 0.431366f, 0.897447f, 0.092255f, 0.000000f, 0.107778f, -0.152789f, 0.982364f, 0.000000f, 0.053360f, 0.023148f, 0.001840f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.989882f, 0.141491f, -0.010645f, 0.000000f, -0.141050f, 0.989398f, 0.034591f, 0.000000f, 0.015427f, -0.032740f, 0.999345f, 0.000000f, -0.007318f, -0.000524f, 0.000566f, 1.000000f } },
		{ -100.000000f, { 0.992845f, 0.114460f, -0.034024f, 0.000000f, -0.111665f, 0.990909f, 0.075030f, 0.000000f, 0.042302f, -0.070694f, 0.996601f, 0.000000f, -0.005037f, -0.007295f, 0.023131f, 1.000000f } },
		{ -50.000000f, { 0.996601f, 0.071937f, 0.040154f, 0.000000f, -0.068514f, 0.994362f, -0.080934f, 0.000000f, -0.045749f, 0.077908f, 0.995910f, 0.000000f, -0.002362f, 0.002067f, -0.004413f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.995459f, -0.093653f, 0.017069f, 0.000000f, 0.094995f, 0.988887f, -0.114365f, 0.000000f, -0.006169f, 0.115467f, 0.993292f, 0.000000f, 0.000479f, -0.013154f, -0.002092f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.958974f, 0.275162f, -0.068223f, 0.000000f, -0.274984f, 0.961372f, 0.012174f, 0.000000f, 0.068937f, 0.007086f, 0.997596f, 0.000000f, -0.001478f, 0.008037f, 0.001373f, 1.000000f } },
		{ 70.000000f, { 0.880851f, 0.469922f, -0.057227f, 0.000000f, -0.469528f, 0.882668f, 0.020981f, 0.000000f, 0.060372f, 0.008388f, 0.998141f, 0.000000f, -0.003244f, 0.024041f, -0.014855f, 1.000000f } },
		{ -50.000000f, { 0.998689f, -0.050138f, 0.010331f, 0.000000f, 0.049902f, 0.998513f, 0.021946f, 0.000000f, -0.011416f, -0.021402f, 0.999706f, 0.000000f, 0.007380f, 0.001358f, -0.002614f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.957182f, -0.113804f, -0.266178f, 0.000000f, 0.195361f, 0.932476f, 0.303845f, 0.000000f, 0.213626f, -0.342836f, 0.914783f, 0.000000f, -0.020466f, 0.007833f, 0.004594f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.986538f, 0.009311f, 0.163269f, 0.000000f, 0.005915f, 0.995693f, -0.092524f, 0.000000f, -0.163427f, 0.092245f, 0.982233f, 0.000000f, 0.002243f, -0.013382f, 0.005308f, 1.000000f } },
		{ -100.000000f, { 0.669252f, -0.007164f, 0.743001f, 0.000000f, -0.066445f, 0.995370f, 0.069447f, 0.000000f, -0.740059f, -0.095846f, 0.665678f, 0.000000f, -0.039652f, -0.008141f, -0.040220f, 1.000000f } },
		{ -50.000000f, { 0.992545f, 0.083093f, 0.089162f, 0.000000f, -0.095317f, 0.985122f, 0.142998f, 0.000000f, -0.075953f, -0.150430f, 0.985699f, 0.000000f, -0.007638f, 0.003994f, 0.009889f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 30.000000f, { 0.998176f, -0.051158f, -0.032063f, 0.000000f, 0.050172f, 0.998265f, -0.030816f, 0.000000f, 0.033584f, 0.029151f, 0.999011f, 0.000000f, 0.000831f, -0.002378f, -0.006346f, 1.000000f } },
		{ -70.000000f, { 0.991903f, -0.051038f, 0.116293f, 0.000000f, 0.025518f, 0.977113f, 0.211184f, 0.000000f, -0.124410f, -0.206506f, 0.970504f, 0.000000f, -0.002870f, -0.033441f, -0.037818f, 1.000000f } },
		{ -35.000000f, { 0.999499f, -0.014768f, 0.027978f, 0.000000f, 0.011144f, 0.992028f, 0.125525f, 0.000000f, -0.029609f, -0.125150f, 0.991696f, 0.000000f, -0.001417f, -0.021861f, -0.012003f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.998564f, 0.053473f, -0.003292f, 0.000000f, -0.053162f, 0.981392f, -0.184510f, 0.000000f, -0.006636f, 0.184420f, 0.982825f, 0.000000f, 0.000935f, 0.022076f, -0.003892f, 1.000000f } },
		{ -50.000000f, { 0.982422f, 0.184915f, 0.025540f, 0.000000f, -0.184271f, 0.982541f, -0.025634f, 0.000000f, -0.029834f, 0.020477f, 0.999345f, 0.000000f, 0.011672f, -0.011607f, -0.002084f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.991091f, -0.132969f, 0.007558f, 0.000000f, 0.133183f, 0.989333f, -0.059011f, 0.000000f, 0.000370f, 0.059492f, 0.998229f, 0.000000f, -0.002945f, 0.014484f, -0.001818f, 1.000000f } },
		{ -50.000000f, { 0.984812f, 0.062051f, -0.162156f, 0.000000f, -0.069957f, 0.996601f, -0.043500f, 0.000000f, 0.158906f, 0.054183f, 0.985806f, 0.000000f, 0.033952f, -0.002568f, -0.002742f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.979441f, -0.024123f, 0.200281f, 0.000000f, 0.022407f, 0.999690f, 0.010830f, 0.000000f, -0.200480f, -0.006119f, 0.979679f, 0.000000f, -0.026507f, -0.000929f, -0.027888f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.998371f, -0.017379f, 0.054351f, 0.000000f, 0.009048f, 0.988655f, 0.149933f, 0.000000f, -0.056340f, -0.149197f, 0.987201f, 0.000000f, -0.002147f, -0.028638f, -0.021669f, 1.000000f } },
		{ 100.000000f, { 0.969333f, -0.124215f, 0.212046f, 0.000000f, 0.064880f, 0.961592f, 0.266704f, 0.000000f, -0.237031f, -0.244767f, 0.940162f, 0.000000f, -0.003581f, -0.029945f, -0.064130f, 1.000000f } },
		{ -50.000000f, { 0.899378f, -0.437144f, 0.004982f, 0.000000f, 0.437126f, 0.899390f, 0.004347f, 0.000000f, -0.006381f, -0.001732f, 0.999978f, 0.000000f, -0.008900f, 0.016408f, -0.000141f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.994592f, 0.103707f, -0.005680f, 0.000000f, -0.103709f, 0.994608f, -0.000062f, 0.000000f, 0.005643f, 0.000651f, 0.999984f, 0.000000f, 0.011974f, -0.007489f, 0.002717f, 1.000000f } },
		{ -70.000000f, { 0.956769f, -0.017256f, 0.290338f, 0.000000f, 0.012288f, 0.999745f, 0.018923f, 0.000000f, -0.290591f, -0.014538f, 0.956737f, 0.000000f, -0.028987f, -0.005024f, -0.044002f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.976768f, 0.096074f, -0.191556f, 0.000000f, -0.119189f, 0.986417f, -0.113028f, 0.000000f, 0.178096f, 0.133233f, 0.974952f, 0.000000f, 0.042770f, -0.005328f, -0.011537f, 1.000000f } },
		{ -70.000000f, { 0.863830f, -0.436739f, 0.251111f, 0.000000f, 0.124257f, 0.667758f, 0.733934f, 0.000000f, -0.488219f, -0.602792f, 0.631097f, 0.000000f, 0.004507f, -0.048340f, -0.084318f, 1.000000f } },
		{ -35.000000f, { 0.994972f, -0.054729f, 0.083877f, 0.000000f, 0.019365f, 0.926813f, 0.375025f, 0.000000f, -0.098263f, -0.371515f, 0.923212f, 0.000000f, 0.000933f, -0.035769f, -0.035185f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.920501f, -0.292737f, -0.258810f, 0.000000f, 0.065915f, 0.769201f, -0.635598f, 0.000000f, 0.385140f, 0.568010f, 0.727346f, 0.000000f, 0.011830f, 0.003406f, 0.092022f, 1.000000f } },
		{ 70.000000f, { 0.268624f, 0.566194f, 0.779273f, 0.000000f, 0.346952f, -0.811579f, 0.470068f, 0.000000f, 0.898591f, 0.144099f, -0.414452f, 0.000000f, 0.026544f, 0.047644f, 0.029897f, 1.000000f } },
		{ -50.000000f, { 0.977020f, 0.123034f, -0.174054f, 0.000000f, -0.157191f, 0.967407f, -0.198531f, 0.000000f, 0.143955f, 0.221328f, 0.964516f, 0.000000f, 0.046699f, -0.001700f, -0.027845f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.995696f, -0.092628f, -0.002949f, 0.000000f, 0.091787f, 0.981262f, 0.169412f, 0.000000f, -0.012799f, -0.168953f, 0.985541f, 0.000000f, 0.014125f, -0.015503f, 0.011594f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.979020f, 0.006302f, -0.203666f, 0.000000f, -0.052505f, 0.973571f, -0.222266f, 0.000000f, 0.196883f, 0.228296f, 0.953477f, 0.000000f, 0.012725f, 0.009283f, 0.001065f, 1.000000f } },
		{ -100.000000f, { 0.961343f, 0.228215f, -0.154071f, 0.000000f, -0.115449f, 0.842044f, 0.526909f, 0.000000f, 0.249984f, -0.488753f, 0.835840f, 0.000000f, -0.010769f, -0.023670f, 0.000813f, 1.000000f } },
		{ -50.000000f, { 0.993847f, 0.049961f, -0.098852f, 0.000000f, -0.042809f, 0.996398f, 0.073199f, 0.000000f, 0.102154f, -0.068517f, 0.992406f, 0.000000f, -0.008181f, 0.008076f, -0.007997f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 30.000000f, { 0.994943f, -0.098090f, -0.021619f, 0.000000f, 0.096562f, 0.993331f, -0.063008f, 0.000000f, 0.027655f, 0.060602f, 0.997779f, 0.000000f, 0.002819f, -0.007485f, 0.005858f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.893402f, 0.372559f, -0.251062f, 0.000000f, -0.337421f, 0.925408f, 0.172532f, 0.000000f, 0.296613f, -0.069427f, 0.952471f, 0.000000f, -0.000059f, 0.006941f, -0.000961f, 1.000000f } },
		{ 70.000000f, { 0.803805f, 0.550227f, -0.226158f, 0.000000f, -0.432951f, 0.801793f, 0.411924f, 0.000000f, 0.407983f, -0.233191f, 0.882707f, 0.000000f, 0.008933f, -0.013886f, 0.008177f, 1.000000f } },
		{ -50.000000f, { 0.996101f, 0.080092f, 0.036997f, 0.000000f, -0.079974f, 0.996786f, -0.004654f, 0.000000f, -0.037251f, 0.001677f, 0.999305f, 0.000000f, -0.005494f, 0.004008f, 0.000543f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.903400f, -0.392557f, -0.172534f, 0.000000f, 0.412771f, 0.905111f, 0.101951f, 0.000000f, 0.116141f, -0.163319f, 0.979713f, 0.000000f, -0.053262f, -0.022945f, -0.001730f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.990804f, 0.134953f, -0.009724f, 0.000000f, -0.134865f, 0.990822f, 0.009148f, 0.000000f, 0.010870f, -0.007752f, 0.999911f, 0.000000f, 0.006809f, 0.002135f, -0.001498f, 1.000000f } },
		{ -100.000000f, { 0.993774f, 0.103197f, -0.041984f, 0.000000f, -0.100360f, 0.992836f, 0.064850f, 0.000000f, 0.048375f, -0.060232f, 0.997011f, 0.000000f, 0.005644f, 0.007562f, -0.023251f, 1.000000f } },
		{ -50.000000f, { 0.996414f, 0.074705f, 0.039718f, 0.000000f, -0.071243f, 0.994048f, -0.082414f, 0.000000f, -0.045638f, 0.079289f, 0.995806f, 0.000000f, 0.002210f, -0.002119f, 0.004481f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.995164f, -0.096359f, 0.019088f, 0.000000f, 0.097982f, 0.987547f, -0.123085f, 0.000000f, -0.006990f, 0.124360f, 0.992213f, 0.000000f, -0.000418f, 0.013633f, 0.001846f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.959428f, 0.274395f, -0.064846f, 0.000000f, -0.274570f, 0.961546f, 0.006363f, 0.000000f, 0.064099f, 0.011700f, 0.997875f, 0.000000f, 0.001505f, -0.007959f, -0.001858f, 1.000000f } },
		{ 70.000000f, { 0.885820f, 0.460803f, -0.054613f, 0.000000f, -0.459746f, 0.887498f, 0.031316f, 0.000000f, 0.062899f, -0.002633f, 0.998016f, 0.000000f, 0.003971f, -0.024086f, 0.014480f, 1.000000f } },
		{ -70.000000f, { 0.955298f, -0.113329f, -0.273059f, 0.000000f, 0.197288f, 0.932249f, 0.303299f, 0.000000f, 0.220187f, -0.343612f, 0.912934f, 0.000000f, 0.020547f, -0.007347f, -0.004540f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.986972f, 0.001762f, 0.160880f, 0.000000f, 0.014216f, 0.995074f, -0.098107f, 0.000000f, -0.160261f, 0.099116f, 0.982086f, 0.000000f, -0.002435f, 0.013785f, -0.005657f, 1.000000f } },
		{ -100.000000f, { 0.664606f, 0.000891f, 0.747193f, 0.000000f, -0.078609f, 0.994533f, 0.068735f, 0.000000f, -0.743047f, -0.104418f, 0.661043f, 0.000000f, 0.039684f, 0.007866f, 0.040183f, 1.000000f } },
		{ -50.000000f, { 0.992367f, 0.085190f, 0.089161f, 0.000000f, -0.096866f, 0.985950f, 0.136084f, 0.000000f, -0.076315f, -0.143682f, 0.986677f, 0.000000f, 0.007647f, -0.003961f, -0.010058f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 30.000000f, { 0.997990f, -0.054098f, -0.032998f, 0.000000f, 0.053170f, 0.998182f, -0.028372f, 0.000000f, 0.034473f, 0.026561f, 0.999053f, 0.000000f, -0.000851f, 0.002291f, 0.006621f, 1.000000f } },
		{ -70.000000f, { 0.992674f, -0.049646f, 0.110149f, 0.000000f, 0.025983f, 0.978065f, 0.206674f, 0.000000f, -0.117993f, -0.202298f, 0.972190f, 0.000000f, 0.002903f, 0.033489f, 0.037286f, 1.000000f } },
		{ -35.000000f, { 0.999547f, -0.014293f, 0.026478f, 0.000000f, 0.010789f, 0.991707f, 0.128062f, 0.000000f, -0.028089f, -0.127719f, 0.991413f, 0.000000f, 0.001409f, 0.021721f, 0.011878f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.998835f, 0.048017f, -0.004824f, 0.000000f, -0.048073f, 0.981243f, -0.186683f, 0.000000f, -0.004231f, 0.186697f, 0.982408f, 0.000000f, -0.000925f, -0.022080f, 0.003551f, 1.000000f } },
		{ -50.000000f, { 0.993239f, -0.115994f, -0.004752f, 0.000000f, 0.115436f, 0.991148f, -0.065571f, 0.000000f, 0.012316f, 0.064579f, 0.997837f, 0.000000f, 0.002633f, -0.013633f, 0.001373f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.984770f, 0.171698f, 0.027346f, 0.000000f, -0.171117f, 0.984997f, -0.022352f, 0.000000f, -0.030774f, 0.017332f, 0.999376f, 0.000000f, -0.011436f, 0.011005f, 0.001953f, 1.000000f } },
		{ -50.000000f, { 0.979786f, -0.009850f, 0.199806f, 0.000000f, 0.009305f, 0.999950f, 0.003665f, 0.000000f, -0.199832f, -0.001732f, 0.979829f, 0.000000f, 0.025907f, 0.001189f, 0.027365f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.983807f, 0.055163f, -0.170530f, 0.000000f, -0.060930f, 0.997727f, -0.028769f, 0.000000f, 0.168555f, 0.038693f, 0.984932f, 0.000000f, -0.033910f, 0.002166f, 0.002285f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.998479f, -0.022542f, 0.050309f, 0.000000f, 0.014280f, 0.987189f, 0.158913f, 0.000000f, -0.053247f, -0.157953f, 0.986010f, 0.000000f, 0.002110f, 0.028162f, 0.021220f, 1.000000f } },
		{ 100.000000f, { 0.972504f, -0.122169f, 0.198268f, 0.000000f, 0.070279f, 0.965620f, 0.250277f, 0.000000f, -0.222028f, -0.229461f, 0.947656f, 0.000000f, 0.003812f, 0.030438f, 0.062872f, 1.000000f } },
		{ -50.000000f, { 0.995197f, 0.079431f, 0.057212f, 0.000000f, -0.079171f, 0.996838f, -0.006807f, 0.000000f, -0.057571f, 0.002245f, 0.998339f, 0.000000f, -0.011127f, 0.007790f, -0.000963f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.977334f, -0.210256f, 0.024717f, 0.000000f, 0.211325f, 0.961923f, -0.173339f, 0.000000f, 0.012670f, 0.174634f, 0.984552f, 0.000000f, 0.010671f, -0.011035f, 0.001525f, 1.000000f } },
		{ -70.000000f, { 0.976630f, 0.091569f, -0.194444f, 0.000000f, -0.111304f, 0.989415f, -0.093104f, 0.000000f, 0.183860f, 0.112571f, 0.976485f, 0.000000f, -0.043385f, 0.004444f, 0.010709f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.957072f, 0.003658f, 0.289827f, 0.000000f, -0.008631f, 0.999837f, 0.015880f, 0.000000f, -0.289722f, -0.017699f, 0.956947f, 0.000000f, 0.028229f, 0.005543f, 0.043444f, 1.000000f } },
		{ -70.000000f, { 0.888894f, -0.395661f, 0.230911f, 0.000000f, 0.118490f, 0.685464f, 0.718401f, 0.000000f, -0.442524f, -0.611222f, 0.656186f, 0.000000f, -0.004259f, 0.050009f, 0.085493f, 1.000000f } },
		{ -35.000000f, { 0.996419f, -0.042756f, 0.072945f, 0.000000f, 0.012982f, 0.929859f, 0.367688f, 0.000000f, -0.083549f, -0.365425f, 0.927084f, 0.000000f, -0.001106f, 0.036648f, 0.035586f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.888327f, -0.352818f, -0.293929f, 0.000000f, 0.083794f, 0.753869f, -0.651660f, 0.000000f, 0.451501f, 0.554258f, 0.699246f, 0.000000f, -0.010659f, -0.005966f, -0.092321f, 1.000000f } },
		{ 70.000000f, { 0.201336f, 0.589397f, 0.782352f, 0.000000f, 0.485226f, -0.753836f, 0.443043f, 0.000000f, 0.850893f, 0.290417f, -0.437765f, 0.000000f, -0.027648f, -0.047244f, -0.029702f, 1.000000f } },
		{ -50.000000f, { 0.958594f, 0.160604f, -0.235169f, 0.000000f, -0.203117f, 0.964402f, -0.169327f, 0.000000f, 0.199603f, 0.210082f, 0.957091f, 0.000000f, -0.047972f, 0.003727f, 0.025671f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.993323f, -0.115113f, -0.007680f, 0.000000f, 0.114762f, 0.979088f, 0.167976f, 0.000000f, -0.011817f, -0.167736f, 0.985761f, 0.000000f, -0.011544f, 0.016304f, -0.012385f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.967885f, 0.031649f, -0.249395f, 0.000000f, -0.092682f, 0.967087f, -0.236966f, 0.000000f, 0.233687f, 0.252470f, 0.938962f, 0.000000f, -0.012754f, -0.010327f, -0.000276f, 1.000000f } },
		{ -100.000000f, { 0.958777f, 0.221943f, -0.177447f, 0.000000f, -0.105141f, 0.857227f, 0.504090f, 0.000000f, 0.263992f, -0.464653f, 0.845225f, 0.000000f, 0.011450f, 0.024916f, -0.001797f, 1.000000f } },
		{ -50.000000f, { 0.994032f, 0.053433f, -0.095102f, 0.000000f, -0.046319f, 0.996070f, 0.075494f, 0.000000f, 0.098762f, -0.070638f, 0.992601f, 0.000000f, 0.008327f, -0.008408f, 0.008124f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 30.000000f, { 0.994871f, -0.098791f, -0.021745f, 0.000000f, 0.097849f, 0.994364f, -0.040823f, 0.000000f, 0.025655f, 0.038486f, 0.998930f, 0.000000f, -0.002959f, 0.007832f, -0.005906f, 1.000000f } },
	};

	OrbisAnim::CommandBlock::ExecuteCommandInterpolateMatrix1DImpl(&hierarchyHeader, &params, s_entries, s_stateData);
}

static void HierarchyParentingCommand_Seg4Cmd2(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0010, 0x14F0 + 3 },	// Child[233]: m_brow_01_bind, Parent[129]: brow_grp
		{ 0x0020, 0x14F0 + 3 },	// Child[234]: m_brow_05_bind, Parent[129]: brow_grp
		{ 0x0030, 0x14F0 + 3 },	// Child[235]: l_brow_09_bind, Parent[129]: brow_grp
		{ 0x0040, 0x14F0 + 3 },	// Child[236]: l_brow_11_bind, Parent[129]: brow_grp
		{ 0x0050, 0x14F0 + 3 },	// Child[237]: l_brow_13_bind, Parent[129]: brow_grp
		{ 0x0060, 0x14F0 + 3 },	// Child[238]: l_brow_15_bind, Parent[129]: brow_grp
		{ 0x0070, 0x14F0 + 3 },	// Child[239]: l_brow_16_bind, Parent[129]: brow_grp
		{ 0x0080, 0x14F0 + 3 },	// Child[240]: l_brow_17_bind, Parent[129]: brow_grp
		{ 0x0090, 0x14F0 + 3 },	// Child[241]: l_brow_19_bind, Parent[129]: brow_grp
		{ 0x00A0, 0x14F0 + 3 },	// Child[242]: l_brow_22_bind, Parent[129]: brow_grp
		{ 0x00B0, 0x14F0 + 3 },	// Child[243]: l_brow_25_bind, Parent[129]: brow_grp
		{ 0x00C0, 0x14F0 + 3 },	// Child[244]: l_brow_27_bind, Parent[129]: brow_grp
		{ 0x00D0, 0x14F0 + 3 },	// Child[245]: l_brow_32_bind, Parent[129]: brow_grp
		{ 0x00E0, 0x14F0 + 3 },	// Child[246]: l_brow_39_bind, Parent[129]: brow_grp
		{ 0x00F0, 0x14F0 + 3 },	// Child[247]: r_brow_09_bind, Parent[129]: brow_grp
		{ 0x0100, 0x14F0 + 3 },	// Child[248]: r_brow_11_bind, Parent[129]: brow_grp
		{ 0x0110, 0x14F0 + 3 },	// Child[249]: r_brow_13_bind, Parent[129]: brow_grp
		{ 0x0120, 0x14F0 + 3 },	// Child[250]: r_brow_15_bind, Parent[129]: brow_grp
		{ 0x0130, 0x14F0 + 3 },	// Child[251]: r_brow_16_bind, Parent[129]: brow_grp
		{ 0x0140, 0x14F0 + 3 },	// Child[252]: r_brow_17_bind, Parent[129]: brow_grp
		{ 0x0150, 0x14F0 + 3 },	// Child[253]: r_brow_19_bind, Parent[129]: brow_grp
		{ 0x0160, 0x14F0 + 3 },	// Child[254]: r_brow_22_bind, Parent[129]: brow_grp
		{ 0x0170, 0x14F0 + 3 },	// Child[255]: r_brow_25_bind, Parent[129]: brow_grp
		{ 0x0180, 0x14F0 + 3 },	// Child[256]: r_brow_27_bind, Parent[129]: brow_grp
		{ 0x0190, 0x14F0 + 3 },	// Child[257]: r_brow_32_bind, Parent[129]: brow_grp
		{ 0x01A0, 0x14F0 + 3 },	// Child[258]: r_brow_39_bind, Parent[129]: brow_grp
		{ 0x01B0, 0x1530 + 3 },	// Child[259]: m_mouth_01_bind, Parent[159]: mouth_grp
		{ 0x01C0, 0x1530 + 3 },	// Child[260]: m_mouth_03_bind, Parent[159]: mouth_grp
		{ 0x01D0, 0x1530 + 3 },	// Child[261]: m_mouth_04_bind, Parent[159]: mouth_grp
		{ 0x01E0, 0x1530 + 3 },	// Child[262]: m_mouth_07_bind, Parent[159]: mouth_grp
		{ 0x01F0, 0x1530 + 3 },	// Child[263]: m_mouth_12_bind, Parent[159]: mouth_grp
		{ 0x0200, 0x1530 + 3 },	// Child[264]: l_mouth_01_bind, Parent[159]: mouth_grp
		{ 0x0210, 0x1530 + 3 },	// Child[265]: l_mouth_05_bind, Parent[159]: mouth_grp
		{ 0x0220, 0x1530 + 3 },	// Child[266]: l_mouth_10_bind, Parent[159]: mouth_grp
		{ 0x0230, 0x1530 + 3 },	// Child[267]: l_mouth_13_bind, Parent[159]: mouth_grp
		{ 0x0240, 0x1530 + 3 },	// Child[268]: l_mouth_16_bind, Parent[159]: mouth_grp
		{ 0x0250, 0x1530 + 3 },	// Child[269]: l_mouth_20_bind, Parent[159]: mouth_grp
		{ 0x0260, 0x1530 + 3 },	// Child[270]: l_mouth_29_bind, Parent[159]: mouth_grp
		{ 0x0270, 0x1530 + 3 },	// Child[271]: l_mouth_38_bind, Parent[159]: mouth_grp
		{ 0x0280, 0x1530 + 3 },	// Child[272]: l_mouth_41_bind, Parent[159]: mouth_grp
		{ 0x0290, 0x1530 + 3 },	// Child[273]: r_mouth_01_bind, Parent[159]: mouth_grp
		{ 0x02A0, 0x1530 + 3 },	// Child[274]: r_mouth_05_bind, Parent[159]: mouth_grp
		{ 0x02B0, 0x1530 + 3 },	// Child[275]: r_mouth_10_bind, Parent[159]: mouth_grp
		{ 0x02C0, 0x1530 + 3 },	// Child[276]: r_mouth_13_bind, Parent[159]: mouth_grp
		{ 0x02D0, 0x1530 + 3 },	// Child[277]: r_mouth_16_bind, Parent[159]: mouth_grp
		{ 0x02E0, 0x1530 + 3 },	// Child[278]: r_mouth_20_bind, Parent[159]: mouth_grp
		{ 0x02F0, 0x1530 + 3 },	// Child[279]: r_mouth_29_bind, Parent[159]: mouth_grp
		{ 0x0300, 0x1530 + 3 },	// Child[280]: r_mouth_38_bind, Parent[159]: mouth_grp
		{ 0x0310, 0x1530 + 3 },	// Child[281]: r_mouth_41_bind, Parent[159]: mouth_grp
		{ 0x0310, 0x1530 + 3 },	// Child[281]: r_mouth_41_bind, Parent[159]: mouth_grp
		{ 0x0310, 0x1530 + 3 },	// Child[281]: r_mouth_41_bind, Parent[159]: mouth_grp
		{ 0x0310, 0x1530 + 3 }	// Child[281]: r_mouth_41_bind, Parent[159]: mouth_grp
	};

	OrbisAnim_Parenting(13, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

// neck_c_helper_pose_01_mm
static void NdiMultMatrixCommand_Seg4Cmd3(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		16,
		0,
		OrbisAnim::Location(0x0002)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.063732f, 0.040522f, 0.057669f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x0042),
		OrbisAnim::Location(0x0082),
		OrbisAnim::Location(0x00C2),
		OrbisAnim::Location(0x0102),
		OrbisAnim::Location(0x0142),
		OrbisAnim::Location(0x0182),
		OrbisAnim::Location(0x01C2),
		OrbisAnim::Location(0x0202),
		OrbisAnim::Location(0x0242),
		OrbisAnim::Location(0x0282),
		OrbisAnim::Location(0x02C2),
		OrbisAnim::Location(0x0302),
		OrbisAnim::Location(0x0342),
		OrbisAnim::Location(0x0382),
		OrbisAnim::Location(0x03C2),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// neck_c_helper_pose_02_mm
static void NdiMultMatrixCommand_Seg4Cmd4(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		15,
		0,
		OrbisAnim::Location(0x0402)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.063732f, 0.040522f, 0.057669f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x0442),
		OrbisAnim::Location(0x0482),
		OrbisAnim::Location(0x04C2),
		OrbisAnim::Location(0x0502),
		OrbisAnim::Location(0x0542),
		OrbisAnim::Location(0x0582),
		OrbisAnim::Location(0x05C2),
		OrbisAnim::Location(0x0602),
		OrbisAnim::Location(0x0642),
		OrbisAnim::Location(0x0682),
		OrbisAnim::Location(0x06C2),
		OrbisAnim::Location(0x0702),
		OrbisAnim::Location(0x0742),
		OrbisAnim::Location(0x0782),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// neck_b_helper_pose_01_mm
static void NdiMultMatrixCommand_Seg4Cmd5(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		20,
		0,
		OrbisAnim::Location(0x07C2)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.054279f, -0.045479f, -0.024005f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x0802),
		OrbisAnim::Location(0x0842),
		OrbisAnim::Location(0x0882),
		OrbisAnim::Location(0x08C2),
		OrbisAnim::Location(0x0902),
		OrbisAnim::Location(0x0942),
		OrbisAnim::Location(0x0982),
		OrbisAnim::Location(0x09C2),
		OrbisAnim::Location(0x0A02),
		OrbisAnim::Location(0x0A42),
		OrbisAnim::Location(0x0A82),
		OrbisAnim::Location(0x0AC2),
		OrbisAnim::Location(0x0B02),
		OrbisAnim::Location(0x0B42),
		OrbisAnim::Location(0x0B82),
		OrbisAnim::Location(0x0BC2),
		OrbisAnim::Location(0x0C02),
		OrbisAnim::Location(0x0C42),
		OrbisAnim::Location(0x0C82),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// neck_b_helper_pose_02_mm
static void NdiMultMatrixCommand_Seg4Cmd6(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		24,
		0,
		OrbisAnim::Location(0x0CC2)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.054279f, -0.045479f, -0.024005f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x0D02),
		OrbisAnim::Location(0x0D42),
		OrbisAnim::Location(0x0D82),
		OrbisAnim::Location(0x0DC2),
		OrbisAnim::Location(0x0E02),
		OrbisAnim::Location(0x0E42),
		OrbisAnim::Location(0x0E82),
		OrbisAnim::Location(0x0EC2),
		OrbisAnim::Location(0x0F02),
		OrbisAnim::Location(0x0F42),
		OrbisAnim::Location(0x0F82),
		OrbisAnim::Location(0x0FC2),
		OrbisAnim::Location(0x1002),
		OrbisAnim::Location(0x1042),
		OrbisAnim::Location(0x1082),
		OrbisAnim::Location(0x10C2),
		OrbisAnim::Location(0x1102),
		OrbisAnim::Location(0x1142),
		OrbisAnim::Location(0x1182),
		OrbisAnim::Location(0x11C2),
		OrbisAnim::Location(0x1202),
		OrbisAnim::Location(0x1242),
		OrbisAnim::Location(0x1282),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_elbow_helper_pose_01_mm
static void NdiMultMatrixCommand_Seg4Cmd7(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		6,
		0,
		OrbisAnim::Location(0x12C2)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, -0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		-0.000000f, -0.000000f, 1.000000f, 0.000000f,
		-0.000000f, 0.000000f, -0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.001945f, -0.040568f, 0.048980f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x1302),
		OrbisAnim::Location(0x1342),
		OrbisAnim::Location(0x1382),
		OrbisAnim::Location(0x13C2),
		OrbisAnim::Location(0x1402),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_elbow_helper_pose_02_mm
static void NdiMultMatrixCommand_Seg4Cmd8(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		2,
		0,
		OrbisAnim::Location(0x1442)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.002233f, 0.012205f, 0.198932f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x1482),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_elbow_helper_pose_03_mm
static void NdiMultMatrixCommand_Seg4Cmd9(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		5,
		0,
		OrbisAnim::Location(0x14C2)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		-0.000000f, 1.000000f, 0.000000f, 0.000000f,
		-0.000000f, -0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.000226f, -0.040324f, 0.193508f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x1502),
		OrbisAnim::Location(0x1542),
		OrbisAnim::Location(0x1582),
		OrbisAnim::Location(0x15C2),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_shoulder_helperBend_pose_01_mm
static void NdiMultMatrixCommand_Seg4Cmd10(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		11,
		0,
		OrbisAnim::Location(0x1602)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.012685f, -0.043081f, 0.084533f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x1642),
		OrbisAnim::Location(0x1682),
		OrbisAnim::Location(0x16C2),
		OrbisAnim::Location(0x1702),
		OrbisAnim::Location(0x1742),
		OrbisAnim::Location(0x1782),
		OrbisAnim::Location(0x17C2),
		OrbisAnim::Location(0x1802),
		OrbisAnim::Location(0x1842),
		OrbisAnim::Location(0x1882),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_shoulder_helperBend_pose_04_mm
static void NdiMultMatrixCommand_Seg4Cmd11(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		20,
		0,
		OrbisAnim::Location(0x18C2)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		-0.000000f, 1.000000f, 0.000000f, 0.000000f,
		-0.000000f, -0.000000f, 1.000000f, 0.000000f,
		-0.000000f, 0.000000f, -0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.020258f, 0.025151f, 0.163002f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x1902),
		OrbisAnim::Location(0x1942),
		OrbisAnim::Location(0x1982),
		OrbisAnim::Location(0x19C2),
		OrbisAnim::Location(0x1A02),
		OrbisAnim::Location(0x1A42),
		OrbisAnim::Location(0x1A82),
		OrbisAnim::Location(0x1AC2),
		OrbisAnim::Location(0x1B02),
		OrbisAnim::Location(0x1B42),
		OrbisAnim::Location(0x1B82),
		OrbisAnim::Location(0x1BC2),
		OrbisAnim::Location(0x1C02),
		OrbisAnim::Location(0x1C42),
		OrbisAnim::Location(0x1C82),
		OrbisAnim::Location(0x1CC2),
		OrbisAnim::Location(0x1D02),
		OrbisAnim::Location(0x1D42),
		OrbisAnim::Location(0x1D82),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_elbow_helper_pose_01_mm
static void NdiMultMatrixCommand_Seg4Cmd12(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		6,
		0,
		OrbisAnim::Location(0x1DC2)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, -0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		-0.000000f, -0.000000f, 1.000000f, 0.000000f,
		0.000000f, -0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.001945f, 0.040568f, -0.048980f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x1E02),
		OrbisAnim::Location(0x1E42),
		OrbisAnim::Location(0x1E82),
		OrbisAnim::Location(0x1EC2),
		OrbisAnim::Location(0x1F02),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_elbow_helper_pose_02_mm
static void NdiMultMatrixCommand_Seg4Cmd13(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x1F42)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.002233f, -0.012205f, -0.198932f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x1F82),
		OrbisAnim::Location(0x1FC2),
		OrbisAnim::Location(0x2002),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_elbow_helper_pose_03_mm
static void NdiMultMatrixCommand_Seg4Cmd14(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		5,
		0,
		OrbisAnim::Location(0x2042)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000226f, 0.040324f, -0.193508f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x2082),
		OrbisAnim::Location(0x20C2),
		OrbisAnim::Location(0x2102),
		OrbisAnim::Location(0x2142),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_shoulder_helperBend_pose_01_mm
static void NdiMultMatrixCommand_Seg4Cmd15(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		12,
		0,
		OrbisAnim::Location(0x2182)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.012685f, 0.043081f, -0.084533f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x21C2),
		OrbisAnim::Location(0x2202),
		OrbisAnim::Location(0x2242),
		OrbisAnim::Location(0x2282),
		OrbisAnim::Location(0x22C2),
		OrbisAnim::Location(0x2302),
		OrbisAnim::Location(0x2342),
		OrbisAnim::Location(0x2382),
		OrbisAnim::Location(0x23C2),
		OrbisAnim::Location(0x2402),
		OrbisAnim::Location(0x2442),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_shoulder_helperBend_pose_04_mm
static void NdiMultMatrixCommand_Seg4Cmd16(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		18,
		0,
		OrbisAnim::Location(0x2482)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, -0.000000f, 0.000000f,
		-0.000000f, 1.000000f, -0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, -0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.020258f, -0.025151f, -0.163002f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x24C2),
		OrbisAnim::Location(0x2502),
		OrbisAnim::Location(0x2542),
		OrbisAnim::Location(0x2582),
		OrbisAnim::Location(0x25C2),
		OrbisAnim::Location(0x2602),
		OrbisAnim::Location(0x2642),
		OrbisAnim::Location(0x2682),
		OrbisAnim::Location(0x26C2),
		OrbisAnim::Location(0x2702),
		OrbisAnim::Location(0x2742),
		OrbisAnim::Location(0x2782),
		OrbisAnim::Location(0x27C2),
		OrbisAnim::Location(0x2802),
		OrbisAnim::Location(0x2842),
		OrbisAnim::Location(0x2882),
		OrbisAnim::Location(0x28C2),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// spine_e_helper_pose_01_mm
static void NdiMultMatrixCommand_Seg4Cmd17(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		15,
		0,
		OrbisAnim::Location(0x2902)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.058761f, -0.073755f, 0.078910f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x2942),
		OrbisAnim::Location(0x2982),
		OrbisAnim::Location(0x29C2),
		OrbisAnim::Location(0x2A02),
		OrbisAnim::Location(0x2A42),
		OrbisAnim::Location(0x2A82),
		OrbisAnim::Location(0x2AC2),
		OrbisAnim::Location(0x2B02),
		OrbisAnim::Location(0x2B42),
		OrbisAnim::Location(0x2B82),
		OrbisAnim::Location(0x2BC2),
		OrbisAnim::Location(0x2C02),
		OrbisAnim::Location(0x2C42),
		OrbisAnim::Location(0x2C82),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// spine_e_helper_pose_02_mm
static void NdiMultMatrixCommand_Seg4Cmd18(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		18,
		0,
		OrbisAnim::Location(0x2CC2)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.058761f, -0.073755f, 0.078910f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x2D02),
		OrbisAnim::Location(0x2D42),
		OrbisAnim::Location(0x2D82),
		OrbisAnim::Location(0x2DC2),
		OrbisAnim::Location(0x2E02),
		OrbisAnim::Location(0x2E42),
		OrbisAnim::Location(0x2E82),
		OrbisAnim::Location(0x2EC2),
		OrbisAnim::Location(0x2F02),
		OrbisAnim::Location(0x2F42),
		OrbisAnim::Location(0x2F82),
		OrbisAnim::Location(0x2FC2),
		OrbisAnim::Location(0x3002),
		OrbisAnim::Location(0x3042),
		OrbisAnim::Location(0x3082),
		OrbisAnim::Location(0x30C2),
		OrbisAnim::Location(0x3102),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_knee_helper_pose_01_mm
static void NdiMultMatrixCommand_Seg4Cmd19(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		6,
		0,
		OrbisAnim::Location(0x3142)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.005865f, 0.035127f, 0.181091f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x3182),
		OrbisAnim::Location(0x31C2),
		OrbisAnim::Location(0x3202),
		OrbisAnim::Location(0x3242),
		OrbisAnim::Location(0x3282),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_knee_helper_pose_02_mm
static void NdiMultMatrixCommand_Seg4Cmd20(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		7,
		0,
		OrbisAnim::Location(0x32C2)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		-0.000000f, 1.000000f, 0.000000f, 0.000000f,
		-0.000000f, -0.000000f, 1.000000f, 0.000000f,
		0.000000f, -0.000000f, -0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.005949f, -0.015615f, 0.157219f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x3302),
		OrbisAnim::Location(0x3342),
		OrbisAnim::Location(0x3382),
		OrbisAnim::Location(0x33C2),
		OrbisAnim::Location(0x3402),
		OrbisAnim::Location(0x3442),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_knee_helper_weighted_01_pose_01_mm
static void NdiMultMatrixCommand_Seg4Cmd21(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		5,
		0,
		OrbisAnim::Location(0x3482)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.003420f, 0.055073f, 0.068441f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x34C2),
		OrbisAnim::Location(0x3502),
		OrbisAnim::Location(0x3542),
		OrbisAnim::Location(0x3582),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_knee_helper_pose_01_mm
static void NdiMultMatrixCommand_Seg4Cmd22(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		6,
		0,
		OrbisAnim::Location(0x35C2)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.005865f, -0.035127f, -0.181091f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x3602),
		OrbisAnim::Location(0x3642),
		OrbisAnim::Location(0x3682),
		OrbisAnim::Location(0x36C2),
		OrbisAnim::Location(0x3702),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_knee_helper_pose_02_mm
static void NdiMultMatrixCommand_Seg4Cmd23(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		7,
		0,
		OrbisAnim::Location(0x3742)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.005949f, 0.015615f, -0.157219f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x3782),
		OrbisAnim::Location(0x37C2),
		OrbisAnim::Location(0x3802),
		OrbisAnim::Location(0x3842),
		OrbisAnim::Location(0x3882),
		OrbisAnim::Location(0x38C2),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_knee_helper_weighted_01_pose_01_mm
static void NdiMultMatrixCommand_Seg4Cmd24(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		5,
		0,
		OrbisAnim::Location(0x3902)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.003420f, -0.055073f, -0.068441f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x3942),
		OrbisAnim::Location(0x3982),
		OrbisAnim::Location(0x39C2),
		OrbisAnim::Location(0x3A02),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_hip_helperTwist_weighted_02_pose_01_mm
static void NdiMultMatrixCommand_Seg4Cmd25(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		6,
		0,
		OrbisAnim::Location(0x3A42)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.002601f, -0.043247f, 0.064284f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x3A82),
		OrbisAnim::Location(0x3AC2),
		OrbisAnim::Location(0x3B02),
		OrbisAnim::Location(0x3B42),
		OrbisAnim::Location(0x3B82),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_hip_helperTwist_weighted_02_pose_02_mm
static void NdiMultMatrixCommand_Seg4Cmd26(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		5,
		0,
		OrbisAnim::Location(0x3BC2)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.052779f, 0.085227f, 0.019228f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x3C02),
		OrbisAnim::Location(0x3C42),
		OrbisAnim::Location(0x3C82),
		OrbisAnim::Location(0x3CC2),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_hip_helperBend_pose_01_mm
static void NdiMultMatrixCommand_Seg4Cmd27(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		11,
		0,
		OrbisAnim::Location(0x3D02)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.015695f, -0.078258f, 0.129328f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x3D42),
		OrbisAnim::Location(0x3D82),
		OrbisAnim::Location(0x3DC2),
		OrbisAnim::Location(0x3E02),
		OrbisAnim::Location(0x3E42),
		OrbisAnim::Location(0x3E82),
		OrbisAnim::Location(0x3EC2),
		OrbisAnim::Location(0x3F02),
		OrbisAnim::Location(0x3F42),
		OrbisAnim::Location(0x3F82),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_hip_helperTwist_weighted_02_pose_01_mm
static void NdiMultMatrixCommand_Seg4Cmd28(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		5,
		0,
		OrbisAnim::Location(0x3FC2)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.002601f, 0.043247f, -0.064284f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x4002),
		OrbisAnim::Location(0x4042),
		OrbisAnim::Location(0x4082),
		OrbisAnim::Location(0x40C2),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_hip_helperTwist_weighted_02_pose_02_mm
static void NdiMultMatrixCommand_Seg4Cmd29(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x4102)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.052779f, -0.085227f, -0.019228f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x4142),
		OrbisAnim::Location(0x4182),
		OrbisAnim::Location(0x41C2),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_hip_helperBend_pose_01_mm
static void NdiMultMatrixCommand_Seg4Cmd30(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		11,
		0,
		OrbisAnim::Location(0x4202)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.015695f, 0.078258f, -0.129328f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x4242),
		OrbisAnim::Location(0x4282),
		OrbisAnim::Location(0x42C2),
		OrbisAnim::Location(0x4302),
		OrbisAnim::Location(0x4342),
		OrbisAnim::Location(0x4382),
		OrbisAnim::Location(0x43C2),
		OrbisAnim::Location(0x4402),
		OrbisAnim::Location(0x4442),
		OrbisAnim::Location(0x4482),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// neck_c_helper_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd31(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0002),
		{
			OrbisAnim::Location(0x4612),
			OrbisAnim::Location(0x4616),
			OrbisAnim::Location(0x461A),
		},
		{
			OrbisAnim::Location(0x461E),
			OrbisAnim::Location(0x4622),
			OrbisAnim::Location(0x4626),
		},
		{
			OrbisAnim::Location(0x462A),
			OrbisAnim::Location(0x462E),
			OrbisAnim::Location(0x4632)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// neck_c_helper_pose_02_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd32(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0402),
		{
			OrbisAnim::Location(0x4636),
			OrbisAnim::Location(0x463A),
			OrbisAnim::Location(0x463E),
		},
		{
			OrbisAnim::Location(0x4642),
			OrbisAnim::Location(0x4646),
			OrbisAnim::Location(0x464A),
		},
		{
			OrbisAnim::Location(0x464E),
			OrbisAnim::Location(0x4652),
			OrbisAnim::Location(0x4656)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// neck_b_helper_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd33(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x07C2),
		{
			OrbisAnim::Location(0x465A),
			OrbisAnim::Location(0x465E),
			OrbisAnim::Location(0x4662),
		},
		{
			OrbisAnim::Location(0x4666),
			OrbisAnim::Location(0x466A),
			OrbisAnim::Location(0x466E),
		},
		{
			OrbisAnim::Location(0x4672),
			OrbisAnim::Location(0x4676),
			OrbisAnim::Location(0x467A)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// neck_b_helper_pose_02_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd34(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0CC2),
		{
			OrbisAnim::Location(0x467E),
			OrbisAnim::Location(0x4682),
			OrbisAnim::Location(0x4686),
		},
		{
			OrbisAnim::Location(0x468A),
			OrbisAnim::Location(0x468E),
			OrbisAnim::Location(0x4692),
		},
		{
			OrbisAnim::Location(0x4696),
			OrbisAnim::Location(0x469A),
			OrbisAnim::Location(0x469E)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_elbow_helper_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd35(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x12C2),
		{
			OrbisAnim::Location(0x46A2),
			OrbisAnim::Location(0x46A6),
			OrbisAnim::Location(0x46AA),
		},
		{
			OrbisAnim::Location(0x46AE),
			OrbisAnim::Location(0x46B2),
			OrbisAnim::Location(0x46B6),
		},
		{
			OrbisAnim::Location(0x46BA),
			OrbisAnim::Location(0x46BE),
			OrbisAnim::Location(0x46C2)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_elbow_helper_pose_02_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd36(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x1442),
		{
			OrbisAnim::Location(0x46C6),
			OrbisAnim::Location(0x46CA),
			OrbisAnim::Location(0x46CE),
		},
		{
			OrbisAnim::Location(0x46D2),
			OrbisAnim::Location(0x46D6),
			OrbisAnim::Location(0x46DA),
		},
		{
			OrbisAnim::Location(0x46DE),
			OrbisAnim::Location(0x46E2),
			OrbisAnim::Location(0x46E6)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_elbow_helper_pose_03_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd37(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x14C2),
		{
			OrbisAnim::Location(0x46EA),
			OrbisAnim::Location(0x46EE),
			OrbisAnim::Location(0x46F2),
		},
		{
			OrbisAnim::Location(0x46F6),
			OrbisAnim::Location(0x46FA),
			OrbisAnim::Location(0x46FE),
		},
		{
			OrbisAnim::Location(0x4702),
			OrbisAnim::Location(0x4706),
			OrbisAnim::Location(0x470A)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_shoulder_helperBend_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd38(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x1602),
		{
			OrbisAnim::Location(0x470E),
			OrbisAnim::Location(0x4712),
			OrbisAnim::Location(0x4716),
		},
		{
			OrbisAnim::Location(0x471A),
			OrbisAnim::Location(0x471E),
			OrbisAnim::Location(0x4722),
		},
		{
			OrbisAnim::Location(0x4726),
			OrbisAnim::Location(0x472A),
			OrbisAnim::Location(0x472E)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_shoulder_helperBend_pose_04_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd39(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x18C2),
		{
			OrbisAnim::Location(0x4732),
			OrbisAnim::Location(0x4736),
			OrbisAnim::Location(0x473A),
		},
		{
			OrbisAnim::Location(0x473E),
			OrbisAnim::Location(0x4742),
			OrbisAnim::Location(0x4746),
		},
		{
			OrbisAnim::Location(0x474A),
			OrbisAnim::Location(0x474E),
			OrbisAnim::Location(0x4752)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_elbow_helper_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd40(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x1DC2),
		{
			OrbisAnim::Location(0x4756),
			OrbisAnim::Location(0x475A),
			OrbisAnim::Location(0x475E),
		},
		{
			OrbisAnim::Location(0x4762),
			OrbisAnim::Location(0x4766),
			OrbisAnim::Location(0x476A),
		},
		{
			OrbisAnim::Location(0x476E),
			OrbisAnim::Location(0x4772),
			OrbisAnim::Location(0x4776)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_elbow_helper_pose_02_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd41(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x1F42),
		{
			OrbisAnim::Location(0x477A),
			OrbisAnim::Location(0x477E),
			OrbisAnim::Location(0x4782),
		},
		{
			OrbisAnim::Location(0x4786),
			OrbisAnim::Location(0x478A),
			OrbisAnim::Location(0x478E),
		},
		{
			OrbisAnim::Location(0x4792),
			OrbisAnim::Location(0x4796),
			OrbisAnim::Location(0x479A)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_elbow_helper_pose_03_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd42(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x2042),
		{
			OrbisAnim::Location(0x479E),
			OrbisAnim::Location(0x47A2),
			OrbisAnim::Location(0x47A6),
		},
		{
			OrbisAnim::Location(0x47AA),
			OrbisAnim::Location(0x47AE),
			OrbisAnim::Location(0x47B2),
		},
		{
			OrbisAnim::Location(0x47B6),
			OrbisAnim::Location(0x47BA),
			OrbisAnim::Location(0x47BE)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_shoulder_helperBend_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd43(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x2182),
		{
			OrbisAnim::Location(0x47C2),
			OrbisAnim::Location(0x47C6),
			OrbisAnim::Location(0x47CA),
		},
		{
			OrbisAnim::Location(0x47CE),
			OrbisAnim::Location(0x47D2),
			OrbisAnim::Location(0x47D6),
		},
		{
			OrbisAnim::Location(0x47DA),
			OrbisAnim::Location(0x47DE),
			OrbisAnim::Location(0x47E2)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_shoulder_helperBend_pose_04_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd44(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x2482),
		{
			OrbisAnim::Location(0x47E6),
			OrbisAnim::Location(0x47EA),
			OrbisAnim::Location(0x47EE),
		},
		{
			OrbisAnim::Location(0x47F2),
			OrbisAnim::Location(0x47F6),
			OrbisAnim::Location(0x47FA),
		},
		{
			OrbisAnim::Location(0x47FE),
			OrbisAnim::Location(0x4802),
			OrbisAnim::Location(0x4806)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// spine_e_helper_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd45(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x2902),
		{
			OrbisAnim::Location(0x480A),
			OrbisAnim::Location(0x480E),
			OrbisAnim::Location(0x4812),
		},
		{
			OrbisAnim::Location(0x4816),
			OrbisAnim::Location(0x481A),
			OrbisAnim::Location(0x481E),
		},
		{
			OrbisAnim::Location(0x4822),
			OrbisAnim::Location(0x4826),
			OrbisAnim::Location(0x482A)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// spine_e_helper_pose_02_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd46(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x2CC2),
		{
			OrbisAnim::Location(0x482E),
			OrbisAnim::Location(0x4832),
			OrbisAnim::Location(0x4836),
		},
		{
			OrbisAnim::Location(0x483A),
			OrbisAnim::Location(0x483E),
			OrbisAnim::Location(0x4842),
		},
		{
			OrbisAnim::Location(0x4846),
			OrbisAnim::Location(0x484A),
			OrbisAnim::Location(0x484E)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_knee_helper_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd47(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x3142),
		{
			OrbisAnim::Location(0x4852),
			OrbisAnim::Location(0x4856),
			OrbisAnim::Location(0x485A),
		},
		{
			OrbisAnim::Location(0x485E),
			OrbisAnim::Location(0x4862),
			OrbisAnim::Location(0x4866),
		},
		{
			OrbisAnim::Location(0x486A),
			OrbisAnim::Location(0x486E),
			OrbisAnim::Location(0x4872)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_knee_helper_pose_02_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd48(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x32C2),
		{
			OrbisAnim::Location(0x4876),
			OrbisAnim::Location(0x487A),
			OrbisAnim::Location(0x487E),
		},
		{
			OrbisAnim::Location(0x4882),
			OrbisAnim::Location(0x4886),
			OrbisAnim::Location(0x488A),
		},
		{
			OrbisAnim::Location(0x488E),
			OrbisAnim::Location(0x4892),
			OrbisAnim::Location(0x4896)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_knee_helper_weighted_01_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd49(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x3482),
		{
			OrbisAnim::Location(0x489A),
			OrbisAnim::Location(0x489E),
			OrbisAnim::Location(0x48A2),
		},
		{
			OrbisAnim::Location(0x48A6),
			OrbisAnim::Location(0x48AA),
			OrbisAnim::Location(0x48AE),
		},
		{
			OrbisAnim::Location(0x48B2),
			OrbisAnim::Location(0x48B6),
			OrbisAnim::Location(0x48BA)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_knee_helper_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd50(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x35C2),
		{
			OrbisAnim::Location(0x48BE),
			OrbisAnim::Location(0x48C2),
			OrbisAnim::Location(0x48C6),
		},
		{
			OrbisAnim::Location(0x48CA),
			OrbisAnim::Location(0x48CE),
			OrbisAnim::Location(0x48D2),
		},
		{
			OrbisAnim::Location(0x48D6),
			OrbisAnim::Location(0x48DA),
			OrbisAnim::Location(0x48DE)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_knee_helper_pose_02_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd51(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x3742),
		{
			OrbisAnim::Location(0x48E2),
			OrbisAnim::Location(0x48E6),
			OrbisAnim::Location(0x48EA),
		},
		{
			OrbisAnim::Location(0x48EE),
			OrbisAnim::Location(0x48F2),
			OrbisAnim::Location(0x48F6),
		},
		{
			OrbisAnim::Location(0x48FA),
			OrbisAnim::Location(0x48FE),
			OrbisAnim::Location(0x4902)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_knee_helper_weighted_01_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd52(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x3902),
		{
			OrbisAnim::Location(0x4906),
			OrbisAnim::Location(0x490A),
			OrbisAnim::Location(0x490E),
		},
		{
			OrbisAnim::Location(0x4912),
			OrbisAnim::Location(0x4916),
			OrbisAnim::Location(0x491A),
		},
		{
			OrbisAnim::Location(0x491E),
			OrbisAnim::Location(0x4922),
			OrbisAnim::Location(0x4926)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_hip_helperTwist_weighted_02_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd53(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x3A42),
		{
			OrbisAnim::Location(0x492A),
			OrbisAnim::Location(0x492E),
			OrbisAnim::Location(0x4932),
		},
		{
			OrbisAnim::Location(0x4936),
			OrbisAnim::Location(0x493A),
			OrbisAnim::Location(0x493E),
		},
		{
			OrbisAnim::Location(0x4942),
			OrbisAnim::Location(0x4946),
			OrbisAnim::Location(0x494A)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_hip_helperTwist_weighted_02_pose_02_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd54(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x3BC2),
		{
			OrbisAnim::Location(0x494E),
			OrbisAnim::Location(0x4952),
			OrbisAnim::Location(0x4956),
		},
		{
			OrbisAnim::Location(0x495A),
			OrbisAnim::Location(0x495E),
			OrbisAnim::Location(0x4962),
		},
		{
			OrbisAnim::Location(0x4966),
			OrbisAnim::Location(0x496A),
			OrbisAnim::Location(0x496E)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_hip_helperBend_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd55(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x3D02),
		{
			OrbisAnim::Location(0x4972),
			OrbisAnim::Location(0x4976),
			OrbisAnim::Location(0x497A),
		},
		{
			OrbisAnim::Location(0x497E),
			OrbisAnim::Location(0x4982),
			OrbisAnim::Location(0x4986),
		},
		{
			OrbisAnim::Location(0x498A),
			OrbisAnim::Location(0x498E),
			OrbisAnim::Location(0x4992)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_hip_helperTwist_weighted_02_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd56(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x3FC2),
		{
			OrbisAnim::Location(0x4996),
			OrbisAnim::Location(0x499A),
			OrbisAnim::Location(0x499E),
		},
		{
			OrbisAnim::Location(0x49A2),
			OrbisAnim::Location(0x49A6),
			OrbisAnim::Location(0x49AA),
		},
		{
			OrbisAnim::Location(0x49AE),
			OrbisAnim::Location(0x49B2),
			OrbisAnim::Location(0x49B6)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_hip_helperTwist_weighted_02_pose_02_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd57(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x4102),
		{
			OrbisAnim::Location(0x49BA),
			OrbisAnim::Location(0x49BE),
			OrbisAnim::Location(0x49C2),
		},
		{
			OrbisAnim::Location(0x49C6),
			OrbisAnim::Location(0x49CA),
			OrbisAnim::Location(0x49CE),
		},
		{
			OrbisAnim::Location(0x49D2),
			OrbisAnim::Location(0x49D6),
			OrbisAnim::Location(0x49DA)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_hip_helperBend_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg4Cmd58(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x4202),
		{
			OrbisAnim::Location(0x49DE),
			OrbisAnim::Location(0x49E2),
			OrbisAnim::Location(0x49E6),
		},
		{
			OrbisAnim::Location(0x49EA),
			OrbisAnim::Location(0x49EE),
			OrbisAnim::Location(0x49F2),
		},
		{
			OrbisAnim::Location(0x49F6),
			OrbisAnim::Location(0x49FA),
			OrbisAnim::Location(0x49FE)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

static void HierarchyCopyCommand_Seg4Cmd59(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locJointParams + 0x0950) = *(float*)(locSdkScalarTable + 0x4610);
	*(float*)(locJointParams + 0x0954) = *(float*)(locSdkScalarTable + 0x4614);
	*(float*)(locJointParams + 0x0958) = *(float*)(locSdkScalarTable + 0x4618);
	*(float*)(locSdkScalarTable + 0x44C0) = *(float*)(locSdkScalarTable + 0x461C);
	*(float*)(locSdkScalarTable + 0x4530) = *(float*)(locSdkScalarTable + 0x4620);
	*(float*)(locSdkScalarTable + 0x45A0) = *(float*)(locSdkScalarTable + 0x4624);
	*(float*)(locJointParams + 0x0930) = *(float*)(locSdkScalarTable + 0x4628);
	*(float*)(locJointParams + 0x0934) = *(float*)(locSdkScalarTable + 0x462C);
	*(float*)(locJointParams + 0x0938) = *(float*)(locSdkScalarTable + 0x4630);
	*(float*)(locJointParams + 0x0980) = *(float*)(locSdkScalarTable + 0x4634);
	*(float*)(locJointParams + 0x0984) = *(float*)(locSdkScalarTable + 0x4638);
	*(float*)(locJointParams + 0x0988) = *(float*)(locSdkScalarTable + 0x463C);
	*(float*)(locSdkScalarTable + 0x44C4) = *(float*)(locSdkScalarTable + 0x4640);
	*(float*)(locSdkScalarTable + 0x4534) = *(float*)(locSdkScalarTable + 0x4644);
	*(float*)(locSdkScalarTable + 0x45A4) = *(float*)(locSdkScalarTable + 0x4648);
	*(float*)(locJointParams + 0x0960) = *(float*)(locSdkScalarTable + 0x464C);
	*(float*)(locJointParams + 0x0964) = *(float*)(locSdkScalarTable + 0x4650);
	*(float*)(locJointParams + 0x0968) = *(float*)(locSdkScalarTable + 0x4654);
	*(float*)(locJointParams + 0x09B0) = *(float*)(locSdkScalarTable + 0x4658);
	*(float*)(locJointParams + 0x09B4) = *(float*)(locSdkScalarTable + 0x465C);
	*(float*)(locJointParams + 0x09B8) = *(float*)(locSdkScalarTable + 0x4660);
	*(float*)(locSdkScalarTable + 0x44C8) = *(float*)(locSdkScalarTable + 0x4664);
	*(float*)(locSdkScalarTable + 0x4538) = *(float*)(locSdkScalarTable + 0x4668);
	*(float*)(locSdkScalarTable + 0x45A8) = *(float*)(locSdkScalarTable + 0x466C);
	*(float*)(locJointParams + 0x0990) = *(float*)(locSdkScalarTable + 0x4670);
	*(float*)(locJointParams + 0x0994) = *(float*)(locSdkScalarTable + 0x4674);
	*(float*)(locJointParams + 0x0998) = *(float*)(locSdkScalarTable + 0x4678);
	*(float*)(locJointParams + 0x09E0) = *(float*)(locSdkScalarTable + 0x467C);
	*(float*)(locJointParams + 0x09E4) = *(float*)(locSdkScalarTable + 0x4680);
	*(float*)(locJointParams + 0x09E8) = *(float*)(locSdkScalarTable + 0x4684);
	*(float*)(locSdkScalarTable + 0x44CC) = *(float*)(locSdkScalarTable + 0x4688);
	*(float*)(locSdkScalarTable + 0x453C) = *(float*)(locSdkScalarTable + 0x468C);
	*(float*)(locSdkScalarTable + 0x45AC) = *(float*)(locSdkScalarTable + 0x4690);
	*(float*)(locJointParams + 0x09C0) = *(float*)(locSdkScalarTable + 0x4694);
	*(float*)(locJointParams + 0x09C4) = *(float*)(locSdkScalarTable + 0x4698);
	*(float*)(locJointParams + 0x09C8) = *(float*)(locSdkScalarTable + 0x469C);
	*(float*)(locJointParams + 0x0A10) = *(float*)(locSdkScalarTable + 0x46A0);
	*(float*)(locJointParams + 0x0A14) = *(float*)(locSdkScalarTable + 0x46A4);
	*(float*)(locJointParams + 0x0A18) = *(float*)(locSdkScalarTable + 0x46A8);
	*(float*)(locSdkScalarTable + 0x44D0) = *(float*)(locSdkScalarTable + 0x46AC);
	*(float*)(locSdkScalarTable + 0x4540) = *(float*)(locSdkScalarTable + 0x46B0);
	*(float*)(locSdkScalarTable + 0x45B0) = *(float*)(locSdkScalarTable + 0x46B4);
	*(float*)(locJointParams + 0x09F0) = *(float*)(locSdkScalarTable + 0x46B8);
	*(float*)(locJointParams + 0x09F4) = *(float*)(locSdkScalarTable + 0x46BC);
	*(float*)(locJointParams + 0x09F8) = *(float*)(locSdkScalarTable + 0x46C0);
	*(float*)(locJointParams + 0x0A40) = *(float*)(locSdkScalarTable + 0x46C4);
	*(float*)(locJointParams + 0x0A44) = *(float*)(locSdkScalarTable + 0x46C8);
	*(float*)(locJointParams + 0x0A48) = *(float*)(locSdkScalarTable + 0x46CC);
	*(float*)(locSdkScalarTable + 0x44D4) = *(float*)(locSdkScalarTable + 0x46D0);
	*(float*)(locSdkScalarTable + 0x4544) = *(float*)(locSdkScalarTable + 0x46D4);
	*(float*)(locSdkScalarTable + 0x45B4) = *(float*)(locSdkScalarTable + 0x46D8);
	*(float*)(locJointParams + 0x0A20) = *(float*)(locSdkScalarTable + 0x46DC);
	*(float*)(locJointParams + 0x0A24) = *(float*)(locSdkScalarTable + 0x46E0);
	*(float*)(locJointParams + 0x0A28) = *(float*)(locSdkScalarTable + 0x46E4);
	*(float*)(locJointParams + 0x0A70) = *(float*)(locSdkScalarTable + 0x46E8);
	*(float*)(locJointParams + 0x0A74) = *(float*)(locSdkScalarTable + 0x46EC);
	*(float*)(locJointParams + 0x0A78) = *(float*)(locSdkScalarTable + 0x46F0);
	*(float*)(locSdkScalarTable + 0x44D8) = *(float*)(locSdkScalarTable + 0x46F4);
	*(float*)(locSdkScalarTable + 0x4548) = *(float*)(locSdkScalarTable + 0x46F8);
	*(float*)(locSdkScalarTable + 0x45B8) = *(float*)(locSdkScalarTable + 0x46FC);
	*(float*)(locJointParams + 0x0A50) = *(float*)(locSdkScalarTable + 0x4700);
	*(float*)(locJointParams + 0x0A54) = *(float*)(locSdkScalarTable + 0x4704);
	*(float*)(locJointParams + 0x0A58) = *(float*)(locSdkScalarTable + 0x4708);
	*(float*)(locJointParams + 0x0AA0) = *(float*)(locSdkScalarTable + 0x470C);
	*(float*)(locJointParams + 0x0AA4) = *(float*)(locSdkScalarTable + 0x4710);
	*(float*)(locJointParams + 0x0AA8) = *(float*)(locSdkScalarTable + 0x4714);
	*(float*)(locSdkScalarTable + 0x44DC) = *(float*)(locSdkScalarTable + 0x4718);
	*(float*)(locSdkScalarTable + 0x454C) = *(float*)(locSdkScalarTable + 0x471C);
	*(float*)(locSdkScalarTable + 0x45BC) = *(float*)(locSdkScalarTable + 0x4720);
	*(float*)(locJointParams + 0x0A80) = *(float*)(locSdkScalarTable + 0x4724);
	*(float*)(locJointParams + 0x0A84) = *(float*)(locSdkScalarTable + 0x4728);
	*(float*)(locJointParams + 0x0A88) = *(float*)(locSdkScalarTable + 0x472C);
	*(float*)(locJointParams + 0x0AD0) = *(float*)(locSdkScalarTable + 0x4730);
	*(float*)(locJointParams + 0x0AD4) = *(float*)(locSdkScalarTable + 0x4734);
	*(float*)(locJointParams + 0x0AD8) = *(float*)(locSdkScalarTable + 0x4738);
	*(float*)(locSdkScalarTable + 0x44E0) = *(float*)(locSdkScalarTable + 0x473C);
	*(float*)(locSdkScalarTable + 0x4550) = *(float*)(locSdkScalarTable + 0x4740);
	*(float*)(locSdkScalarTable + 0x45C0) = *(float*)(locSdkScalarTable + 0x4744);
	*(float*)(locJointParams + 0x0AB0) = *(float*)(locSdkScalarTable + 0x4748);
	*(float*)(locJointParams + 0x0AB4) = *(float*)(locSdkScalarTable + 0x474C);
	*(float*)(locJointParams + 0x0AB8) = *(float*)(locSdkScalarTable + 0x4750);
	*(float*)(locJointParams + 0x0B00) = *(float*)(locSdkScalarTable + 0x4754);
	*(float*)(locJointParams + 0x0B04) = *(float*)(locSdkScalarTable + 0x4758);
	*(float*)(locJointParams + 0x0B08) = *(float*)(locSdkScalarTable + 0x475C);
	*(float*)(locSdkScalarTable + 0x44E4) = *(float*)(locSdkScalarTable + 0x4760);
	*(float*)(locSdkScalarTable + 0x4554) = *(float*)(locSdkScalarTable + 0x4764);
	*(float*)(locSdkScalarTable + 0x45C4) = *(float*)(locSdkScalarTable + 0x4768);
	*(float*)(locJointParams + 0x0AE0) = *(float*)(locSdkScalarTable + 0x476C);
	*(float*)(locJointParams + 0x0AE4) = *(float*)(locSdkScalarTable + 0x4770);
	*(float*)(locJointParams + 0x0AE8) = *(float*)(locSdkScalarTable + 0x4774);
	*(float*)(locJointParams + 0x0B30) = *(float*)(locSdkScalarTable + 0x4778);
	*(float*)(locJointParams + 0x0B34) = *(float*)(locSdkScalarTable + 0x477C);
	*(float*)(locJointParams + 0x0B38) = *(float*)(locSdkScalarTable + 0x4780);
	*(float*)(locSdkScalarTable + 0x44E8) = *(float*)(locSdkScalarTable + 0x4784);
	*(float*)(locSdkScalarTable + 0x4558) = *(float*)(locSdkScalarTable + 0x4788);
	*(float*)(locSdkScalarTable + 0x45C8) = *(float*)(locSdkScalarTable + 0x478C);
	*(float*)(locJointParams + 0x0B10) = *(float*)(locSdkScalarTable + 0x4790);
	*(float*)(locJointParams + 0x0B14) = *(float*)(locSdkScalarTable + 0x4794);
	*(float*)(locJointParams + 0x0B18) = *(float*)(locSdkScalarTable + 0x4798);
	*(float*)(locJointParams + 0x0B60) = *(float*)(locSdkScalarTable + 0x479C);
	*(float*)(locJointParams + 0x0B64) = *(float*)(locSdkScalarTable + 0x47A0);
	*(float*)(locJointParams + 0x0B68) = *(float*)(locSdkScalarTable + 0x47A4);
	*(float*)(locSdkScalarTable + 0x44EC) = *(float*)(locSdkScalarTable + 0x47A8);
	*(float*)(locSdkScalarTable + 0x455C) = *(float*)(locSdkScalarTable + 0x47AC);
	*(float*)(locSdkScalarTable + 0x45CC) = *(float*)(locSdkScalarTable + 0x47B0);
	*(float*)(locJointParams + 0x0B40) = *(float*)(locSdkScalarTable + 0x47B4);
	*(float*)(locJointParams + 0x0B44) = *(float*)(locSdkScalarTable + 0x47B8);
	*(float*)(locJointParams + 0x0B48) = *(float*)(locSdkScalarTable + 0x47BC);
	*(float*)(locJointParams + 0x0B90) = *(float*)(locSdkScalarTable + 0x47C0);
	*(float*)(locJointParams + 0x0B94) = *(float*)(locSdkScalarTable + 0x47C4);
	*(float*)(locJointParams + 0x0B98) = *(float*)(locSdkScalarTable + 0x47C8);
	*(float*)(locSdkScalarTable + 0x44F0) = *(float*)(locSdkScalarTable + 0x47CC);
	*(float*)(locSdkScalarTable + 0x4560) = *(float*)(locSdkScalarTable + 0x47D0);
	*(float*)(locSdkScalarTable + 0x45D0) = *(float*)(locSdkScalarTable + 0x47D4);
	*(float*)(locJointParams + 0x0B70) = *(float*)(locSdkScalarTable + 0x47D8);
	*(float*)(locJointParams + 0x0B74) = *(float*)(locSdkScalarTable + 0x47DC);
	*(float*)(locJointParams + 0x0B78) = *(float*)(locSdkScalarTable + 0x47E0);
	*(float*)(locJointParams + 0x0BC0) = *(float*)(locSdkScalarTable + 0x47E4);
	*(float*)(locJointParams + 0x0BC4) = *(float*)(locSdkScalarTable + 0x47E8);
	*(float*)(locJointParams + 0x0BC8) = *(float*)(locSdkScalarTable + 0x47EC);
	*(float*)(locSdkScalarTable + 0x44F4) = *(float*)(locSdkScalarTable + 0x47F0);
	*(float*)(locSdkScalarTable + 0x4564) = *(float*)(locSdkScalarTable + 0x47F4);
	*(float*)(locSdkScalarTable + 0x45D4) = *(float*)(locSdkScalarTable + 0x47F8);
	*(float*)(locJointParams + 0x0BA0) = *(float*)(locSdkScalarTable + 0x47FC);
	*(float*)(locJointParams + 0x0BA4) = *(float*)(locSdkScalarTable + 0x4800);
	*(float*)(locJointParams + 0x0BA8) = *(float*)(locSdkScalarTable + 0x4804);
	*(float*)(locJointParams + 0x0BF0) = *(float*)(locSdkScalarTable + 0x4808);
	*(float*)(locJointParams + 0x0BF4) = *(float*)(locSdkScalarTable + 0x480C);
	*(float*)(locJointParams + 0x0BF8) = *(float*)(locSdkScalarTable + 0x4810);
	*(float*)(locSdkScalarTable + 0x44F8) = *(float*)(locSdkScalarTable + 0x4814);
	*(float*)(locSdkScalarTable + 0x4568) = *(float*)(locSdkScalarTable + 0x4818);
	*(float*)(locSdkScalarTable + 0x45D8) = *(float*)(locSdkScalarTable + 0x481C);
	*(float*)(locJointParams + 0x0BD0) = *(float*)(locSdkScalarTable + 0x4820);
	*(float*)(locJointParams + 0x0BD4) = *(float*)(locSdkScalarTable + 0x4824);
	*(float*)(locJointParams + 0x0BD8) = *(float*)(locSdkScalarTable + 0x4828);
	*(float*)(locJointParams + 0x0C20) = *(float*)(locSdkScalarTable + 0x482C);
	*(float*)(locJointParams + 0x0C24) = *(float*)(locSdkScalarTable + 0x4830);
	*(float*)(locJointParams + 0x0C28) = *(float*)(locSdkScalarTable + 0x4834);
	*(float*)(locSdkScalarTable + 0x44FC) = *(float*)(locSdkScalarTable + 0x4838);
	*(float*)(locSdkScalarTable + 0x456C) = *(float*)(locSdkScalarTable + 0x483C);
	*(float*)(locSdkScalarTable + 0x45DC) = *(float*)(locSdkScalarTable + 0x4840);
	*(float*)(locJointParams + 0x0C00) = *(float*)(locSdkScalarTable + 0x4844);
	*(float*)(locJointParams + 0x0C04) = *(float*)(locSdkScalarTable + 0x4848);
	*(float*)(locJointParams + 0x0C08) = *(float*)(locSdkScalarTable + 0x484C);
	*(float*)(locJointParams + 0x0C50) = *(float*)(locSdkScalarTable + 0x4850);
	*(float*)(locJointParams + 0x0C54) = *(float*)(locSdkScalarTable + 0x4854);
	*(float*)(locJointParams + 0x0C58) = *(float*)(locSdkScalarTable + 0x4858);
	*(float*)(locSdkScalarTable + 0x4500) = *(float*)(locSdkScalarTable + 0x485C);
	*(float*)(locSdkScalarTable + 0x4570) = *(float*)(locSdkScalarTable + 0x4860);
	*(float*)(locSdkScalarTable + 0x45E0) = *(float*)(locSdkScalarTable + 0x4864);
	*(float*)(locJointParams + 0x0C30) = *(float*)(locSdkScalarTable + 0x4868);
	*(float*)(locJointParams + 0x0C34) = *(float*)(locSdkScalarTable + 0x486C);
	*(float*)(locJointParams + 0x0C38) = *(float*)(locSdkScalarTable + 0x4870);
	*(float*)(locJointParams + 0x0C80) = *(float*)(locSdkScalarTable + 0x4874);
	*(float*)(locJointParams + 0x0C84) = *(float*)(locSdkScalarTable + 0x4878);
	*(float*)(locJointParams + 0x0C88) = *(float*)(locSdkScalarTable + 0x487C);
	*(float*)(locSdkScalarTable + 0x4504) = *(float*)(locSdkScalarTable + 0x4880);
	*(float*)(locSdkScalarTable + 0x4574) = *(float*)(locSdkScalarTable + 0x4884);
	*(float*)(locSdkScalarTable + 0x45E4) = *(float*)(locSdkScalarTable + 0x4888);
	*(float*)(locJointParams + 0x0C60) = *(float*)(locSdkScalarTable + 0x488C);
	*(float*)(locJointParams + 0x0C64) = *(float*)(locSdkScalarTable + 0x4890);
	*(float*)(locJointParams + 0x0C68) = *(float*)(locSdkScalarTable + 0x4894);
	*(float*)(locJointParams + 0x0CB0) = *(float*)(locSdkScalarTable + 0x4898);
	*(float*)(locJointParams + 0x0CB4) = *(float*)(locSdkScalarTable + 0x489C);
	*(float*)(locJointParams + 0x0CB8) = *(float*)(locSdkScalarTable + 0x48A0);
	*(float*)(locSdkScalarTable + 0x4508) = *(float*)(locSdkScalarTable + 0x48A4);
	*(float*)(locSdkScalarTable + 0x4578) = *(float*)(locSdkScalarTable + 0x48A8);
	*(float*)(locSdkScalarTable + 0x45E8) = *(float*)(locSdkScalarTable + 0x48AC);
	*(float*)(locJointParams + 0x0C90) = *(float*)(locSdkScalarTable + 0x48B0);
	*(float*)(locJointParams + 0x0C94) = *(float*)(locSdkScalarTable + 0x48B4);
	*(float*)(locJointParams + 0x0C98) = *(float*)(locSdkScalarTable + 0x48B8);
	*(float*)(locJointParams + 0x0CE0) = *(float*)(locSdkScalarTable + 0x48BC);
	*(float*)(locJointParams + 0x0CE4) = *(float*)(locSdkScalarTable + 0x48C0);
	*(float*)(locJointParams + 0x0CE8) = *(float*)(locSdkScalarTable + 0x48C4);
	*(float*)(locSdkScalarTable + 0x450C) = *(float*)(locSdkScalarTable + 0x48C8);
	*(float*)(locSdkScalarTable + 0x457C) = *(float*)(locSdkScalarTable + 0x48CC);
	*(float*)(locSdkScalarTable + 0x45EC) = *(float*)(locSdkScalarTable + 0x48D0);
	*(float*)(locJointParams + 0x0CC0) = *(float*)(locSdkScalarTable + 0x48D4);
	*(float*)(locJointParams + 0x0CC4) = *(float*)(locSdkScalarTable + 0x48D8);
	*(float*)(locJointParams + 0x0CC8) = *(float*)(locSdkScalarTable + 0x48DC);
	*(float*)(locJointParams + 0x0D10) = *(float*)(locSdkScalarTable + 0x48E0);
	*(float*)(locJointParams + 0x0D14) = *(float*)(locSdkScalarTable + 0x48E4);
	*(float*)(locJointParams + 0x0D18) = *(float*)(locSdkScalarTable + 0x48E8);
	*(float*)(locSdkScalarTable + 0x4510) = *(float*)(locSdkScalarTable + 0x48EC);
	*(float*)(locSdkScalarTable + 0x4580) = *(float*)(locSdkScalarTable + 0x48F0);
	*(float*)(locSdkScalarTable + 0x45F0) = *(float*)(locSdkScalarTable + 0x48F4);
	*(float*)(locJointParams + 0x0CF0) = *(float*)(locSdkScalarTable + 0x48F8);
	*(float*)(locJointParams + 0x0CF4) = *(float*)(locSdkScalarTable + 0x48FC);
	*(float*)(locJointParams + 0x0CF8) = *(float*)(locSdkScalarTable + 0x4900);
	*(float*)(locJointParams + 0x0D40) = *(float*)(locSdkScalarTable + 0x4904);
	*(float*)(locJointParams + 0x0D44) = *(float*)(locSdkScalarTable + 0x4908);
	*(float*)(locJointParams + 0x0D48) = *(float*)(locSdkScalarTable + 0x490C);
	*(float*)(locSdkScalarTable + 0x4514) = *(float*)(locSdkScalarTable + 0x4910);
	*(float*)(locSdkScalarTable + 0x4584) = *(float*)(locSdkScalarTable + 0x4914);
	*(float*)(locSdkScalarTable + 0x45F4) = *(float*)(locSdkScalarTable + 0x4918);
	*(float*)(locJointParams + 0x0D20) = *(float*)(locSdkScalarTable + 0x491C);
	*(float*)(locJointParams + 0x0D24) = *(float*)(locSdkScalarTable + 0x4920);
	*(float*)(locJointParams + 0x0D28) = *(float*)(locSdkScalarTable + 0x4924);
	*(float*)(locJointParams + 0x0D70) = *(float*)(locSdkScalarTable + 0x4928);
	*(float*)(locJointParams + 0x0D74) = *(float*)(locSdkScalarTable + 0x492C);
	*(float*)(locJointParams + 0x0D78) = *(float*)(locSdkScalarTable + 0x4930);
	*(float*)(locSdkScalarTable + 0x4518) = *(float*)(locSdkScalarTable + 0x4934);
	*(float*)(locSdkScalarTable + 0x4588) = *(float*)(locSdkScalarTable + 0x4938);
	*(float*)(locSdkScalarTable + 0x45F8) = *(float*)(locSdkScalarTable + 0x493C);
	*(float*)(locJointParams + 0x0D50) = *(float*)(locSdkScalarTable + 0x4940);
	*(float*)(locJointParams + 0x0D54) = *(float*)(locSdkScalarTable + 0x4944);
	*(float*)(locJointParams + 0x0D58) = *(float*)(locSdkScalarTable + 0x4948);
	*(float*)(locJointParams + 0x0DA0) = *(float*)(locSdkScalarTable + 0x494C);
	*(float*)(locJointParams + 0x0DA4) = *(float*)(locSdkScalarTable + 0x4950);
	*(float*)(locJointParams + 0x0DA8) = *(float*)(locSdkScalarTable + 0x4954);
	*(float*)(locSdkScalarTable + 0x451C) = *(float*)(locSdkScalarTable + 0x4958);
	*(float*)(locSdkScalarTable + 0x458C) = *(float*)(locSdkScalarTable + 0x495C);
	*(float*)(locSdkScalarTable + 0x45FC) = *(float*)(locSdkScalarTable + 0x4960);
	*(float*)(locJointParams + 0x0D80) = *(float*)(locSdkScalarTable + 0x4964);
	*(float*)(locJointParams + 0x0D84) = *(float*)(locSdkScalarTable + 0x4968);
	*(float*)(locJointParams + 0x0D88) = *(float*)(locSdkScalarTable + 0x496C);
	*(float*)(locJointParams + 0x0DD0) = *(float*)(locSdkScalarTable + 0x4970);
	*(float*)(locJointParams + 0x0DD4) = *(float*)(locSdkScalarTable + 0x4974);
	*(float*)(locJointParams + 0x0DD8) = *(float*)(locSdkScalarTable + 0x4978);
	*(float*)(locSdkScalarTable + 0x4520) = *(float*)(locSdkScalarTable + 0x497C);
	*(float*)(locSdkScalarTable + 0x4590) = *(float*)(locSdkScalarTable + 0x4980);
	*(float*)(locSdkScalarTable + 0x4600) = *(float*)(locSdkScalarTable + 0x4984);
	*(float*)(locJointParams + 0x0DB0) = *(float*)(locSdkScalarTable + 0x4988);
	*(float*)(locJointParams + 0x0DB4) = *(float*)(locSdkScalarTable + 0x498C);
	*(float*)(locJointParams + 0x0DB8) = *(float*)(locSdkScalarTable + 0x4990);
	*(float*)(locJointParams + 0x0E00) = *(float*)(locSdkScalarTable + 0x4994);
	*(float*)(locJointParams + 0x0E04) = *(float*)(locSdkScalarTable + 0x4998);
	*(float*)(locJointParams + 0x0E08) = *(float*)(locSdkScalarTable + 0x499C);
	*(float*)(locSdkScalarTable + 0x4524) = *(float*)(locSdkScalarTable + 0x49A0);
	*(float*)(locSdkScalarTable + 0x4594) = *(float*)(locSdkScalarTable + 0x49A4);
	*(float*)(locSdkScalarTable + 0x4604) = *(float*)(locSdkScalarTable + 0x49A8);
	*(float*)(locJointParams + 0x0DE0) = *(float*)(locSdkScalarTable + 0x49AC);
	*(float*)(locJointParams + 0x0DE4) = *(float*)(locSdkScalarTable + 0x49B0);
	*(float*)(locJointParams + 0x0DE8) = *(float*)(locSdkScalarTable + 0x49B4);
	*(float*)(locJointParams + 0x0E30) = *(float*)(locSdkScalarTable + 0x49B8);
	*(float*)(locJointParams + 0x0E34) = *(float*)(locSdkScalarTable + 0x49BC);
	*(float*)(locJointParams + 0x0E38) = *(float*)(locSdkScalarTable + 0x49C0);
	*(float*)(locSdkScalarTable + 0x4528) = *(float*)(locSdkScalarTable + 0x49C4);
	*(float*)(locSdkScalarTable + 0x4598) = *(float*)(locSdkScalarTable + 0x49C8);
	*(float*)(locSdkScalarTable + 0x4608) = *(float*)(locSdkScalarTable + 0x49CC);
	*(float*)(locJointParams + 0x0E10) = *(float*)(locSdkScalarTable + 0x49D0);
	*(float*)(locJointParams + 0x0E14) = *(float*)(locSdkScalarTable + 0x49D4);
	*(float*)(locJointParams + 0x0E18) = *(float*)(locSdkScalarTable + 0x49D8);
	*(float*)(locJointParams + 0x0E60) = *(float*)(locSdkScalarTable + 0x49DC);
	*(float*)(locJointParams + 0x0E64) = *(float*)(locSdkScalarTable + 0x49E0);
	*(float*)(locJointParams + 0x0E68) = *(float*)(locSdkScalarTable + 0x49E4);
	*(float*)(locSdkScalarTable + 0x452C) = *(float*)(locSdkScalarTable + 0x49E8);
	*(float*)(locSdkScalarTable + 0x459C) = *(float*)(locSdkScalarTable + 0x49EC);
	*(float*)(locSdkScalarTable + 0x460C) = *(float*)(locSdkScalarTable + 0x49F0);
	*(float*)(locJointParams + 0x0E40) = *(float*)(locSdkScalarTable + 0x49F4);
	*(float*)(locJointParams + 0x0E44) = *(float*)(locSdkScalarTable + 0x49F8);
	*(float*)(locJointParams + 0x0E48) = *(float*)(locSdkScalarTable + 0x49FC);
}

static void HierarchySdkDrivenRotCommand_Seg4Cmd60(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x44C0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4530)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x45A0)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0940) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x44C4)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4534)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x45A4)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0970) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x44C8)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4538)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x45A8)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x09A0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x44CC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x453C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x45AC)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x09D0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x44D0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4540)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x45B0)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0A00) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x44D4)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4544)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x45B4)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0A30) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x44D8)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4548)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x45B8)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0A60) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x44DC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x454C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x45BC)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0A90) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x44E0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4550)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x45C0)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0AC0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x44E4)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4554)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x45C4)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0AF0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x44E8)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4558)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x45C8)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0B20) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x44EC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x455C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x45CC)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0B50) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x44F0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4560)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x45D0)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0B80) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x44F4)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4564)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x45D4)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0BB0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x44F8)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4568)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x45D8)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0BE0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x44FC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x456C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x45DC)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0C10) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4500)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4570)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x45E0)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0C40) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4504)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4574)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x45E4)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0C70) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4508)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4578)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x45E8)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0CA0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x450C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x457C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x45EC)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0CD0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4510)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4580)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x45F0)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0D00) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4514)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4584)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x45F4)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0D30) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4518)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4588)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x45F8)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0D60) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x451C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x458C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x45FC)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0D90) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4520)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4590)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4600)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0DC0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4524)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4594)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4604)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0DF0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4528)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4598)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x4608)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0E20) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x452C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x459C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x460C)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0E50) = q;
	}
}

static void HierarchyParentingCommand_Seg4Cmd61(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0320, 0x0F70 + 3 },	// Child[282]: neck_c_helper_pose_01, Parent[67]: neck_c_helper
		{ 0x0330, 0x0F70 + 3 },	// Child[283]: neck_c_helper_pose_02, Parent[67]: neck_c_helper
		{ 0x0340, 0x0F30 + 3 },	// Child[284]: neck_b_helper_pose_01, Parent[66]: neck_b_helper
		{ 0x0350, 0x0F30 + 3 },	// Child[285]: neck_b_helper_pose_02, Parent[66]: neck_b_helper
		{ 0x0360, 0x0FF0 + 3 },	// Child[286]: l_elbow_helper_pose_01, Parent[72]: l_elbow_helper
		{ 0x0370, 0x0FF0 + 3 },	// Child[287]: l_elbow_helper_pose_02, Parent[72]: l_elbow_helper
		{ 0x0380, 0x0FF0 + 3 },	// Child[288]: l_elbow_helper_pose_03, Parent[72]: l_elbow_helper
		{ 0x0390, 0x10B0 + 3 },	// Child[289]: l_shoulder_helperBend_pose_01, Parent[79]: l_shoulder_helperBend
		{ 0x03A0, 0x10B0 + 3 },	// Child[290]: l_shoulder_helperBend_pose_04, Parent[79]: l_shoulder_helperBend
		{ 0x03B0, 0x10F0 + 3 },	// Child[291]: r_elbow_helper_pose_01, Parent[86]: r_elbow_helper
		{ 0x03C0, 0x10F0 + 3 },	// Child[292]: r_elbow_helper_pose_02, Parent[86]: r_elbow_helper
		{ 0x03D0, 0x10F0 + 3 },	// Child[293]: r_elbow_helper_pose_03, Parent[86]: r_elbow_helper
		{ 0x03E0, 0x11B0 + 3 },	// Child[294]: r_shoulder_helperBend_pose_01, Parent[93]: r_shoulder_helperBend
		{ 0x03F0, 0x11B0 + 3 },	// Child[295]: r_shoulder_helperBend_pose_04, Parent[93]: r_shoulder_helperBend
		{ 0x0400, 0x0EF0 + 3 },	// Child[296]: spine_e_helper_pose_01, Parent[64]: spine_e_helper
		{ 0x0410, 0x0EF0 + 3 },	// Child[297]: spine_e_helper_pose_02, Parent[64]: spine_e_helper
		{ 0x0420, 0x11F0 + 3 },	// Child[298]: l_knee_helper_pose_01, Parent[99]: l_knee_helper
		{ 0x0430, 0x11F0 + 3 },	// Child[299]: l_knee_helper_pose_02, Parent[99]: l_knee_helper
		{ 0x0440, 0x1270 + 3 },	// Child[300]: l_knee_helper_weighted_01_pose_01, Parent[105]: l_knee_helper_weighted_01
		{ 0x0450, 0x12B0 + 3 },	// Child[301]: r_knee_helper_pose_01, Parent[107]: r_knee_helper
		{ 0x0460, 0x12B0 + 3 },	// Child[302]: r_knee_helper_pose_02, Parent[107]: r_knee_helper
		{ 0x0470, 0x1330 + 3 },	// Child[303]: r_knee_helper_weighted_01_pose_01, Parent[113]: r_knee_helper_weighted_01
		{ 0x0480, 0x13F0 + 3 },	// Child[304]: l_hip_helperTwist_weighted_02_pose_01, Parent[117]: l_hip_helperTwist_weighted_02
		{ 0x0490, 0x13F0 + 3 },	// Child[305]: l_hip_helperTwist_weighted_02_pose_02, Parent[117]: l_hip_helperTwist_weighted_02
		{ 0x04A0, 0x1370 + 3 },	// Child[306]: l_hip_helperBend_pose_01, Parent[114]: l_hip_helperBend
		{ 0x04B0, 0x14B0 + 3 },	// Child[307]: r_hip_helperTwist_weighted_02_pose_01, Parent[122]: r_hip_helperTwist_weighted_02
		{ 0x04C0, 0x14B0 + 3 },	// Child[308]: r_hip_helperTwist_weighted_02_pose_02, Parent[122]: r_hip_helperTwist_weighted_02
		{ 0x04D0, 0x1430 + 3 }	// Child[309]: r_hip_helperBend_pose_01, Parent[119]: r_hip_helperBend
	};

	OrbisAnim_Parenting(7, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

static void HierarchyConstantCommand_Seg5Cmd0(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Const", OrbisAnim::Perf::kBlue);
	*(vec_float4*)(locJointParams + 0x0A80) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0AA0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0AB0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0AD0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0AE0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0B00) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0B10) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0B30) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0B40) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0B60) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0B70) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0B90) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0BA0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0BC0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0BD0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0BF0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0C00) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0C20) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0C30) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0C50) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0C60) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0C80) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0C90) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0CB0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0CC0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0CE0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0CF0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0D10) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0D20) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0D40) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0D50) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0D70) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0D80) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0DA0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0DB0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locJointParams + 0x0DD0) = sce_vectormath_hexfloat4i(0, 0, 0, 0x3f800000);	// (0.000000f, 0.000000f, 0.000000f, 1.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3220) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3230) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3240) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3250) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3260) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3270) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3280) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3290) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x32A0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x32B0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x32C0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x32D0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x32E0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x32F0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3300) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3310) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3320) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3330) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3340) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3350) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3360) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3370) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3380) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3390) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x33A0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x33B0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x33C0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x33D0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x33E0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x33F0) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3400) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3410) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3420) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3430) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3440) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3450) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3460) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3470) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3480) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(vec_float4*)(locSdkScalarTable + 0x3490) = sce_vectormath_hexfloat4i(0, 0, 0, 0);	// (0.000000f, 0.000000f, 0.000000f, 0.000000f)
	*(uint32_t*)(locSdkScalarTable + 0x3218) = 0;
	*(uint32_t*)(locSdkScalarTable + 0x321C) = 0;
	*(uint32_t*)(locSdkScalarTable + 0x321C) = 0;
	*(uint32_t*)(locSdkScalarTable + 0x321C) = 0;
}

// spine_c_helper_angleDriver_pitch_head_helper_pose_01Mat1D
static void NdiInterpolateMatrix1DCommand_Seg5Cmd1(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::InterpolateMatrix1DParams params{
		0x11BF64,
		179,
	};

	static CONST_EXPR OrbisAnim::CommandBlock::InterpolateMatrix1DParams::Entry s_entries[] = {
		{ 1, 0, 0, 0, 2, 0, OrbisAnim::Location(0x16A3), OrbisAnim::Location(0x0042) },
		{ 1, 0, 0, 0, 4, 2, OrbisAnim::Location(0x16BB), OrbisAnim::Location(0x0082) },
		{ 1, 0, 0, 0, 2, 6, OrbisAnim::Location(0x16C3), OrbisAnim::Location(0x00C2) },
		{ 1, 0, 0, 0, 4, 8, OrbisAnim::Location(0x1607), OrbisAnim::Location(0x0102) },
		{ 1, 0, 0, 0, 3, 12, OrbisAnim::Location(0x160F), OrbisAnim::Location(0x0142) },
		{ 1, 0, 0, 0, 3, 15, OrbisAnim::Location(0x160B), OrbisAnim::Location(0x0182) },
		{ 1, 0, 0, 0, 5, 18, OrbisAnim::Location(0x1613), OrbisAnim::Location(0x01C2) },
		{ 1, 0, 0, 0, 3, 23, OrbisAnim::Location(0x161B), OrbisAnim::Location(0x0202) },
		{ 1, 0, 0, 0, 3, 26, OrbisAnim::Location(0x1617), OrbisAnim::Location(0x0242) },
		{ 1, 0, 0, 0, 5, 29, OrbisAnim::Location(0x161F), OrbisAnim::Location(0x0282) },
		{ 1, 0, 0, 0, 3, 34, OrbisAnim::Location(0x1627), OrbisAnim::Location(0x02C2) },
		{ 1, 0, 0, 0, 3, 37, OrbisAnim::Location(0x1623), OrbisAnim::Location(0x0302) },
		{ 1, 0, 0, 0, 5, 40, OrbisAnim::Location(0x159B), OrbisAnim::Location(0x0342) },
		{ 1, 0, 0, 0, 3, 45, OrbisAnim::Location(0x15A3), OrbisAnim::Location(0x0382) },
		{ 1, 0, 0, 0, 3, 48, OrbisAnim::Location(0x159F), OrbisAnim::Location(0x03C2) },
		{ 1, 0, 0, 0, 2, 51, OrbisAnim::Location(0x15D3), OrbisAnim::Location(0x0402) },
		{ 1, 0, 0, 0, 2, 53, OrbisAnim::Location(0x1663), OrbisAnim::Location(0x0442) },
		{ 1, 0, 0, 0, 4, 55, OrbisAnim::Location(0x16BB), OrbisAnim::Location(0x04C2) },
		{ 1, 0, 0, 0, 5, 59, OrbisAnim::Location(0x1607), OrbisAnim::Location(0x0502) },
		{ 1, 0, 0, 0, 3, 64, OrbisAnim::Location(0x160B), OrbisAnim::Location(0x0542) },
		{ 1, 0, 0, 0, 5, 67, OrbisAnim::Location(0x1613), OrbisAnim::Location(0x0582) },
		{ 1, 0, 0, 0, 3, 72, OrbisAnim::Location(0x161B), OrbisAnim::Location(0x05C2) },
		{ 1, 0, 0, 0, 2, 75, OrbisAnim::Location(0x1617), OrbisAnim::Location(0x0602) },
		{ 1, 0, 0, 0, 5, 77, OrbisAnim::Location(0x161F), OrbisAnim::Location(0x0642) },
		{ 1, 0, 0, 0, 3, 82, OrbisAnim::Location(0x1627), OrbisAnim::Location(0x0682) },
		{ 1, 0, 0, 0, 3, 85, OrbisAnim::Location(0x1623), OrbisAnim::Location(0x06C2) },
		{ 1, 0, 0, 0, 5, 88, OrbisAnim::Location(0x159B), OrbisAnim::Location(0x0702) },
		{ 1, 0, 0, 0, 3, 93, OrbisAnim::Location(0x15A3), OrbisAnim::Location(0x0742) },
		{ 1, 0, 0, 0, 3, 96, OrbisAnim::Location(0x159F), OrbisAnim::Location(0x0782) },
		{ 1, 0, 0, 0, 2, 99, OrbisAnim::Location(0x15D3), OrbisAnim::Location(0x07C2) },
		{ 1, 0, 0, 0, 2, 101, OrbisAnim::Location(0x1663), OrbisAnim::Location(0x0802) },
		{ 1, 0, 0, 0, 2, 103, OrbisAnim::Location(0x15FB), OrbisAnim::Location(0x0882) },
		{ 1, 0, 0, 0, 5, 105, OrbisAnim::Location(0x15BF), OrbisAnim::Location(0x08C2) },
		{ 1, 0, 0, 0, 3, 110, OrbisAnim::Location(0x15C3), OrbisAnim::Location(0x0902) },
		{ 1, 0, 0, 0, 3, 113, OrbisAnim::Location(0x1573), OrbisAnim::Location(0x0942) },
		{ 1, 0, 0, 0, 5, 116, OrbisAnim::Location(0x15B3), OrbisAnim::Location(0x0982) },
		{ 1, 0, 0, 0, 3, 121, OrbisAnim::Location(0x15BB), OrbisAnim::Location(0x09C2) },
		{ 1, 0, 0, 0, 3, 124, OrbisAnim::Location(0x15B7), OrbisAnim::Location(0x0A02) },
		{ 1, 0, 0, 0, 4, 127, OrbisAnim::Location(0x15FB), OrbisAnim::Location(0x0A82) },
		{ 1, 0, 0, 0, 3, 131, OrbisAnim::Location(0x15C3), OrbisAnim::Location(0x0AC2) },
		{ 1, 0, 0, 0, 3, 134, OrbisAnim::Location(0x1573), OrbisAnim::Location(0x0B02) },
		{ 1, 0, 0, 0, 3, 137, OrbisAnim::Location(0x15D3), OrbisAnim::Location(0x0B82) },
		{ 1, 0, 0, 0, 3, 140, OrbisAnim::Location(0x15DB), OrbisAnim::Location(0x0BC2) },
		{ 1, 0, 0, 0, 2, 143, OrbisAnim::Location(0x15DF), OrbisAnim::Location(0x0C02) },
		{ 1, 0, 0, 0, 3, 145, OrbisAnim::Location(0x1577), OrbisAnim::Location(0x0C42) },
		{ 1, 0, 0, 0, 4, 148, OrbisAnim::Location(0x15AF), OrbisAnim::Location(0x0C82) },
		{ 1, 0, 0, 0, 2, 152, OrbisAnim::Location(0x16B3), OrbisAnim::Location(0x0D02) },
		{ 1, 0, 0, 0, 3, 154, OrbisAnim::Location(0x16BB), OrbisAnim::Location(0x0D42) },
		{ 1, 0, 0, 0, 3, 157, OrbisAnim::Location(0x16C3), OrbisAnim::Location(0x0D82) },
		{ 1, 0, 0, 0, 3, 160, OrbisAnim::Location(0x16BF), OrbisAnim::Location(0x0DC2) },
		{ 1, 0, 0, 0, 4, 163, OrbisAnim::Location(0x1607), OrbisAnim::Location(0x0E02) },
		{ 1, 0, 0, 0, 2, 167, OrbisAnim::Location(0x160F), OrbisAnim::Location(0x0E42) },
		{ 1, 0, 0, 0, 2, 169, OrbisAnim::Location(0x160B), OrbisAnim::Location(0x0E82) },
		{ 1, 0, 0, 0, 3, 171, OrbisAnim::Location(0x161B), OrbisAnim::Location(0x0EC2) },
		{ 1, 0, 0, 0, 3, 174, OrbisAnim::Location(0x15D3), OrbisAnim::Location(0x0F02) },
		{ 1, 0, 0, 0, 2, 177, OrbisAnim::Location(0x15D7), OrbisAnim::Location(0x0F42) },
		{ 1, 0, 0, 0, 3, 179, OrbisAnim::Location(0x157B), OrbisAnim::Location(0x0F82) },
		{ 1, 0, 0, 0, 3, 182, OrbisAnim::Location(0x15DB), OrbisAnim::Location(0x0FC2) },
		{ 1, 0, 0, 0, 2, 185, OrbisAnim::Location(0x15DF), OrbisAnim::Location(0x1002) },
		{ 1, 0, 0, 0, 4, 187, OrbisAnim::Location(0x168B), OrbisAnim::Location(0x1082) },
		{ 1, 0, 0, 0, 3, 191, OrbisAnim::Location(0x1653), OrbisAnim::Location(0x10C2) },
		{ 1, 0, 0, 0, 3, 194, OrbisAnim::Location(0x157F), OrbisAnim::Location(0x1102) },
		{ 1, 0, 0, 0, 2, 197, OrbisAnim::Location(0x168B), OrbisAnim::Location(0x1182) },
		{ 1, 0, 0, 0, 5, 199, OrbisAnim::Location(0x164F), OrbisAnim::Location(0x11C2) },
		{ 1, 0, 0, 0, 3, 204, OrbisAnim::Location(0x1653), OrbisAnim::Location(0x1202) },
		{ 1, 0, 0, 0, 3, 207, OrbisAnim::Location(0x157F), OrbisAnim::Location(0x1242) },
		{ 1, 0, 0, 0, 5, 210, OrbisAnim::Location(0x1643), OrbisAnim::Location(0x1282) },
		{ 1, 0, 0, 0, 3, 215, OrbisAnim::Location(0x164B), OrbisAnim::Location(0x12C2) },
		{ 1, 0, 0, 0, 3, 218, OrbisAnim::Location(0x1647), OrbisAnim::Location(0x1302) },
		{ 1, 0, 0, 0, 3, 221, OrbisAnim::Location(0x1663), OrbisAnim::Location(0x1382) },
		{ 1, 0, 0, 0, 3, 224, OrbisAnim::Location(0x166B), OrbisAnim::Location(0x13C2) },
		{ 1, 0, 0, 0, 2, 227, OrbisAnim::Location(0x166F), OrbisAnim::Location(0x1402) },
		{ 1, 0, 0, 0, 3, 229, OrbisAnim::Location(0x1583), OrbisAnim::Location(0x1442) },
		{ 1, 0, 0, 0, 4, 232, OrbisAnim::Location(0x163F), OrbisAnim::Location(0x1482) },
		{ 1, 0, 0, 0, 2, 236, OrbisAnim::Location(0x16BB), OrbisAnim::Location(0x1502) },
		{ 1, 0, 0, 0, 3, 238, OrbisAnim::Location(0x16C3), OrbisAnim::Location(0x1542) },
		{ 1, 0, 0, 0, 3, 241, OrbisAnim::Location(0x16BF), OrbisAnim::Location(0x1582) },
		{ 1, 0, 0, 0, 4, 244, OrbisAnim::Location(0x1607), OrbisAnim::Location(0x15C2) },
		{ 1, 0, 0, 0, 2, 248, OrbisAnim::Location(0x160F), OrbisAnim::Location(0x1602) },
		{ 1, 0, 0, 0, 2, 250, OrbisAnim::Location(0x161B), OrbisAnim::Location(0x1642) },
		{ 1, 0, 0, 0, 2, 252, OrbisAnim::Location(0x1617), OrbisAnim::Location(0x1682) },
		{ 1, 0, 0, 0, 2, 254, OrbisAnim::Location(0x15D3), OrbisAnim::Location(0x16C2) },
		{ 1, 0, 0, 0, 3, 256, OrbisAnim::Location(0x1663), OrbisAnim::Location(0x1702) },
		{ 1, 0, 0, 0, 2, 259, OrbisAnim::Location(0x1667), OrbisAnim::Location(0x1742) },
		{ 1, 0, 0, 0, 3, 261, OrbisAnim::Location(0x1587), OrbisAnim::Location(0x1782) },
		{ 1, 0, 0, 0, 3, 264, OrbisAnim::Location(0x166B), OrbisAnim::Location(0x17C2) },
		{ 1, 0, 0, 0, 2, 267, OrbisAnim::Location(0x166F), OrbisAnim::Location(0x1802) },
		{ 1, 0, 0, 0, 2, 269, OrbisAnim::Location(0x16AB), OrbisAnim::Location(0x1882) },
		{ 1, 0, 0, 0, 2, 271, OrbisAnim::Location(0x16AF), OrbisAnim::Location(0x18C2) },
		{ 1, 0, 0, 0, 2, 273, OrbisAnim::Location(0x16B3), OrbisAnim::Location(0x1902) },
		{ 1, 0, 0, 0, 4, 275, OrbisAnim::Location(0x16BB), OrbisAnim::Location(0x1942) },
		{ 1, 0, 0, 0, 3, 279, OrbisAnim::Location(0x16C3), OrbisAnim::Location(0x1982) },
		{ 1, 0, 0, 0, 3, 282, OrbisAnim::Location(0x16BF), OrbisAnim::Location(0x19C2) },
		{ 1, 0, 0, 0, 5, 285, OrbisAnim::Location(0x1607), OrbisAnim::Location(0x1A02) },
		{ 1, 0, 0, 0, 3, 290, OrbisAnim::Location(0x160F), OrbisAnim::Location(0x1A42) },
		{ 1, 0, 0, 0, 3, 293, OrbisAnim::Location(0x160B), OrbisAnim::Location(0x1A82) },
		{ 1, 0, 0, 0, 5, 296, OrbisAnim::Location(0x1613), OrbisAnim::Location(0x1AC2) },
		{ 1, 0, 0, 0, 3, 301, OrbisAnim::Location(0x161B), OrbisAnim::Location(0x1B02) },
		{ 1, 0, 0, 0, 3, 304, OrbisAnim::Location(0x1617), OrbisAnim::Location(0x1B42) },
		{ 1, 0, 0, 0, 3, 307, OrbisAnim::Location(0x161F), OrbisAnim::Location(0x1B82) },
		{ 1, 0, 0, 0, 3, 310, OrbisAnim::Location(0x1623), OrbisAnim::Location(0x1BC2) },
		{ 1, 0, 0, 0, 4, 313, OrbisAnim::Location(0x159B), OrbisAnim::Location(0x1C02) },
		{ 1, 0, 0, 0, 2, 317, OrbisAnim::Location(0x15A3), OrbisAnim::Location(0x1C42) },
		{ 1, 0, 0, 0, 3, 319, OrbisAnim::Location(0x159F), OrbisAnim::Location(0x1C82) },
		{ 1, 0, 0, 0, 3, 322, OrbisAnim::Location(0x15D3), OrbisAnim::Location(0x1CC2) },
		{ 1, 0, 0, 0, 2, 325, OrbisAnim::Location(0x15D7), OrbisAnim::Location(0x1D02) },
		{ 1, 0, 0, 0, 3, 327, OrbisAnim::Location(0x15DB), OrbisAnim::Location(0x1D42) },
		{ 1, 0, 0, 0, 2, 330, OrbisAnim::Location(0x15DF), OrbisAnim::Location(0x1D82) },
		{ 1, 0, 0, 0, 2, 332, OrbisAnim::Location(0x1663), OrbisAnim::Location(0x1DC2) },
		{ 1, 0, 0, 0, 2, 334, OrbisAnim::Location(0x1667), OrbisAnim::Location(0x1E02) },
		{ 1, 0, 0, 0, 3, 336, OrbisAnim::Location(0x166B), OrbisAnim::Location(0x1E42) },
		{ 1, 0, 0, 0, 2, 339, OrbisAnim::Location(0x16A3), OrbisAnim::Location(0x1EC2) },
		{ 1, 0, 0, 0, 3, 341, OrbisAnim::Location(0x16AB), OrbisAnim::Location(0x1F02) },
		{ 1, 0, 0, 0, 2, 344, OrbisAnim::Location(0x16AF), OrbisAnim::Location(0x1F42) },
		{ 1, 0, 0, 0, 4, 346, OrbisAnim::Location(0x16BB), OrbisAnim::Location(0x1F82) },
		{ 1, 0, 0, 0, 3, 350, OrbisAnim::Location(0x16C3), OrbisAnim::Location(0x1FC2) },
		{ 1, 0, 0, 0, 3, 353, OrbisAnim::Location(0x16BF), OrbisAnim::Location(0x2002) },
		{ 1, 0, 0, 0, 5, 356, OrbisAnim::Location(0x1607), OrbisAnim::Location(0x2042) },
		{ 1, 0, 0, 0, 3, 361, OrbisAnim::Location(0x160F), OrbisAnim::Location(0x2082) },
		{ 1, 0, 0, 0, 3, 364, OrbisAnim::Location(0x160B), OrbisAnim::Location(0x20C2) },
		{ 1, 0, 0, 0, 5, 367, OrbisAnim::Location(0x1613), OrbisAnim::Location(0x2102) },
		{ 1, 0, 0, 0, 3, 372, OrbisAnim::Location(0x161B), OrbisAnim::Location(0x2142) },
		{ 1, 0, 0, 0, 3, 375, OrbisAnim::Location(0x1617), OrbisAnim::Location(0x2182) },
		{ 1, 0, 0, 0, 3, 378, OrbisAnim::Location(0x161F), OrbisAnim::Location(0x21C2) },
		{ 1, 0, 0, 0, 2, 381, OrbisAnim::Location(0x1627), OrbisAnim::Location(0x2202) },
		{ 1, 0, 0, 0, 2, 383, OrbisAnim::Location(0x1623), OrbisAnim::Location(0x2242) },
		{ 1, 0, 0, 0, 5, 385, OrbisAnim::Location(0x159B), OrbisAnim::Location(0x2282) },
		{ 1, 0, 0, 0, 3, 390, OrbisAnim::Location(0x15A3), OrbisAnim::Location(0x22C2) },
		{ 1, 0, 0, 0, 3, 393, OrbisAnim::Location(0x159F), OrbisAnim::Location(0x2302) },
		{ 1, 0, 0, 0, 2, 396, OrbisAnim::Location(0x15D3), OrbisAnim::Location(0x2342) },
		{ 1, 0, 0, 0, 3, 398, OrbisAnim::Location(0x1663), OrbisAnim::Location(0x2382) },
		{ 1, 0, 0, 0, 2, 401, OrbisAnim::Location(0x1667), OrbisAnim::Location(0x23C2) },
		{ 1, 0, 0, 0, 3, 403, OrbisAnim::Location(0x166B), OrbisAnim::Location(0x2402) },
		{ 1, 0, 0, 0, 2, 406, OrbisAnim::Location(0x166F), OrbisAnim::Location(0x2442) },
		{ 1, 0, 0, 0, 4, 408, OrbisAnim::Location(0x15EF), OrbisAnim::Location(0x24C2) },
		{ 1, 0, 0, 0, 2, 412, OrbisAnim::Location(0x15F7), OrbisAnim::Location(0x2502) },
		{ 1, 0, 0, 0, 2, 414, OrbisAnim::Location(0x15F3), OrbisAnim::Location(0x2542) },
		{ 1, 0, 0, 0, 5, 416, OrbisAnim::Location(0x15A7), OrbisAnim::Location(0x2582) },
		{ 1, 0, 0, 0, 3, 421, OrbisAnim::Location(0x15AB), OrbisAnim::Location(0x25C2) },
		{ 1, 0, 0, 0, 3, 424, OrbisAnim::Location(0x158B), OrbisAnim::Location(0x2602) },
		{ 1, 0, 0, 0, 3, 427, OrbisAnim::Location(0x15EB), OrbisAnim::Location(0x2642) },
		{ 1, 0, 0, 0, 3, 430, OrbisAnim::Location(0x15E7), OrbisAnim::Location(0x2682) },
		{ 1, 0, 0, 0, 2, 433, OrbisAnim::Location(0x15C7), OrbisAnim::Location(0x2702) },
		{ 1, 0, 0, 0, 4, 435, OrbisAnim::Location(0x15CF), OrbisAnim::Location(0x2742) },
		{ 1, 0, 0, 0, 5, 439, OrbisAnim::Location(0x15EF), OrbisAnim::Location(0x2782) },
		{ 1, 0, 0, 0, 3, 444, OrbisAnim::Location(0x15F7), OrbisAnim::Location(0x27C2) },
		{ 1, 0, 0, 0, 3, 447, OrbisAnim::Location(0x15F3), OrbisAnim::Location(0x2802) },
		{ 1, 0, 0, 0, 5, 450, OrbisAnim::Location(0x15A7), OrbisAnim::Location(0x2842) },
		{ 1, 0, 0, 0, 3, 455, OrbisAnim::Location(0x15AB), OrbisAnim::Location(0x2882) },
		{ 1, 0, 0, 0, 3, 458, OrbisAnim::Location(0x158B), OrbisAnim::Location(0x28C2) },
		{ 1, 0, 0, 0, 2, 461, OrbisAnim::Location(0x15E3), OrbisAnim::Location(0x2902) },
		{ 1, 0, 0, 0, 3, 463, OrbisAnim::Location(0x15EB), OrbisAnim::Location(0x2942) },
		{ 1, 0, 0, 0, 3, 466, OrbisAnim::Location(0x15E7), OrbisAnim::Location(0x2982) },
		{ 1, 0, 0, 0, 3, 469, OrbisAnim::Location(0x15C7), OrbisAnim::Location(0x2A02) },
		{ 1, 0, 0, 0, 2, 472, OrbisAnim::Location(0x15CB), OrbisAnim::Location(0x2A42) },
		{ 1, 0, 0, 0, 3, 474, OrbisAnim::Location(0x1593), OrbisAnim::Location(0x2A82) },
		{ 1, 0, 0, 0, 4, 477, OrbisAnim::Location(0x15CF), OrbisAnim::Location(0x2AC2) },
		{ 1, 0, 0, 0, 4, 481, OrbisAnim::Location(0x167F), OrbisAnim::Location(0x2B42) },
		{ 1, 0, 0, 0, 2, 485, OrbisAnim::Location(0x1687), OrbisAnim::Location(0x2B82) },
		{ 1, 0, 0, 0, 5, 487, OrbisAnim::Location(0x1637), OrbisAnim::Location(0x2BC2) },
		{ 1, 0, 0, 0, 3, 492, OrbisAnim::Location(0x163B), OrbisAnim::Location(0x2C02) },
		{ 1, 0, 0, 0, 3, 495, OrbisAnim::Location(0x158F), OrbisAnim::Location(0x2C42) },
		{ 1, 0, 0, 0, 3, 498, OrbisAnim::Location(0x167B), OrbisAnim::Location(0x2C82) },
		{ 1, 0, 0, 0, 3, 501, OrbisAnim::Location(0x1677), OrbisAnim::Location(0x2CC2) },
		{ 1, 0, 0, 0, 4, 504, OrbisAnim::Location(0x165F), OrbisAnim::Location(0x2D42) },
		{ 1, 0, 0, 0, 5, 508, OrbisAnim::Location(0x167F), OrbisAnim::Location(0x2D82) },
		{ 1, 0, 0, 0, 3, 513, OrbisAnim::Location(0x1687), OrbisAnim::Location(0x2DC2) },
		{ 1, 0, 0, 0, 3, 516, OrbisAnim::Location(0x1683), OrbisAnim::Location(0x2E02) },
		{ 1, 0, 0, 0, 5, 519, OrbisAnim::Location(0x1637), OrbisAnim::Location(0x2E42) },
		{ 1, 0, 0, 0, 3, 524, OrbisAnim::Location(0x163B), OrbisAnim::Location(0x2E82) },
		{ 1, 0, 0, 0, 3, 527, OrbisAnim::Location(0x158F), OrbisAnim::Location(0x2EC2) },
		{ 1, 0, 0, 0, 2, 530, OrbisAnim::Location(0x1673), OrbisAnim::Location(0x2F02) },
		{ 1, 0, 0, 0, 3, 532, OrbisAnim::Location(0x167B), OrbisAnim::Location(0x2F42) },
		{ 1, 0, 0, 0, 3, 535, OrbisAnim::Location(0x1677), OrbisAnim::Location(0x2F82) },
		{ 1, 0, 0, 0, 2, 538, OrbisAnim::Location(0x1633), OrbisAnim::Location(0x3002) },
		{ 1, 0, 0, 0, 3, 540, OrbisAnim::Location(0x1657), OrbisAnim::Location(0x3042) },
		{ 1, 0, 0, 0, 2, 543, OrbisAnim::Location(0x165B), OrbisAnim::Location(0x3082) },
		{ 1, 0, 0, 0, 3, 545, OrbisAnim::Location(0x1597), OrbisAnim::Location(0x30C2) },
		{ 1, 0, 0, 0, 4, 548, OrbisAnim::Location(0x165F), OrbisAnim::Location(0x3102) },
	};

	static CONST_EXPR OrbisAnim::CommandBlock::InterpolateMatrix1DState s_stateData[] = {
		{ -70.000000f, { 0.999879f, -0.001428f, -0.015490f, 0.000000f, 0.002225f, 0.998668f, 0.051554f, 0.000000f, 0.015396f, -0.051583f, 0.998550f, 0.000000f, -0.000164f, 0.000599f, 0.000153f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.996334f, 0.034566f, 0.078258f, 0.000000f, -0.027412f, 0.995499f, -0.090719f, 0.000000f, -0.081042f, 0.088241f, 0.992797f, 0.000000f, -0.000068f, -0.005623f, 0.000074f, 1.000000f } },
		{ -35.000000f, { 0.998601f, 0.007748f, 0.052300f, 0.000000f, -0.004689f, 0.998285f, -0.058353f, 0.000000f, -0.052662f, 0.058026f, 0.996925f, 0.000000f, 0.000686f, -0.002841f, 0.000790f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999045f, 0.008745f, -0.042812f, 0.000000f, -0.006114f, 0.998106f, 0.061212f, 0.000000f, 0.043266f, -0.060892f, 0.997206f, 0.000000f, -0.001155f, 0.001683f, -0.002392f, 1.000000f } },
		{ -50.000000f, { 0.998032f, 0.057021f, -0.026098f, 0.000000f, -0.057944f, 0.997667f, -0.036106f, 0.000000f, 0.023978f, 0.037548f, 0.999007f, 0.000000f, 0.001985f, -0.001546f, -0.003451f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.985908f, -0.111866f, 0.124381f, 0.000000f, -0.011354f, 0.697061f, 0.716922f, 0.000000f, -0.166901f, -0.708231f, 0.685968f, 0.000000f, 0.000414f, -0.019362f, 0.006549f, 1.000000f } },
		{ -35.000000f, { 0.998105f, 0.010471f, 0.060641f, 0.000000f, -0.004400f, 0.995039f, -0.099387f, 0.000000f, -0.061381f, 0.098932f, 0.993199f, 0.000000f, 0.003398f, -0.009687f, -0.002715f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.852151f, 0.294191f, -0.432770f, 0.000000f, -0.508104f, 0.662986f, -0.549800f, 0.000000f, 0.125174f, 0.688405f, 0.714444f, 0.000000f, 0.018839f, 0.016243f, 0.024402f, 1.000000f } },
		{ -50.000000f, { 0.993294f, -0.044598f, -0.106668f, 0.000000f, 0.035161f, 0.995431f, -0.088774f, 0.000000f, 0.110140f, 0.084428f, 0.990324f, 0.000000f, 0.003298f, -0.005376f, -0.004631f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.998084f, 0.055262f, 0.027841f, 0.000000f, -0.054196f, 0.997818f, -0.037698f, 0.000000f, -0.029863f, 0.036116f, 0.998901f, 0.000000f, -0.014074f, -0.000834f, 0.000413f, 1.000000f } },
		{ -70.000000f, { 0.977002f, 0.204241f, -0.061254f, 0.000000f, -0.203725f, 0.978919f, 0.014629f, 0.000000f, 0.062950f, -0.001814f, 0.998015f, 0.000000f, -0.003016f, 0.005339f, -0.007326f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.973582f, -0.105689f, 0.202406f, 0.000000f, 0.116646f, 0.992244f, -0.042958f, 0.000000f, -0.196296f, 0.065433f, 0.978359f, 0.000000f, -0.006377f, -0.005420f, -0.001019f, 1.000000f } },
		{ -70.000000f, { 0.998448f, -0.035711f, 0.042733f, 0.000000f, 0.027886f, 0.984801f, 0.171435f, 0.000000f, -0.048205f, -0.169977f, 0.984268f, 0.000000f, 0.001287f, -0.011516f, -0.005779f, 1.000000f } },
		{ -35.000000f, { 0.999575f, -0.004826f, 0.028759f, 0.000000f, 0.003166f, 0.998342f, 0.057471f, 0.000000f, -0.028988f, -0.057355f, 0.997933f, 0.000000f, 0.000932f, -0.007188f, -0.000511f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.997251f, 0.018488f, -0.071760f, 0.000000f, -0.026040f, 0.994049f, -0.105778f, 0.000000f, 0.069377f, 0.107356f, 0.991797f, 0.000000f, -0.001117f, 0.006252f, -0.005802f, 1.000000f } },
		{ 70.000000f, { 0.995638f, -0.092760f, 0.010034f, 0.000000f, 0.093032f, 0.978854f, -0.182181f, 0.000000f, 0.007077f, 0.182320f, 0.983214f, 0.000000f, -0.002857f, 0.005268f, -0.013109f, 1.000000f } },
		{ -50.000000f, { 0.994453f, -0.104791f, -0.009045f, 0.000000f, 0.104660f, 0.994410f, -0.013944f, 0.000000f, 0.010455f, 0.012920f, 0.999862f, 0.000000f, 0.008431f, -0.009163f, -0.004894f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.974297f, 0.059661f, 0.217221f, 0.000000f, -0.057666f, 0.998215f, -0.015518f, 0.000000f, -0.217760f, 0.002593f, 0.975999f, 0.000000f, -0.008888f, -0.001663f, 0.009919f, 1.000000f } },
		{ -70.000000f, { 0.996630f, 0.015480f, -0.080557f, 0.000000f, -0.012249f, 0.999107f, 0.040447f, 0.000000f, 0.081111f, -0.039324f, 0.995929f, 0.000000f, 0.003165f, 0.005409f, -0.012804f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.985710f, -0.086115f, 0.144777f, 0.000000f, 0.086161f, 0.996263f, 0.005964f, 0.000000f, -0.144749f, 0.006595f, 0.989446f, 0.000000f, -0.014667f, -0.000880f, 0.000695f, 1.000000f } },
		{ -70.000000f, { 0.996862f, -0.058568f, 0.053257f, 0.000000f, 0.037777f, 0.943181f, 0.330124f, 0.000000f, -0.069565f, -0.327076f, 0.942434f, 0.000000f, 0.001694f, -0.014736f, -0.020814f, 1.000000f } },
		{ -35.000000f, { 0.999486f, -0.006016f, 0.031486f, 0.000000f, 0.000201f, 0.983388f, 0.181518f, 0.000000f, -0.032055f, -0.181418f, 0.982883f, 0.000000f, 0.000979f, -0.010696f, -0.007165f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.986935f, -0.049376f, 0.153368f, 0.000000f, 0.078939f, 0.977995f, -0.193119f, 0.000000f, -0.140457f, 0.202702f, 0.969115f, 0.000000f, 0.012904f, 0.005648f, 0.015107f, 1.000000f } },
		{ 70.000000f, { 0.928540f, -0.240957f, 0.282406f, 0.000000f, 0.276700f, 0.956370f, -0.093775f, 0.000000f, -0.247489f, 0.165215f, 0.954700f, 0.000000f, 0.030238f, 0.018516f, 0.011079f, 1.000000f } },
		{ -50.000000f, { 0.952291f, -0.265159f, -0.151107f, 0.000000f, 0.275500f, 0.959904f, 0.051814f, 0.000000f, 0.131309f, -0.090972f, 0.987159f, 0.000000f, -0.001134f, -0.009584f, -0.005400f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.964715f, 0.196597f, 0.175140f, 0.000000f, -0.195149f, 0.980439f, -0.025629f, 0.000000f, -0.176753f, -0.009454f, 0.984210f, 0.000000f, -0.009364f, 0.008132f, 0.004647f, 1.000000f } },
		{ -70.000000f, { 0.964805f, 0.153385f, -0.213599f, 0.000000f, -0.155929f, 0.987756f, 0.004991f, 0.000000f, 0.211749f, 0.028491f, 0.976909f, 0.000000f, 0.011733f, 0.014485f, -0.028814f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.929331f, -0.209318f, 0.304188f, 0.000000f, 0.203617f, 0.977736f, 0.050727f, 0.000000f, -0.308034f, 0.014796f, 0.951260f, 0.000000f, -0.033393f, 0.001872f, -0.004189f, 1.000000f } },
		{ -70.000000f, { 0.994937f, 0.029331f, 0.096123f, 0.000000f, -0.094899f, 0.589008f, 0.802536f, 0.000000f, -0.033078f, -0.807595f, 0.588809f, 0.000000f, -0.010532f, 0.027149f, -0.045464f, 1.000000f } },
		{ -35.000000f, { 0.998715f, 0.027064f, -0.042847f, 0.000000f, -0.008776f, 0.925049f, 0.379745f, 0.000000f, 0.049913f, -0.378881f, 0.924098f, 0.000000f, -0.001776f, 0.004126f, -0.029308f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 25.000000f, { 0.957379f, 0.097745f, -0.271794f, 0.000000f, -0.019937f, 0.961118f, 0.275418f, 0.000000f, 0.288147f, -0.258261f, 0.922102f, 0.000000f, 0.016674f, -0.017957f, 0.032082f, 1.000000f } },
		{ 50.000000f, { 0.880181f, 0.099397f, -0.464113f, 0.000000f, 0.015807f, 0.971145f, 0.237964f, 0.000000f, 0.474374f, -0.216787f, 0.853213f, 0.000000f, 0.025145f, -0.004243f, 0.053363f, 1.000000f } },
		{ -50.000000f, { 0.935345f, 0.017297f, -0.353313f, 0.000000f, 0.008821f, 0.997353f, 0.072180f, 0.000000f, 0.353626f, -0.070630f, 0.932717f, 0.000000f, 0.004088f, -0.003942f, -0.017298f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.941493f, -0.055149f, 0.332490f, 0.000000f, 0.041314f, 0.997966f, 0.048542f, 0.000000f, -0.334491f, -0.031965f, 0.941857f, 0.000000f, -0.018240f, 0.001417f, 0.010276f, 1.000000f } },
		{ -70.000000f, { 0.517240f, 0.799094f, 0.306450f, 0.000000f, -0.853369f, 0.508739f, 0.113775f, 0.000000f, -0.064987f, -0.320364f, 0.945063f, 0.000000f, 0.006010f, 0.042992f, 0.006975f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.541360f, -0.828539f, -0.143012f, 0.000000f, 0.828516f, 0.554642f, -0.077034f, 0.000000f, 0.143146f, -0.076785f, 0.986718f, 0.000000f, -0.047695f, -0.000021f, -0.007660f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.999327f, 0.032304f, 0.017363f, 0.000000f, -0.030953f, 0.996843f, -0.073113f, 0.000000f, -0.019670f, 0.072526f, 0.997173f, 0.000000f, 0.004192f, -0.000400f, -0.001806f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.973959f, 0.169956f, 0.150063f, 0.000000f, -0.163517f, 0.985042f, -0.054349f, 0.000000f, -0.157056f, 0.028396f, 0.987181f, 0.000000f, 0.003962f, 0.004072f, 0.005246f, 1.000000f } },
		{ -70.000000f, { 0.995724f, -0.047409f, -0.079290f, 0.000000f, 0.042049f, 0.996802f, -0.067956f, 0.000000f, 0.082258f, 0.064331f, 0.994533f, 0.000000f, -0.000898f, -0.005941f, -0.001133f, 1.000000f } },
		{ -35.000000f, { 0.998199f, -0.041160f, -0.043636f, 0.000000f, 0.038751f, 0.997751f, -0.054687f, 0.000000f, 0.045789f, 0.052897f, 0.997550f, 0.000000f, -0.000087f, -0.002967f, 0.000463f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.997724f, 0.050666f, 0.044488f, 0.000000f, -0.052916f, 0.997298f, 0.050951f, 0.000000f, -0.041786f, -0.053190f, 0.997710f, 0.000000f, -0.000568f, 0.001613f, -0.002108f, 1.000000f } },
		{ -70.000000f, { 0.984431f, 0.164264f, 0.062550f, 0.000000f, -0.173246f, 0.966870f, 0.187478f, 0.000000f, -0.029682f, -0.195396f, 0.980275f, 0.000000f, -0.003087f, -0.016298f, -0.002502f, 1.000000f } },
		{ -35.000000f, { 0.995505f, -0.084587f, -0.042599f, 0.000000f, 0.083726f, 0.996255f, -0.021602f, 0.000000f, 0.044266f, 0.017938f, 0.998859f, 0.000000f, 0.002851f, -0.005835f, -0.001077f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.993785f, 0.109444f, -0.020334f, 0.000000f, -0.110560f, 0.991683f, -0.065883f, 0.000000f, 0.012954f, 0.067722f, 0.997620f, 0.000000f, -0.000990f, -0.001512f, -0.004531f, 1.000000f } },
		{ 70.000000f, { 0.732786f, -0.673616f, -0.096265f, 0.000000f, 0.618954f, 0.718622f, -0.316983f, 0.000000f, 0.282703f, 0.172697f, 0.943533f, 0.000000f, -0.018213f, 0.012997f, 0.015044f, 1.000000f } },
		{ -70.000000f, { 0.978879f, 0.199371f, -0.045233f, 0.000000f, -0.199638f, 0.979869f, -0.001417f, 0.000000f, 0.044040f, 0.010417f, 0.998975f, 0.000000f, 0.006366f, -0.000854f, 0.001032f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.995725f, 0.031520f, 0.086823f, 0.000000f, -0.028540f, 0.998967f, -0.035351f, 0.000000f, -0.087848f, 0.032722f, 0.995596f, 0.000000f, 0.004982f, 0.003639f, -0.004861f, 1.000000f } },
		{ -70.000000f, { 0.999916f, 0.010606f, 0.007390f, 0.000000f, -0.011433f, 0.992374f, 0.122730f, 0.000000f, -0.006032f, -0.122804f, 0.992413f, 0.000000f, 0.001036f, -0.007405f, -0.003614f, 1.000000f } },
		{ -35.000000f, { 0.999947f, -0.009461f, -0.004091f, 0.000000f, 0.009670f, 0.998458f, 0.054657f, 0.000000f, 0.003568f, -0.054693f, 0.998497f, 0.000000f, 0.000671f, -0.004211f, -0.000037f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.997638f, -0.058759f, -0.035585f, 0.000000f, 0.049710f, 0.975043f, -0.216379f, 0.000000f, 0.047411f, 0.214099f, 0.975661f, 0.000000f, -0.002472f, 0.003987f, 0.002569f, 1.000000f } },
		{ 70.000000f, { 0.998646f, 0.018694f, -0.048547f, 0.000000f, -0.028372f, 0.977917f, -0.207061f, 0.000000f, 0.043605f, 0.208158f, 0.977123f, 0.000000f, -0.001158f, 0.002564f, -0.005256f, 1.000000f } },
		{ -50.000000f, { 0.992336f, -0.067785f, -0.103315f, 0.000000f, 0.058742f, 0.994370f, -0.088194f, 0.000000f, 0.108712f, 0.081449f, 0.990731f, 0.000000f, 0.004486f, -0.001572f, 0.001696f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.993212f, 0.065276f, -0.096276f, 0.000000f, -0.070436f, 0.996202f, -0.051199f, 0.000000f, 0.092568f, 0.057633f, 0.994037f, 0.000000f, -0.004822f, -0.007488f, 0.000231f, 1.000000f } },
		{ -70.000000f, { 0.995127f, 0.081162f, -0.055989f, 0.000000f, -0.082054f, 0.996532f, -0.013827f, 0.000000f, 0.054672f, 0.018354f, 0.998336f, 0.000000f, 0.009223f, -0.000145f, -0.000329f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.999445f, 0.002819f, -0.033198f, 0.000000f, 0.004619f, 0.975071f, 0.221845f, 0.000000f, 0.032996f, -0.221875f, 0.974517f, 0.000000f, -0.000494f, -0.011882f, -0.015577f, 1.000000f } },
		{ -35.000000f, { 0.999869f, -0.010537f, -0.012257f, 0.000000f, 0.012045f, 0.991399f, 0.130321f, 0.000000f, 0.010778f, -0.130451f, 0.991396f, 0.000000f, -0.000032f, -0.008343f, -0.005448f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999345f, 0.012703f, -0.033874f, 0.000000f, -0.018468f, 0.984265f, -0.175729f, 0.000000f, 0.031108f, 0.176239f, 0.983856f, 0.000000f, -0.013958f, 0.008039f, 0.002919f, 1.000000f } },
		{ 70.000000f, { 0.779978f, 0.120237f, -0.614147f, 0.000000f, -0.284839f, 0.942032f, -0.177320f, 0.000000f, 0.557226f, 0.313239f, 0.769013f, 0.000000f, -0.037477f, 0.016156f, 0.009219f, 1.000000f } },
		{ -50.000000f, { 0.985862f, -0.150303f, -0.074057f, 0.000000f, 0.151747f, 0.988317f, 0.014252f, 0.000000f, 0.071049f, -0.025288f, 0.997152f, 0.000000f, 0.008294f, 0.006849f, 0.003685f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.973029f, 0.185020f, 0.137777f, 0.000000f, -0.188435f, 0.982012f, 0.012060f, 0.000000f, -0.133067f, -0.037696f, 0.990390f, 0.000000f, 0.001981f, -0.008358f, -0.003582f, 1.000000f } },
		{ -70.000000f, { 0.943988f, 0.173125f, -0.280918f, 0.000000f, -0.215750f, 0.967961f, -0.128464f, 0.000000f, 0.249677f, 0.181876f, 0.951095f, 0.000000f, 0.026131f, -0.001322f, 0.000215f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.984975f, -0.066123f, 0.159538f, 0.000000f, 0.057260f, 0.996583f, 0.059529f, 0.000000f, -0.162929f, -0.049499f, 0.985395f, 0.000000f, -0.006426f, 0.009031f, -0.020746f, 1.000000f } },
		{ -70.000000f, { 0.967177f, 0.118836f, 0.224602f, 0.000000f, -0.222770f, 0.821744f, 0.524509f, 0.000000f, -0.122235f, -0.557328f, 0.821246f, 0.000000f, -0.003591f, 0.019096f, -0.029795f, 1.000000f } },
		{ -35.000000f, { 0.988392f, 0.038236f, 0.147036f, 0.000000f, -0.102755f, 0.881118f, 0.461598f, 0.000000f, -0.111906f, -0.471348f, 0.874819f, 0.000000f, -0.001170f, -0.000021f, -0.022212f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 25.000000f, { 0.886837f, -0.108441f, 0.449178f, 0.000000f, 0.085608f, 0.993803f, 0.070903f, 0.000000f, -0.454083f, -0.024426f, 0.890624f, 0.000000f, -0.017758f, -0.001464f, 0.024987f, 1.000000f } },
		{ 50.000000f, { 0.754069f, -0.043576f, 0.655349f, 0.000000f, 0.192647f, 0.968584f, -0.157264f, 0.000000f, -0.627907f, 0.244839f, 0.738774f, 0.000000f, -0.027653f, 0.022988f, 0.038088f, 1.000000f } },
		{ -50.000000f, { 0.896705f, 0.114996f, -0.427431f, 0.000000f, -0.185838f, 0.974239f, -0.127761f, 0.000000f, 0.401728f, 0.193997f, 0.894975f, 0.000000f, 0.010033f, 0.001303f, 0.001170f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.966102f, -0.048156f, 0.253631f, 0.000000f, 0.011493f, 0.989498f, 0.144092f, 0.000000f, -0.257906f, -0.136292f, 0.956509f, 0.000000f, 0.002218f, -0.000443f, -0.012360f, 1.000000f } },
		{ -70.000000f, { 0.723518f, 0.670312f, 0.164935f, 0.000000f, -0.655663f, 0.742044f, -0.139557f, 0.000000f, -0.215936f, -0.007170f, 0.976381f, 0.000000f, 0.028976f, 0.002590f, 0.003919f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.763424f, -0.639228f, -0.092580f, 0.000000f, 0.645552f, 0.750446f, 0.141755f, 0.000000f, -0.021137f, -0.167984f, 0.985563f, 0.000000f, -0.010120f, 0.028232f, -0.001715f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.984529f, -0.161517f, -0.067937f, 0.000000f, 0.152855f, 0.981219f, -0.117662f, 0.000000f, 0.085665f, 0.105457f, 0.990727f, 0.000000f, -0.001663f, -0.000354f, 0.003610f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.983900f, -0.163736f, -0.071634f, 0.000000f, 0.154363f, 0.980563f, -0.121111f, 0.000000f, 0.090072f, 0.108104f, 0.990051f, 0.000000f, -0.005152f, 0.000911f, 0.004511f, 1.000000f } },
		{ -150.000000f, { 0.999940f, -0.010317f, 0.003787f, 0.000000f, 0.010009f, 0.997218f, 0.073864f, 0.000000f, -0.004539f, -0.073821f, 0.997261f, 0.000000f, 0.000186f, 0.007048f, -0.001346f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.993035f, -0.116965f, -0.014138f, 0.000000f, 0.062106f, 0.621660f, -0.780821f, 0.000000f, 0.100117f, 0.774505f, 0.624595f, 0.000000f, -0.007211f, -0.028514f, 0.043621f, 1.000000f } },
		{ -35.000000f, { 0.998245f, -0.053115f, -0.026196f, 0.000000f, 0.036685f, 0.901816f, -0.430559f, 0.000000f, 0.046493f, 0.428842f, 0.902182f, 0.000000f, -0.003703f, -0.019336f, 0.019057f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.998302f, 0.024993f, 0.052608f, 0.000000f, -0.045297f, 0.900958f, 0.431536f, 0.000000f, -0.036612f, -0.433186f, 0.900561f, 0.000000f, 0.003662f, 0.027034f, -0.009242f, 1.000000f } },
		{ 70.000000f, { 0.993597f, 0.009482f, 0.112587f, 0.000000f, -0.094830f, 0.611711f, 0.785377f, 0.000000f, -0.061423f, -0.791025f, 0.608693f, 0.000000f, 0.006907f, 0.057458f, -0.004788f, 1.000000f } },
		{ -50.000000f, { 0.755448f, -0.637074f, 0.153087f, 0.000000f, 0.639343f, 0.767857f, 0.040443f, 0.000000f, -0.143314f, 0.067323f, 0.987385f, 0.000000f, -0.012015f, 0.006751f, -0.001630f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.752014f, 0.637223f, -0.168586f, 0.000000f, -0.643624f, 0.765060f, 0.020760f, 0.000000f, 0.142207f, 0.092894f, 0.985468f, 0.000000f, 0.014945f, 0.001252f, 0.000238f, 1.000000f } },
		{ -70.000000f, { 0.571614f, 0.160267f, -0.804719f, 0.000000f, -0.113779f, 0.986746f, 0.115699f, 0.000000f, 0.812596f, 0.025425f, 0.582273f, 0.000000f, -0.038663f, -0.007151f, 0.019000f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.577827f, -0.077537f, 0.812468f, 0.000000f, 0.191939f, 0.980467f, -0.042937f, 0.000000f, -0.793269f, 0.180754f, 0.581423f, 0.000000f, 0.036732f, -0.014805f, 0.018017f, 1.000000f } },
		{ -70.000000f, { 0.999855f, -0.011904f, -0.012210f, 0.000000f, 0.009699f, 0.985917f, -0.166952f, 0.000000f, 0.014026f, 0.166809f, 0.985889f, 0.000000f, -0.001128f, -0.011205f, 0.004097f, 1.000000f } },
		{ -35.000000f, { 0.999984f, -0.004260f, -0.003763f, 0.000000f, 0.004030f, 0.998242f, -0.059131f, 0.000000f, 0.004008f, 0.059115f, 0.998243f, 0.000000f, -0.000358f, -0.004194f, 0.001312f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999994f, 0.003502f, 0.000371f, 0.000000f, -0.003517f, 0.998366f, 0.057042f, 0.000000f, -0.000171f, -0.057043f, 0.998372f, 0.000000f, 0.000095f, 0.004309f, -0.000936f, 1.000000f } },
		{ 70.000000f, { 0.999961f, 0.008692f, 0.001641f, 0.000000f, -0.008843f, 0.987068f, 0.160058f, 0.000000f, -0.000229f, -0.160066f, 0.987106f, 0.000000f, 0.000201f, 0.011892f, -0.001738f, 1.000000f } },
		{ -50.000000f, { 0.994783f, -0.097503f, 0.030013f, 0.000000f, 0.097831f, 0.995156f, -0.009672f, 0.000000f, -0.028925f, 0.012558f, 0.999503f, 0.000000f, 0.000207f, -0.000441f, 0.000117f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.994772f, 0.099348f, -0.023642f, 0.000000f, -0.099653f, 0.994949f, -0.012096f, 0.000000f, 0.022321f, 0.014389f, 0.999647f, 0.000000f, 0.000124f, -0.000846f, 0.000222f, 1.000000f } },
		{ -70.000000f, { 0.984920f, -0.041686f, -0.167911f, 0.000000f, 0.046446f, 0.998620f, 0.024524f, 0.000000f, 0.166657f, -0.031953f, 0.985497f, 0.000000f, -0.012699f, 0.002302f, 0.001057f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.983901f, 0.043216f, 0.173410f, 0.000000f, -0.044138f, 0.999024f, 0.001463f, 0.000000f, -0.173177f, -0.009093f, 0.984849f, 0.000000f, 0.012792f, 0.000569f, 0.001081f, 1.000000f } },
		{ -150.000000f, { 0.996617f, 0.071181f, 0.041071f, 0.000000f, -0.080133f, 0.730857f, 0.677810f, 0.000000f, 0.018230f, -0.678809f, 0.734089f, 0.000000f, -0.003946f, 0.013420f, 0.032645f, 1.000000f } },
		{ -75.000000f, { 0.998891f, 0.046850f, -0.004581f, 0.000000f, -0.044677f, 0.974189f, 0.221270f, 0.000000f, 0.014829f, -0.220820f, 0.975202f, 0.000000f, -0.001541f, 0.006153f, 0.004300f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.999132f, -0.032157f, 0.026463f, 0.000000f, 0.036638f, 0.980828f, -0.191399f, 0.000000f, -0.019801f, 0.192203f, 0.981155f, 0.000000f, 0.000790f, -0.000583f, -0.002361f, 1.000000f } },
		{ -50.000000f, { 0.995448f, -0.095295f, -0.001491f, 0.000000f, 0.095304f, 0.995412f, 0.008433f, 0.000000f, 0.000681f, -0.008537f, 0.999963f, 0.000000f, 0.001373f, 0.000344f, 0.000286f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.995411f, 0.095630f, 0.003464f, 0.000000f, -0.095659f, 0.995370f, 0.009418f, 0.000000f, -0.002548f, -0.009706f, 0.999950f, 0.000000f, -0.001424f, -0.000665f, 0.000262f, 1.000000f } },
		{ -70.000000f, { 0.997974f, -0.062018f, 0.014230f, 0.000000f, 0.062545f, 0.997233f, -0.040181f, 0.000000f, -0.011698f, 0.040990f, 0.999091f, 0.000000f, 0.001805f, 0.001351f, -0.000654f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.997451f, 0.067921f, -0.021862f, 0.000000f, -0.068728f, 0.996889f, -0.038597f, 0.000000f, 0.019172f, 0.040001f, 0.999016f, 0.000000f, -0.001800f, 0.001021f, -0.000492f, 1.000000f } },
		{ -35.000000f, { 0.999019f, -0.044252f, -0.001853f, 0.000000f, 0.044024f, 0.996714f, -0.068000f, 0.000000f, 0.004856f, 0.067851f, 0.997684f, 0.000000f, 0.000390f, -0.001380f, 0.000184f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.994802f, -0.101553f, -0.007507f, 0.000000f, 0.100846f, 0.992728f, -0.065731f, 0.000000f, 0.014128f, 0.064632f, 0.997809f, 0.000000f, 0.002360f, -0.002311f, -0.000209f, 1.000000f } },
		{ -35.000000f, { 0.998614f, -0.052045f, -0.007863f, 0.000000f, 0.051591f, 0.997424f, -0.049833f, 0.000000f, 0.010436f, 0.049358f, 0.998727f, 0.000000f, 0.001377f, -0.011177f, 0.002085f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.993729f, 0.081648f, -0.076400f, 0.000000f, -0.092849f, 0.983239f, -0.156906f, 0.000000f, 0.062308f, 0.163016f, 0.984654f, 0.000000f, 0.002166f, 0.001422f, -0.003359f, 1.000000f } },
		{ -50.000000f, { 0.998049f, -0.062384f, -0.002367f, 0.000000f, 0.062383f, 0.998052f, -0.000445f, 0.000000f, 0.002390f, 0.000296f, 0.999997f, 0.000000f, -0.000333f, -0.000935f, 0.000771f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.884540f, 0.409194f, -0.223941f, 0.000000f, -0.410238f, 0.910913f, 0.044068f, 0.000000f, 0.222023f, 0.052889f, 0.973606f, 0.000000f, 0.016506f, 0.003668f, -0.002185f, 1.000000f } },
		{ -0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.886301f, -0.407817f, 0.219444f, 0.000000f, 0.405483f, 0.912279f, 0.057706f, 0.000000f, -0.223728f, 0.037836f, 0.973917f, 0.000000f, -0.016306f, 0.004654f, -0.002376f, 1.000000f } },
		{ -30.000000f, { 0.999187f, -0.020385f, 0.034772f, 0.000000f, 0.011615f, 0.971707f, 0.235905f, 0.000000f, -0.038597f, -0.235310f, 0.971154f, 0.000000f, -0.000342f, 0.002748f, -0.009548f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.992666f, -0.028624f, -0.117452f, 0.000000f, -0.026102f, 0.897896f, -0.439434f, 0.000000f, 0.118038f, 0.439277f, 0.890563f, 0.000000f, -0.001919f, -0.017998f, 0.021501f, 1.000000f } },
		{ 100.000000f, { 0.995552f, -0.084493f, -0.041676f, 0.000000f, 0.018033f, 0.605076f, -0.795964f, 0.000000f, 0.092470f, 0.791672f, 0.603908f, 0.000000f, -0.001783f, -0.054689f, 0.040990f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.997826f, -0.026027f, -0.060542f, 0.000000f, 0.027893f, 0.999155f, 0.030197f, 0.000000f, 0.059705f, -0.031820f, 0.997709f, 0.000000f, 0.004316f, -0.001607f, 0.003723f, 1.000000f } },
		{ -70.000000f, { 0.999371f, -0.035445f, 0.001127f, 0.000000f, 0.035436f, 0.996871f, -0.070653f, 0.000000f, 0.001381f, 0.070649f, 0.997500f, 0.000000f, 0.002607f, 0.000369f, 0.002508f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999596f, 0.025439f, 0.012703f, 0.000000f, -0.026148f, 0.997905f, 0.059180f, 0.000000f, -0.011171f, -0.059489f, 0.998166f, 0.000000f, 0.001241f, -0.000262f, 0.001206f, 1.000000f } },
		{ -50.000000f, { 0.984835f, -0.137774f, 0.105444f, 0.000000f, 0.139591f, 0.990159f, -0.010012f, 0.000000f, -0.103027f, 0.024579f, 0.994375f, 0.000000f, 0.010101f, 0.002378f, 0.006958f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.792133f, 0.476970f, 0.380821f, 0.000000f, -0.557976f, 0.818783f, 0.135118f, 0.000000f, -0.247363f, -0.319520f, 0.914723f, 0.000000f, -0.025322f, -0.045592f, -0.019754f, 1.000000f } },
		{ -50.000000f, { 0.994792f, -0.059254f, 0.082936f, 0.000000f, 0.060992f, 0.997965f, -0.018578f, 0.000000f, -0.081666f, 0.023540f, 0.996382f, 0.000000f, 0.001824f, -0.000339f, 0.001587f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.997472f, 0.070940f, -0.004222f, 0.000000f, -0.070852f, 0.997322f, 0.018132f, 0.000000f, 0.005497f, -0.017787f, 0.999827f, 0.000000f, 0.006210f, -0.003904f, 0.008960f, 1.000000f } },
		{ -70.000000f, { 0.992816f, 0.099107f, 0.067044f, 0.000000f, -0.100122f, 0.994903f, 0.011946f, 0.000000f, -0.065518f, -0.018573f, 0.997679f, 0.000000f, -0.001540f, -0.002853f, 0.001646f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.996572f, 0.026517f, 0.078367f, 0.000000f, -0.030400f, 0.998347f, 0.048782f, 0.000000f, -0.076944f, -0.050997f, 0.995730f, 0.000000f, 0.001882f, 0.002176f, -0.000080f, 1.000000f } },
		{ 70.000000f, { 0.996093f, -0.080207f, -0.036963f, 0.000000f, 0.078896f, 0.996245f, -0.035652f, 0.000000f, 0.039683f, 0.032596f, 0.998680f, 0.000000f, -0.002246f, -0.003948f, -0.000401f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.900765f, -0.123295f, -0.416438f, 0.000000f, 0.084565f, 0.990296f, -0.110281f, 0.000000f, 0.425994f, 0.064121f, 0.902451f, 0.000000f, -0.035697f, -0.004087f, 0.002287f, 1.000000f } },
		{ -70.000000f, { 0.995894f, 0.024742f, -0.087077f, 0.000000f, -0.030013f, 0.997762f, -0.059754f, 0.000000f, 0.085403f, 0.062122f, 0.994408f, 0.000000f, -0.001466f, -0.002059f, 0.000736f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -50.000000f, { 0.997489f, -0.021003f, -0.067636f, 0.000000f, 0.018912f, 0.999328f, -0.031407f, 0.000000f, 0.068250f, 0.030049f, 0.997216f, 0.000000f, -0.002468f, -0.001286f, -0.000500f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.998251f, -0.013717f, 0.057503f, 0.000000f, 0.014227f, 0.999863f, -0.008480f, 0.000000f, -0.057378f, 0.009284f, 0.998309f, 0.000000f, 0.003181f, 0.000984f, 0.001234f, 1.000000f } },
		{ -35.000000f, { 0.982413f, -0.154787f, 0.104432f, 0.000000f, 0.120147f, 0.952154f, 0.281012f, 0.000000f, -0.142932f, -0.263523f, 0.954005f, 0.000000f, -0.001869f, 0.003987f, -0.000772f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.868063f, -0.494576f, 0.043147f, 0.000000f, 0.489581f, 0.838394f, -0.239595f, 0.000000f, 0.082324f, 0.229107f, 0.969914f, 0.000000f, -0.004904f, -0.004753f, -0.020040f, 1.000000f } },
		{ -50.000000f, { 0.953800f, -0.210262f, -0.214603f, 0.000000f, 0.216939f, 0.976154f, 0.007771f, 0.000000f, 0.207852f, -0.053967f, 0.976670f, 0.000000f, 0.008315f, 0.006079f, 0.008093f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.936452f, 0.216468f, 0.276041f, 0.000000f, -0.212312f, 0.976155f, -0.045233f, 0.000000f, -0.279250f, -0.016248f, 0.960081f, 0.000000f, -0.010369f, -0.010355f, -0.017118f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.937655f, -0.216332f, -0.272034f, 0.000000f, 0.216871f, 0.975785f, -0.028467f, 0.000000f, 0.271605f, -0.032304f, 0.961866f, 0.000000f, 0.016682f, 0.006904f, 0.012944f, 1.000000f } },
		{ -35.000000f, { 0.998160f, -0.022582f, -0.056280f, 0.000000f, 0.046814f, 0.876878f, 0.478428f, 0.000000f, 0.038546f, -0.480182f, 0.876322f, 0.000000f, -0.004663f, -0.002897f, 0.051132f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.978374f, 0.128565f, 0.162035f, 0.000000f, 0.058556f, 0.579168f, -0.813102f, 0.000000f, -0.198382f, 0.805006f, 0.559115f, 0.000000f, 0.004826f, -0.067131f, -0.061391f, 1.000000f } },
		{ -50.000000f, { 0.859681f, -0.383711f, -0.337216f, 0.000000f, 0.350021f, 0.923277f, -0.158254f, 0.000000f, 0.372067f, 0.018015f, 0.928031f, 0.000000f, -0.017908f, 0.009033f, 0.041236f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -150.000000f, { 0.997431f, 0.039308f, 0.059883f, 0.000000f, -0.069511f, 0.733072f, 0.676590f, 0.000000f, -0.017303f, -0.679014f, 0.733921f, 0.000000f, 0.003257f, -0.014547f, -0.033809f, 1.000000f } },
		{ -75.000000f, { 0.998989f, 0.042335f, 0.015134f, 0.000000f, -0.044604f, 0.975460f, 0.215612f, 0.000000f, -0.005635f, -0.216069f, 0.976362f, 0.000000f, 0.001349f, -0.006656f, -0.003505f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.999000f, -0.039651f, 0.020660f, 0.000000f, 0.043106f, 0.976840f, -0.209585f, 0.000000f, -0.011871f, 0.210266f, 0.977572f, 0.000000f, -0.000850f, 0.000066f, 0.002989f, 1.000000f } },
		{ -50.000000f, { 0.995269f, -0.097128f, 0.002533f, 0.000000f, 0.097107f, 0.995244f, 0.007687f, 0.000000f, -0.003268f, -0.007405f, 0.999967f, 0.000000f, -0.001384f, -0.000221f, -0.000177f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.995293f, 0.096861f, 0.003216f, 0.000000f, -0.096891f, 0.995234f, 0.011000f, 0.000000f, -0.002135f, -0.011259f, 0.999934f, 0.000000f, 0.001551f, 0.000771f, -0.000298f, 1.000000f } },
		{ -70.000000f, { 0.998575f, -0.052949f, 0.006626f, 0.000000f, 0.053133f, 0.998085f, -0.031672f, 0.000000f, -0.004937f, 0.031979f, 0.999476f, 0.000000f, -0.001120f, -0.001005f, 0.000132f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.997959f, 0.060406f, -0.020709f, 0.000000f, -0.060963f, 0.997764f, -0.027395f, 0.000000f, 0.019008f, 0.028602f, 0.999410f, 0.000000f, 0.001106f, -0.000542f, -0.000232f, 1.000000f } },
		{ -150.000000f, { 0.999979f, -0.004784f, 0.004346f, 0.000000f, 0.004513f, 0.998163f, 0.060413f, 0.000000f, -0.004627f, -0.060392f, 0.998164f, 0.000000f, -0.000461f, -0.005624f, 0.001787f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.993319f, -0.114279f, -0.016051f, 0.000000f, 0.055992f, 0.598894f, -0.798869f, 0.000000f, 0.100907f, 0.792633f, 0.601291f, 0.000000f, 0.007181f, 0.029013f, -0.045770f, 1.000000f } },
		{ -35.000000f, { 0.998318f, -0.051712f, -0.026226f, 0.000000f, 0.034694f, 0.895162f, -0.444388f, 0.000000f, 0.046457f, 0.442731f, 0.895450f, 0.000000f, 0.003677f, 0.020010f, -0.019951f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.998388f, 0.024331f, 0.051277f, 0.000000f, -0.044646f, 0.894492f, 0.444849f, 0.000000f, -0.035044f, -0.446421f, 0.894137f, 0.000000f, -0.003559f, -0.027997f, 0.009360f, 1.000000f } },
		{ 70.000000f, { 0.993967f, 0.009353f, 0.109280f, 0.000000f, -0.094032f, 0.585562f, 0.805155f, 0.000000f, -0.056460f, -0.810573f, 0.582909f, 0.000000f, -0.006609f, -0.059374f, 0.004068f, 1.000000f } },
		{ -50.000000f, { 0.753393f, -0.639393f, 0.153547f, 0.000000f, 0.640664f, 0.766340f, 0.047678f, 0.000000f, -0.148154f, 0.062452f, 0.986990f, 0.000000f, 0.011833f, -0.007174f, 0.001755f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.747374f, 0.642526f, -0.169094f, 0.000000f, -0.648900f, 0.760557f, 0.021923f, 0.000000f, 0.142691f, 0.093341f, 0.985356f, 0.000000f, -0.015077f, -0.001321f, -0.000257f, 1.000000f } },
		{ -70.000000f, { 0.560323f, 0.138229f, -0.816658f, 0.000000f, -0.089168f, 0.990313f, 0.106442f, 0.000000f, 0.823460f, 0.013178f, 0.567221f, 0.000000f, 0.040119f, 0.005979f, -0.020444f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.568131f, -0.061915f, 0.820606f, 0.000000f, 0.169353f, 0.984619f, -0.042959f, 0.000000f, -0.805324f, 0.163378f, 0.569878f, 0.000000f, -0.038367f, 0.013516f, -0.018997f, 1.000000f } },
		{ -70.000000f, { 0.999859f, -0.011263f, -0.012436f, 0.000000f, 0.008920f, 0.984610f, -0.174539f, 0.000000f, 0.014210f, 0.174404f, 0.984572f, 0.000000f, 0.001149f, 0.011679f, -0.004415f, 1.000000f } },
		{ -35.000000f, { 0.999985f, -0.003732f, -0.004119f, 0.000000f, 0.003454f, 0.997834f, -0.065697f, 0.000000f, 0.004356f, 0.065682f, 0.997831f, 0.000000f, 0.000379f, 0.004633f, -0.001473f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999995f, 0.003193f, 0.000832f, 0.000000f, -0.003239f, 0.998015f, 0.062897f, 0.000000f, -0.000629f, -0.062900f, 0.998020f, 0.000000f, -0.000116f, -0.004722f, 0.000990f, 1.000000f } },
		{ 70.000000f, { 0.999960f, 0.008591f, 0.002317f, 0.000000f, -0.008859f, 0.985628f, 0.168697f, 0.000000f, -0.000834f, -0.168711f, 0.985665f, 0.000000f, -0.000227f, -0.012565f, 0.001736f, 1.000000f } },
		{ -50.000000f, { 0.993976f, -0.105125f, 0.030998f, 0.000000f, 0.105418f, 0.994396f, -0.007963f, 0.000000f, -0.029987f, 0.011183f, 0.999488f, 0.000000f, -0.000156f, 0.000326f, -0.000095f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.993967f, 0.106492f, -0.026255f, 0.000000f, -0.106830f, 0.994207f, -0.011822f, 0.000000f, 0.024844f, 0.014555f, 0.999585f, 0.000000f, -0.000084f, 0.000873f, -0.000232f, 1.000000f } },
		{ -70.000000f, { 0.983176f, -0.043054f, -0.177515f, 0.000000f, 0.047877f, 0.998589f, 0.022970f, 0.000000f, 0.176276f, -0.031083f, 0.983850f, 0.000000f, 0.013408f, -0.002297f, -0.001269f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.982545f, 0.045384f, 0.180403f, 0.000000f, -0.045960f, 0.998943f, -0.000985f, 0.000000f, -0.180257f, -0.007324f, 0.983592f, 0.000000f, -0.013352f, -0.000487f, -0.001242f, 1.000000f } },
		{ -35.000000f, { 0.997925f, -0.059969f, 0.023456f, 0.000000f, 0.061482f, 0.995634f, -0.070228f, 0.000000f, -0.019142f, 0.071524f, 0.997255f, 0.000000f, -0.000521f, 0.002018f, -0.000687f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.996198f, -0.086913f, 0.005994f, 0.000000f, 0.087096f, 0.995159f, -0.045522f, 0.000000f, -0.002008f, 0.045871f, 0.998945f, 0.000000f, -0.002330f, 0.002149f, -0.000170f, 1.000000f } },
		{ -35.000000f, { 0.996163f, -0.087481f, 0.002374f, 0.000000f, 0.087461f, 0.994273f, -0.061420f, 0.000000f, 0.003013f, 0.061392f, 0.998109f, 0.000000f, -0.001431f, 0.012017f, -0.002486f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.995029f, 0.083416f, -0.054395f, 0.000000f, -0.090856f, 0.984049f, -0.152949f, 0.000000f, 0.040769f, 0.157130f, 0.986736f, 0.000000f, -0.001950f, -0.000942f, 0.002778f, 1.000000f } },
		{ -50.000000f, { 0.996978f, -0.072569f, -0.027726f, 0.000000f, 0.072291f, 0.997324f, -0.010930f, 0.000000f, 0.028445f, 0.008892f, 0.999556f, 0.000000f, 0.000570f, 0.000721f, -0.000317f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.877088f, 0.421625f, -0.230106f, 0.000000f, -0.421835f, 0.905248f, 0.050799f, 0.000000f, 0.229722f, 0.052512f, 0.971839f, 0.000000f, -0.016678f, -0.003769f, 0.002277f, 1.000000f } },
		{ -0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.880313f, -0.419023f, 0.222415f, 0.000000f, 0.417683f, 0.906902f, 0.055394f, 0.000000f, -0.224920f, 0.044135f, 0.973377f, 0.000000f, 0.016504f, -0.004734f, 0.002382f, 1.000000f } },
		{ -30.000000f, { 0.999348f, -0.020454f, 0.029748f, 0.000000f, 0.012912f, 0.972014f, 0.234568f, 0.000000f, -0.033713f, -0.234031f, 0.971645f, 0.000000f, 0.000368f, -0.002743f, 0.009736f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.993028f, -0.033133f, -0.113124f, 0.000000f, -0.020892f, 0.895017f, -0.445542f, 0.000000f, 0.116010f, 0.444799f, 0.888085f, 0.000000f, 0.002108f, 0.018052f, -0.021751f, 1.000000f } },
		{ 100.000000f, { 0.995821f, -0.080646f, -0.042855f, 0.000000f, 0.015712f, 0.613549f, -0.789500f, 0.000000f, 0.089963f, 0.785528f, 0.612252f, 0.000000f, 0.001959f, 0.054611f, -0.041267f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999743f, 0.022651f, -0.001346f, 0.000000f, -0.022539f, 0.998166f, 0.056192f, 0.000000f, 0.002616f, -0.056147f, 0.998419f, 0.000000f, -0.001378f, -0.000125f, 0.000540f, 1.000000f } },
		{ -50.000000f, { 0.939358f, 0.232327f, 0.252251f, 0.000000f, -0.296111f, 0.920519f, 0.254879f, 0.000000f, -0.172987f, -0.314117f, 0.933491f, 0.000000f, 0.010906f, 0.025612f, 0.010188f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.971353f, -0.235343f, -0.032974f, 0.000000f, 0.233546f, 0.971027f, -0.050622f, 0.000000f, 0.043932f, 0.041471f, 0.998173f, 0.000000f, -0.024536f, -0.000723f, -0.013760f, 1.000000f } },
		{ -50.000000f, { 0.994758f, -0.054832f, -0.086312f, 0.000000f, 0.057877f, 0.997772f, 0.033184f, 0.000000f, 0.084300f, -0.038005f, 0.995715f, 0.000000f, 0.004552f, 0.005334f, -0.008655f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.975033f, 0.011044f, 0.221785f, 0.000000f, -0.006054f, 0.999713f, -0.023164f, 0.000000f, -0.221978f, 0.021243f, 0.974820f, 0.000000f, 0.003275f, 0.000456f, 0.001630f, 1.000000f } },
		{ -70.000000f, { 0.997380f, 0.028989f, -0.066281f, 0.000000f, -0.030892f, 0.999134f, -0.027872f, 0.000000f, 0.065416f, 0.029846f, 0.997412f, 0.000000f, 0.001079f, 0.003129f, 0.002557f, 1.000000f } },
		{ -35.000000f, { 0.999984f, -0.003941f, 0.004034f, 0.000000f, 0.003682f, 0.998054f, 0.062248f, 0.000000f, -0.004271f, -0.062232f, 0.998053f, 0.000000f, 0.000726f, -0.005579f, -0.002128f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.999947f, -0.009242f, -0.004618f, 0.000000f, 0.008888f, 0.997398f, -0.071537f, 0.000000f, 0.005267f, 0.071492f, 0.997427f, 0.000000f, -0.001786f, 0.005712f, 0.000213f, 1.000000f } },
		{ -50.000000f, { 0.923303f, -0.149857f, -0.353631f, 0.000000f, 0.117281f, 0.986769f, -0.111948f, 0.000000f, 0.365728f, 0.061888f, 0.928662f, 0.000000f, 0.034548f, 0.004805f, -0.003834f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.996152f, -0.022698f, -0.084649f, 0.000000f, 0.020248f, 0.999354f, -0.029693f, 0.000000f, 0.085268f, 0.027865f, 0.995968f, 0.000000f, 0.002714f, 0.002207f, 0.001160f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.997842f, 0.016880f, 0.063453f, 0.000000f, -0.016430f, 0.999836f, -0.007600f, 0.000000f, -0.063571f, 0.006541f, 0.997956f, 0.000000f, -0.002350f, 0.001786f, -0.000617f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.998015f, 0.003327f, 0.062886f, 0.000000f, -0.003530f, 0.999989f, 0.003117f, 0.000000f, -0.062875f, -0.003333f, 0.998016f, 0.000000f, -0.002996f, -0.002281f, -0.000637f, 1.000000f } },
		{ -35.000000f, { 0.981010f, -0.186581f, 0.052984f, 0.000000f, 0.167404f, 0.952465f, 0.254530f, 0.000000f, -0.097956f, -0.240827f, 0.965612f, 0.000000f, 0.003709f, -0.001515f, -0.000313f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.914710f, -0.403748f, 0.017126f, 0.000000f, 0.386720f, 0.862258f, -0.327046f, 0.000000f, 0.117277f, 0.305775f, 0.944853f, 0.000000f, 0.004404f, 0.002240f, 0.020257f, 1.000000f } },
		{ -50.000000f, { 0.963880f, -0.178324f, -0.197828f, 0.000000f, 0.188712f, 0.981415f, 0.034806f, 0.000000f, 0.187945f, -0.070882f, 0.979618f, 0.000000f, -0.010211f, -0.005687f, -0.007457f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.936348f, 0.225656f, 0.268947f, 0.000000f, -0.220796f, 0.974108f, -0.048604f, 0.000000f, -0.272951f, -0.013872f, 0.961928f, 0.000000f, 0.009290f, 0.010670f, 0.016710f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.934421f, -0.235861f, -0.266884f, 0.000000f, 0.238095f, 0.970934f, -0.024450f, 0.000000f, 0.264894f, -0.040698f, 0.963418f, 0.000000f, -0.014602f, -0.007842f, -0.012956f, 1.000000f } },
		{ -35.000000f, { 0.995374f, -0.086678f, -0.041445f, 0.000000f, 0.096043f, 0.886292f, 0.453059f, 0.000000f, -0.002538f, -0.454944f, 0.890517f, 0.000000f, 0.004647f, 0.001706f, -0.052262f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.986733f, 0.041768f, 0.156883f, 0.000000f, 0.111010f, 0.531549f, -0.839722f, 0.000000f, -0.118464f, 0.845997f, 0.519860f, 0.000000f, -0.002818f, 0.062649f, 0.057645f, 1.000000f } },
		{ -50.000000f, { 0.882381f, -0.254403f, -0.395832f, 0.000000f, 0.232032f, 0.967098f, -0.104316f, 0.000000f, 0.409346f, 0.000200f, 0.912379f, 0.000000f, 0.020422f, -0.007117f, -0.041141f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -50.000000f, { 0.997822f, 0.004420f, 0.065823f, 0.000000f, -0.006397f, 0.999534f, 0.029847f, 0.000000f, -0.065661f, -0.030203f, 0.997385f, 0.000000f, 0.003081f, 0.000217f, -0.003195f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.994373f, -0.070818f, -0.078780f, 0.000000f, 0.055078f, 0.980898f, -0.186561f, 0.000000f, 0.090487f, 0.181172f, 0.979280f, 0.000000f, -0.002367f, 0.001400f, 0.000103f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.997985f, -0.062780f, 0.009148f, 0.000000f, 0.063029f, 0.997555f, -0.030174f, 0.000000f, -0.007232f, 0.030690f, 0.999503f, 0.000000f, 0.001730f, -0.004671f, 0.000456f, 1.000000f } },
		{ -70.000000f, { 0.992574f, 0.055738f, -0.108122f, 0.000000f, -0.121466f, 0.502195f, -0.856181f, 0.000000f, 0.006576f, 0.862956f, 0.505236f, 0.000000f, 0.001761f, -0.047503f, -0.021860f, 1.000000f } },
		{ -35.000000f, { 0.997762f, 0.057103f, -0.034777f, 0.000000f, -0.066619f, 0.893212f, -0.444673f, 0.000000f, 0.005671f, 0.445994f, 0.895018f, 0.000000f, 0.000472f, -0.018960f, -0.019787f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.998577f, -0.039905f, -0.035378f, 0.000000f, 0.050006f, 0.931158f, 0.361170f, 0.000000f, 0.018530f, -0.362425f, 0.931829f, 0.000000f, -0.000064f, 0.000595f, 0.026920f, 1.000000f } },
		{ -50.000000f, { 0.906441f, -0.231641f, 0.353140f, 0.000000f, 0.305841f, 0.936668f, -0.170629f, 0.000000f, -0.291250f, 0.262670f, 0.919879f, 0.000000f, -0.027863f, -0.000895f, 0.031899f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.861545f, -0.107029f, -0.496271f, 0.000000f, 0.074610f, 0.993604f, -0.084762f, 0.000000f, 0.502169f, 0.035999f, 0.864020f, 0.000000f, -0.026567f, -0.004714f, -0.006517f, 1.000000f } },
		{ -50.000000f, { 0.865304f, -0.500878f, -0.019246f, 0.000000f, 0.501234f, 0.864923f, 0.025939f, 0.000000f, 0.003654f, -0.032092f, 0.999478f, 0.000000f, 0.008134f, -0.034332f, 0.009295f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.780960f, 0.598297f, -0.179281f, 0.000000f, -0.623598f, 0.763015f, -0.170097f, 0.000000f, 0.035026f, 0.244638f, 0.968982f, 0.000000f, -0.044536f, 0.002960f, 0.006442f, 1.000000f } },
		{ -70.000000f, { 0.992623f, -0.078275f, 0.092588f, 0.000000f, 0.083352f, 0.995147f, -0.052302f, 0.000000f, -0.088045f, 0.059634f, 0.994330f, 0.000000f, -0.007006f, 0.002100f, -0.118083f, 1.000000f } },
		{ -35.000000f, { 0.982669f, -0.090096f, 0.162000f, 0.000000f, 0.128379f, 0.961199f, -0.244161f, 0.000000f, -0.133717f, 0.260727f, 0.956107f, 0.000000f, -0.002718f, -0.003912f, -0.042796f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.989018f, 0.139412f, -0.049072f, 0.000000f, -0.122199f, 0.958097f, 0.259071f, 0.000000f, 0.083133f, -0.250229f, 0.964611f, 0.000000f, -0.001637f, 0.009245f, 0.030192f, 1.000000f } },
		{ 70.000000f, { 0.908322f, 0.304633f, -0.286618f, 0.000000f, -0.209227f, 0.924268f, 0.319299f, 0.000000f, 0.362181f, -0.230058f, 0.903271f, 0.000000f, -0.003376f, -0.002288f, 0.053781f, 1.000000f } },
		{ -50.000000f, { 0.938697f, 0.128139f, 0.320045f, 0.000000f, -0.095794f, 0.988747f, -0.114907f, 0.000000f, -0.331168f, 0.077205f, 0.940408f, 0.000000f, -0.006566f, 0.011534f, 0.012470f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.666993f, 0.101532f, -0.738113f, 0.000000f, -0.050498f, 0.994554f, 0.091174f, 0.000000f, 0.743351f, -0.023539f, 0.668488f, 0.000000f, 0.010752f, 0.001295f, -0.032985f, 1.000000f } },
		{ -70.000000f, { 0.944937f, -0.275326f, -0.176890f, 0.000000f, 0.253467f, 0.957656f, -0.136565f, 0.000000f, 0.207000f, 0.084209f, 0.974710f, 0.000000f, 0.010121f, -0.013800f, 0.016696f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.990306f, 0.104079f, -0.091981f, 0.000000f, -0.105850f, 0.994275f, -0.014572f, 0.000000f, 0.089938f, 0.024167f, 0.995654f, 0.000000f, -0.017865f, 0.009679f, -0.009459f, 1.000000f } },
		{ -70.000000f, { 0.996265f, 0.062836f, 0.059223f, 0.000000f, -0.060672f, 0.997447f, -0.037666f, 0.000000f, -0.061438f, 0.033932f, 0.997534f, 0.000000f, -0.000177f, -0.016362f, 0.006195f, 1.000000f } },
		{ -35.000000f, { 0.999378f, 0.021593f, 0.027880f, 0.000000f, -0.020154f, 0.998501f, -0.050892f, 0.000000f, -0.028937f, 0.050299f, 0.998315f, 0.000000f, -0.000377f, -0.008942f, -0.000260f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.988486f, 0.128875f, -0.079288f, 0.000000f, -0.116977f, 0.983244f, 0.139816f, 0.000000f, 0.095978f, -0.128931f, 0.986998f, 0.000000f, 0.001004f, 0.005763f, 0.004457f, 1.000000f } },
		{ 70.000000f, { 0.999374f, 0.003117f, -0.035246f, 0.000000f, 0.003396f, 0.983068f, 0.183211f, 0.000000f, 0.035221f, -0.183216f, 0.982442f, 0.000000f, 0.002399f, 0.008311f, 0.016988f, 1.000000f } },
		{ -50.000000f, { 0.997845f, -0.029597f, 0.058555f, 0.000000f, 0.029245f, 0.999549f, 0.006846f, 0.000000f, -0.058732f, -0.005119f, 0.998261f, 0.000000f, 0.003049f, 0.005763f, 0.003618f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.931387f, 0.091900f, -0.352240f, 0.000000f, -0.116741f, 0.991908f, -0.049895f, 0.000000f, 0.344804f, 0.087592f, 0.934579f, 0.000000f, -0.006403f, 0.000175f, -0.010722f, 1.000000f } },
		{ -70.000000f, { 0.992367f, -0.110545f, 0.054653f, 0.000000f, 0.102650f, 0.986098f, 0.130667f, 0.000000f, -0.068338f, -0.124060f, 0.989919f, 0.000000f, 0.002883f, -0.006714f, 0.016786f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.988651f, -0.017964f, -0.149152f, 0.000000f, 0.011057f, 0.998833f, -0.047008f, 0.000000f, 0.149823f, 0.044825f, 0.987696f, 0.000000f, -0.019054f, 0.003856f, 0.003359f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.998146f, 0.054473f, -0.027139f, 0.000000f, -0.050883f, 0.991603f, 0.118888f, 0.000000f, 0.033387f, -0.117287f, 0.992537f, 0.000000f, 0.000125f, 0.005739f, 0.001755f, 1.000000f } },
		{ 70.000000f, { 0.998639f, -0.007337f, -0.051644f, 0.000000f, 0.009270f, 0.999262f, 0.037284f, 0.000000f, 0.051333f, -0.037712f, 0.997969f, 0.000000f, 0.000207f, 0.007696f, 0.003217f, 1.000000f } },
		{ -70.000000f, { 0.998365f, 0.030335f, 0.048453f, 0.000000f, -0.038803f, 0.982025f, 0.184721f, 0.000000f, -0.041979f, -0.186299f, 0.981596f, 0.000000f, 0.002047f, -0.001856f, 0.012669f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.997315f, -0.069173f, 0.024043f, 0.000000f, 0.069219f, 0.997601f, -0.001079f, 0.000000f, -0.023910f, 0.002740f, 0.999710f, 0.000000f, -0.010350f, 0.000810f, 0.000226f, 1.000000f } },
		{ -70.000000f, { 0.991829f, -0.119841f, 0.043749f, 0.000000f, 0.124917f, 0.981918f, -0.142241f, 0.000000f, -0.025911f, 0.146544f, 0.988865f, 0.000000f, 0.005274f, 0.002533f, 0.000359f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 25.000000f, { 0.997511f, 0.020153f, -0.067570f, 0.000000f, -0.014435f, 0.996355f, 0.084076f, 0.000000f, 0.069018f, -0.082892f, 0.994166f, 0.000000f, -0.001279f, 0.002753f, 0.001303f, 1.000000f } },
		{ 50.000000f, { 0.991747f, 0.005409f, -0.128096f, 0.000000f, 0.004282f, 0.997155f, 0.075255f, 0.000000f, 0.128139f, -0.075183f, 0.988902f, 0.000000f, -0.000653f, 0.006321f, 0.003904f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.984527f, 0.165175f, -0.058517f, 0.000000f, -0.167858f, 0.984814f, -0.044325f, 0.000000f, 0.050307f, 0.053461f, 0.997302f, 0.000000f, -0.000893f, 0.001599f, -0.000702f, 1.000000f } },
		{ -70.000000f, { 0.998031f, 0.032770f, 0.053485f, 0.000000f, -0.035729f, 0.997828f, 0.055345f, 0.000000f, -0.051555f, -0.057147f, 0.997034f, 0.000000f, -0.004005f, 0.000047f, 0.001800f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.999768f, 0.020610f, 0.006186f, 0.000000f, -0.020250f, 0.998366f, -0.053428f, 0.000000f, -0.007277f, 0.053290f, 0.998553f, 0.000000f, -0.000788f, 0.001048f, -0.002437f, 1.000000f } },
		{ -35.000000f, { 0.997181f, 0.048144f, -0.057546f, 0.000000f, -0.039725f, 0.989436f, 0.139422f, 0.000000f, 0.063650f, -0.136743f, 0.988560f, 0.000000f, 0.000842f, 0.004285f, 0.005086f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.990481f, -0.096726f, 0.097940f, 0.000000f, 0.117369f, 0.965188f, -0.233744f, 0.000000f, -0.071921f, 0.243014f, 0.967353f, 0.000000f, -0.005127f, -0.012382f, -0.003251f, 1.000000f } },
		{ -50.000000f, { 0.984055f, 0.158840f, -0.080036f, 0.000000f, -0.163342f, 0.985134f, -0.053201f, 0.000000f, 0.070396f, 0.065426f, 0.995371f, 0.000000f, -0.001189f, -0.003846f, 0.002875f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.997940f, -0.062960f, -0.012346f, 0.000000f, 0.061418f, 0.993097f, -0.099935f, 0.000000f, 0.018553f, 0.098971f, 0.994917f, 0.000000f, -0.000578f, -0.002322f, 0.004466f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.998758f, 0.040293f, 0.029290f, 0.000000f, -0.041703f, 0.997917f, 0.049210f, 0.000000f, -0.027246f, -0.050370f, 0.998359f, 0.000000f, 0.001776f, 0.001047f, 0.001016f, 1.000000f } },
		{ -50.000000f, { 0.985506f, 0.169641f, 0.000727f, 0.000000f, -0.169428f, 0.984030f, 0.054584f, 0.000000f, 0.008544f, -0.053916f, 0.998509f, 0.000000f, 0.006044f, 0.004578f, -0.001238f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.991194f, 0.131393f, 0.016472f, 0.000000f, -0.132372f, 0.986512f, 0.096287f, 0.000000f, -0.003599f, -0.097620f, 0.995217f, 0.000000f, 0.008194f, -0.000733f, 0.001670f, 1.000000f } },
		{ -50.000000f, { 0.999386f, -0.033745f, 0.009395f, 0.000000f, 0.033080f, 0.997423f, 0.063665f, 0.000000f, -0.011520f, -0.063315f, 0.997927f, 0.000000f, -0.001056f, 0.003895f, -0.001667f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.999477f, -0.031221f, 0.008424f, 0.000000f, 0.031875f, 0.995060f, -0.094019f, 0.000000f, -0.005447f, 0.094238f, 0.995535f, 0.000000f, -0.000705f, -0.003094f, -0.002738f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.992470f, 0.054754f, 0.109566f, 0.000000f, -0.066128f, 0.992479f, 0.103016f, 0.000000f, -0.103102f, -0.109486f, 0.988627f, 0.000000f, 0.002517f, 0.003130f, -0.001323f, 1.000000f } },
		{ -70.000000f, { 0.999940f, 0.001269f, 0.010921f, 0.000000f, -0.000638f, 0.998339f, -0.057601f, 0.000000f, -0.010976f, 0.057590f, 0.998280f, 0.000000f, 0.000521f, -0.004571f, 0.000701f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -50.000000f, { 0.998255f, -0.004908f, 0.058838f, 0.000000f, 0.004264f, 0.999930f, 0.011064f, 0.000000f, -0.058888f, -0.010794f, 0.998206f, 0.000000f, 0.002990f, 0.000929f, 0.002748f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.997939f, -0.012335f, -0.062974f, 0.000000f, 0.013471f, 0.999753f, 0.017651f, 0.000000f, 0.062740f, -0.018463f, 0.997859f, 0.000000f, -0.002374f, -0.000134f, -0.004134f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.995341f, 0.003165f, 0.096365f, 0.000000f, 0.012847f, 0.986196f, -0.165081f, 0.000000f, -0.095557f, 0.165550f, 0.981561f, 0.000000f, 0.004044f, -0.003823f, -0.002339f, 1.000000f } },
		{ -70.000000f, { 0.971391f, 0.178792f, 0.156312f, 0.000000f, 0.079096f, 0.377047f, -0.922810f, 0.000000f, -0.223928f, 0.908773f, 0.352118f, 0.000000f, -0.000981f, -0.045165f, -0.022679f, 1.000000f } },
		{ -35.000000f, { 0.996518f, 0.028564f, 0.078333f, 0.000000f, 0.015573f, 0.859194f, -0.511414f, 0.000000f, -0.081911f, 0.510853f, 0.855757f, 0.000000f, -0.001339f, -0.018336f, -0.020022f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999986f, 0.000302f, -0.005271f, 0.000000f, 0.001944f, 0.907106f, 0.420897f, 0.000000f, 0.004908f, -0.420902f, 0.907093f, 0.000000f, 0.003646f, 0.000740f, 0.027264f, 1.000000f } },
		{ -50.000000f, { 0.795995f, -0.207741f, 0.568537f, 0.000000f, 0.159417f, 0.978050f, 0.134179f, 0.000000f, -0.583933f, -0.016171f, 0.811641f, 0.000000f, 0.023580f, -0.002283f, -0.021476f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.918863f, 0.063693f, -0.389403f, 0.000000f, -0.154494f, 0.966168f, -0.206523f, 0.000000f, 0.363074f, 0.249927f, 0.897616f, 0.000000f, 0.019517f, -0.008516f, 0.030917f, 1.000000f } },
		{ -50.000000f, { 0.700680f, -0.687118f, 0.192138f, 0.000000f, 0.712866f, 0.685352f, -0.148712f, 0.000000f, -0.029499f, 0.241168f, 0.970035f, 0.000000f, 0.058548f, -0.007714f, 0.005692f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.759217f, 0.620025f, 0.197887f, 0.000000f, -0.617740f, 0.782217f, -0.080832f, 0.000000f, -0.204908f, -0.060873f, 0.976886f, 0.000000f, -0.005901f, -0.032853f, 0.008783f, 1.000000f } },
		{ -70.000000f, { 0.998033f, 0.059704f, 0.019101f, 0.000000f, -0.057795f, 0.994407f, -0.088394f, 0.000000f, -0.024272f, 0.087116f, 0.995902f, 0.000000f, 0.006940f, 0.002195f, -0.108529f, 1.000000f } },
		{ -35.000000f, { 0.991113f, 0.102951f, 0.084239f, 0.000000f, -0.065827f, 0.929873f, -0.361943f, 0.000000f, -0.115594f, 0.353181f, 0.928386f, 0.000000f, -0.000523f, -0.025558f, -0.010308f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.976755f, -0.211829f, -0.032828f, 0.000000f, 0.212393f, 0.935704f, 0.281686f, 0.000000f, -0.028951f, -0.282111f, 0.958945f, 0.000000f, 0.009665f, 0.011222f, 0.029557f, 1.000000f } },
		{ 70.000000f, { 0.966471f, -0.255205f, 0.028373f, 0.000000f, 0.223596f, 0.890756f, 0.395675f, 0.000000f, -0.126252f, -0.376064f, 0.917952f, 0.000000f, -0.012039f, -0.001080f, 0.039679f, 1.000000f } },
		{ -50.000000f, { 0.689596f, -0.060329f, 0.721677f, 0.000000f, -0.008378f, 0.995793f, 0.091250f, 0.000000f, -0.724146f, -0.068971f, 0.686189f, 0.000000f, -0.017552f, -0.002986f, -0.032739f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.911985f, -0.141489f, -0.385052f, 0.000000f, 0.149175f, 0.988760f, -0.010006f, 0.000000f, 0.382139f, -0.048315f, 0.922841f, 0.000000f, -0.000618f, 0.017045f, -0.001895f, 1.000000f } },
		{ -70.000000f, { 0.972658f, -0.159997f, 0.168334f, 0.000000f, 0.185278f, 0.971619f, -0.147065f, 0.000000f, -0.140026f, 0.174233f, 0.974698f, 0.000000f, 0.032772f, -0.011775f, -0.003924f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.990802f, 0.021013f, 0.133677f, 0.000000f, -0.025113f, 0.999262f, 0.029060f, 0.000000f, -0.132967f, -0.032149f, 0.990599f, 0.000000f, -0.019447f, -0.017857f, 0.012428f, 1.000000f } },
		{ -70.000000f, { 0.996177f, -0.086816f, -0.009747f, 0.000000f, 0.086093f, 0.994528f, -0.059186f, 0.000000f, 0.014831f, 0.058120f, 0.998199f, 0.000000f, -0.001121f, -0.016146f, 0.008260f, 1.000000f } },
		{ -35.000000f, { 0.999711f, -0.023702f, 0.004057f, 0.000000f, 0.023885f, 0.998293f, -0.053307f, 0.000000f, -0.002787f, 0.053388f, 0.998570f, 0.000000f, -0.000777f, -0.009383f, 0.000719f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.997835f, -0.060868f, 0.024926f, 0.000000f, 0.056230f, 0.986023f, 0.156832f, 0.000000f, -0.034124f, -0.155091f, 0.987311f, 0.000000f, -0.000751f, 0.011163f, 0.003150f, 1.000000f } },
		{ 70.000000f, { 0.997981f, -0.013801f, -0.061989f, 0.000000f, 0.023082f, 0.988172f, 0.151600f, 0.000000f, 0.059164f, -0.152725f, 0.986496f, 0.000000f, 0.003523f, 0.012026f, 0.015674f, 1.000000f } },
		{ -50.000000f, { 0.934805f, 0.035366f, 0.353396f, 0.000000f, -0.002604f, 0.995685f, -0.092756f, 0.000000f, -0.355152f, 0.085789f, 0.930864f, 0.000000f, 0.000235f, -0.005039f, -0.010547f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.998210f, -0.017755f, -0.057113f, 0.000000f, 0.021324f, 0.997818f, 0.062490f, 0.000000f, 0.055879f, -0.063596f, 0.996410f, 0.000000f, 0.011085f, 0.005570f, 0.000720f, 1.000000f } },
		{ -70.000000f, { 0.989329f, -0.121397f, 0.080570f, 0.000000f, 0.128805f, 0.987186f, -0.094194f, 0.000000f, -0.068103f, 0.103567f, 0.992288f, 0.000000f, 0.020574f, -0.000148f, -0.001952f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.991982f, -0.122896f, -0.029473f, 0.000000f, 0.122792f, 0.992418f, -0.005331f, 0.000000f, 0.029905f, 0.001669f, 0.999551f, 0.000000f, -0.008679f, -0.008992f, 0.016401f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.990458f, -0.136861f, 0.016215f, 0.000000f, 0.134603f, 0.985899f, 0.099424f, 0.000000f, -0.029594f, -0.096292f, 0.994913f, 0.000000f, 0.000437f, 0.007062f, 0.002828f, 1.000000f } },
		{ 70.000000f, { 0.994743f, 0.077528f, 0.066902f, 0.000000f, -0.080790f, 0.995599f, 0.047501f, 0.000000f, -0.062925f, -0.052657f, 0.996628f, 0.000000f, 0.001659f, 0.008742f, 0.001533f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.992960f, -0.106025f, -0.052811f, 0.000000f, 0.106463f, 0.994301f, 0.005546f, 0.000000f, 0.051922f, -0.011129f, 0.998589f, 0.000000f, 0.000486f, 0.002556f, 0.002912f, 1.000000f } },
		{ -70.000000f, { 0.991791f, -0.126424f, -0.019172f, 0.000000f, 0.125945f, 0.991736f, -0.024430f, 0.000000f, 0.022102f, 0.021815f, 0.999518f, 0.000000f, 0.009311f, 0.005016f, 0.001882f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.950763f, 0.299284f, 0.080491f, 0.000000f, -0.302587f, 0.952575f, 0.032280f, 0.000000f, -0.067013f, -0.055046f, 0.996233f, 0.000000f, -0.014607f, 0.003169f, 0.009449f, 1.000000f } },
		{ -35.000000f, { 0.999302f, -0.027121f, 0.025672f, 0.000000f, 0.025352f, 0.997437f, 0.066908f, 0.000000f, -0.027421f, -0.066210f, 0.997429f, 0.000000f, -0.003923f, 0.001084f, 0.001245f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 25.000000f, { 0.985057f, -0.159356f, -0.065325f, 0.000000f, 0.161046f, 0.986714f, 0.021444f, 0.000000f, 0.061040f, -0.031643f, 0.997634f, 0.000000f, 0.002260f, 0.001153f, -0.004134f, 1.000000f } },
		{ 50.000000f, { 0.972639f, -0.216592f, -0.084026f, 0.000000f, 0.217612f, 0.976031f, 0.003058f, 0.000000f, 0.081349f, -0.021259f, 0.996459f, 0.000000f, 0.004013f, 0.002596f, -0.005800f, 1.000000f } },
		{ -50.000000f, { 0.998122f, -0.033762f, 0.051109f, 0.000000f, 0.032993f, 0.999330f, 0.015814f, 0.000000f, -0.051609f, -0.014098f, 0.998568f, 0.000000f, -0.001179f, 0.004187f, 0.003108f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.994066f, 0.102779f, -0.035618f, 0.000000f, -0.101091f, 0.993798f, 0.046321f, 0.000000f, 0.040158f, -0.042445f, 0.998291f, 0.000000f, -0.005323f, 0.005794f, 0.003470f, 1.000000f } },
		{ -70.000000f, { 0.998085f, -0.052678f, -0.032435f, 0.000000f, 0.054794f, 0.996163f, 0.068238f, 0.000000f, 0.028716f, -0.069884f, 0.997142f, 0.000000f, 0.002917f, 0.004568f, 0.003394f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.992671f, 0.105116f, 0.059618f, 0.000000f, -0.105117f, 0.994455f, -0.003126f, 0.000000f, -0.059616f, -0.003164f, 0.998216f, 0.000000f, 0.002009f, 0.000193f, 0.000696f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.981680f, -0.168478f, 0.088994f, 0.000000f, 0.164097f, 0.984938f, 0.054491f, 0.000000f, -0.096834f, -0.038889f, 0.994541f, 0.000000f, 0.006251f, -0.001945f, 0.004461f, 1.000000f } },
		{ -35.000000f, { 0.992207f, -0.032753f, 0.120221f, 0.000000f, 0.005419f, 0.975264f, 0.220977f, 0.000000f, -0.124485f, -0.218603f, 0.967841f, 0.000000f, 0.000545f, 0.007462f, 0.008832f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.982829f, 0.177723f, -0.049608f, 0.000000f, -0.181379f, 0.979915f, -0.082877f, 0.000000f, 0.033883f, 0.090452f, 0.995324f, 0.000000f, 0.021935f, -0.015081f, -0.020000f, 1.000000f } },
		{ -50.000000f, { 0.969939f, -0.219957f, 0.104104f, 0.000000f, 0.227472f, 0.971496f, -0.066722f, 0.000000f, -0.086460f, 0.088397f, 0.992326f, 0.000000f, -0.000927f, -0.007206f, 0.006002f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -35.000000f, { 0.991553f, 0.075381f, 0.105552f, 0.000000f, -0.055177f, 0.981619f, -0.182703f, 0.000000f, -0.117384f, 0.175336f, 0.977486f, 0.000000f, -0.000225f, -0.008435f, 0.005809f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.998181f, 0.016602f, 0.057950f, 0.000000f, -0.021256f, 0.996516f, 0.080646f, 0.000000f, -0.056409f, -0.081731f, 0.995057f, 0.000000f, 0.000965f, 0.006942f, 0.006165f, 1.000000f } },
		{ -50.000000f, { 0.989456f, -0.134884f, -0.052747f, 0.000000f, 0.134605f, 0.990860f, -0.008823f, 0.000000f, 0.053455f, 0.001630f, 0.998569f, 0.000000f, -0.007678f, 0.001424f, 0.000291f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.996697f, 0.080540f, 0.010451f, 0.000000f, -0.081209f, 0.989913f, 0.116093f, 0.000000f, -0.000996f, -0.116558f, 0.993183f, 0.000000f, 0.000747f, 0.009375f, -0.004702f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999763f, -0.016445f, -0.014265f, 0.000000f, 0.015283f, 0.996832f, -0.078051f, 0.000000f, 0.015504f, 0.077815f, 0.996847f, 0.000000f, -0.001168f, -0.006136f, 0.005981f, 1.000000f } },
		{ 70.000000f, { 0.997146f, -0.006824f, -0.075188f, 0.000000f, -0.004370f, 0.989019f, -0.147721f, 0.000000f, 0.075370f, 0.147628f, 0.986167f, 0.000000f, -0.006637f, -0.012453f, 0.017662f, 1.000000f } },
		{ -50.000000f, { 0.997886f, -0.064859f, 0.004111f, 0.000000f, 0.064887f, 0.997867f, -0.007210f, 0.000000f, -0.003635f, 0.007461f, 0.999966f, 0.000000f, -0.001053f, -0.000252f, 0.000906f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.998527f, -0.054178f, -0.002929f, 0.000000f, 0.054169f, 0.998527f, -0.003073f, 0.000000f, 0.003091f, 0.002910f, 0.999991f, 0.000000f, -0.000757f, -0.000321f, 0.000332f, 1.000000f } },
		{ -0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.991671f, -0.032694f, 0.124579f, 0.000000f, 0.059519f, 0.974101f, -0.218139f, 0.000000f, -0.114220f, 0.223737f, 0.967934f, 0.000000f, -0.001392f, 0.004091f, 0.004619f, 1.000000f } },
		{ -35.000000f, { 0.997957f, -0.012987f, 0.062559f, 0.000000f, 0.019990f, 0.993433f, -0.112653f, 0.000000f, -0.060685f, 0.113674f, 0.991663f, 0.000000f, -0.000356f, 0.001672f, 0.003010f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.998825f, 0.013814f, -0.046456f, 0.000000f, -0.009624f, 0.995963f, 0.089245f, 0.000000f, 0.047501f, -0.088693f, 0.994926f, 0.000000f, -0.000382f, -0.000404f, -0.004171f, 1.000000f } },
		{ 70.000000f, { 0.998024f, 0.034654f, -0.052410f, 0.000000f, -0.028087f, 0.992228f, 0.121222f, 0.000000f, 0.056203f, -0.119511f, 0.991241f, 0.000000f, -0.000925f, 0.000183f, -0.008818f, 1.000000f } },
		{ -50.000000f, { 0.719257f, -0.401553f, 0.566943f, 0.000000f, 0.252612f, 0.911349f, 0.325009f, 0.000000f, -0.647191f, -0.090548f, 0.756931f, 0.000000f, -0.005840f, -0.004016f, -0.003420f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.738924f, 0.222166f, -0.636109f, 0.000000f, -0.138297f, 0.973985f, 0.179521f, 0.000000f, 0.659444f, -0.044680f, 0.750425f, 0.000000f, 0.008152f, -0.002224f, -0.002801f, 1.000000f } },
		{ -70.000000f, { 0.765575f, -0.611312f, 0.200482f, 0.000000f, 0.625710f, 0.779977f, -0.011065f, 0.000000f, -0.149607f, 0.133914f, 0.979635f, 0.000000f, -0.009607f, 0.007005f, -0.000963f, 1.000000f } },
		{ -0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.816569f, 0.532370f, -0.223152f, 0.000000f, -0.565213f, 0.815912f, -0.121744f, 0.000000f, 0.117260f, 0.225541f, 0.967151f, 0.000000f, 0.013301f, 0.003324f, 0.001257f, 1.000000f } },
		{ -50.000000f, { 0.996069f, 0.085981f, 0.021325f, 0.000000f, -0.085795f, 0.996267f, -0.009522f, 0.000000f, -0.022064f, 0.007655f, 0.999727f, 0.000000f, 0.001306f, 0.000006f, -0.000310f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.994635f, -0.100677f, -0.023794f, 0.000000f, 0.100417f, 0.994874f, -0.011887f, 0.000000f, 0.024869f, 0.009434f, 0.999646f, 0.000000f, -0.001235f, 0.000287f, 0.000363f, 1.000000f } },
		{ -70.000000f, { 0.997698f, 0.057544f, 0.035874f, 0.000000f, -0.057840f, 0.998299f, 0.007262f, 0.000000f, -0.035395f, -0.009320f, 0.999330f, 0.000000f, 0.002144f, 0.000262f, -0.000218f, 1.000000f } },
		{ -0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.996527f, -0.074528f, -0.037130f, 0.000000f, 0.074507f, 0.997219f, -0.001944f, 0.000000f, 0.037172f, -0.000829f, 0.999309f, 0.000000f, -0.001967f, 0.000326f, -0.000467f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.998684f, 0.051278f, -0.001048f, 0.000000f, -0.051288f, 0.998558f, -0.015838f, 0.000000f, 0.000234f, 0.015871f, 0.999874f, 0.000000f, -0.000529f, -0.000979f, 0.000497f, 1.000000f } },
		{ -100.000000f, { 0.994511f, -0.104593f, 0.002752f, 0.000000f, 0.101028f, 0.966786f, 0.234775f, 0.000000f, -0.027216f, -0.233208f, 0.972046f, 0.000000f, 0.004182f, 0.013421f, 0.009614f, 1.000000f } },
		{ -50.000000f, { 0.998413f, -0.016037f, -0.053977f, 0.000000f, 0.013601f, 0.998885f, -0.045214f, 0.000000f, 0.054642f, 0.044408f, 0.997518f, 0.000000f, -0.000611f, -0.000235f, -0.003587f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 30.000000f, { 0.999105f, 0.011766f, 0.040635f, 0.000000f, -0.015025f, 0.996613f, 0.080854f, 0.000000f, -0.039546f, -0.081392f, 0.995897f, 0.000000f, 0.000462f, 0.003736f, 0.005675f, 1.000000f } },
		{ -70.000000f, { 0.998604f, -0.044803f, 0.027972f, 0.000000f, 0.015428f, 0.753919f, 0.656787f, 0.000000f, -0.050515f, -0.655438f, 0.753557f, 0.000000f, 0.006617f, 0.024445f, 0.039019f, 1.000000f } },
		{ -35.000000f, { 0.999640f, -0.001486f, 0.026777f, 0.000000f, -0.007317f, 0.945468f, 0.325632f, 0.000000f, -0.025801f, -0.325710f, 0.945117f, 0.000000f, 0.002260f, 0.011669f, 0.016264f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999960f, 0.001639f, 0.008841f, 0.000000f, -0.000613f, 0.993378f, -0.114886f, 0.000000f, -0.008971f, 0.114876f, 0.993339f, 0.000000f, 0.001610f, 0.001043f, -0.012347f, 1.000000f } },
		{ 70.000000f, { 0.987202f, -0.089378f, 0.132078f, 0.000000f, 0.109955f, 0.981336f, -0.157767f, 0.000000f, -0.115512f, 0.170270f, 0.978604f, 0.000000f, 0.013339f, -0.001137f, -0.037721f, 1.000000f } },
		{ -50.000000f, { 0.985879f, 0.075763f, -0.149343f, 0.000000f, -0.076629f, 0.997060f, -0.000050f, 0.000000f, 0.148900f, 0.011493f, 0.988785f, 0.000000f, -0.003250f, 0.000272f, 0.002505f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.991297f, -0.018620f, 0.130323f, 0.000000f, 0.019353f, 0.999803f, -0.004357f, 0.000000f, -0.130216f, 0.006841f, 0.991462f, 0.000000f, 0.000053f, -0.000148f, -0.006313f, 1.000000f } },
		{ -70.000000f, { 0.887085f, 0.455488f, -0.074901f, 0.000000f, -0.456734f, 0.889603f, 0.000552f, 0.000000f, 0.066884f, 0.033720f, 0.997191f, 0.000000f, -0.021888f, -0.003063f, -0.001174f, 1.000000f } },
		{ -0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.952033f, -0.304130f, 0.033742f, 0.000000f, 0.300829f, 0.950428f, 0.078669f, 0.000000f, -0.055995f, -0.064745f, 0.996330f, 0.000000f, 0.014316f, 0.008302f, 0.002231f, 1.000000f } },
		{ -70.000000f, { 0.993396f, 0.071603f, -0.089646f, 0.000000f, -0.044920f, 0.961706f, 0.270376f, 0.000000f, 0.105573f, -0.264563f, 0.958572f, 0.000000f, -0.002000f, 0.000396f, 0.005924f, 1.000000f } },
		{ -35.000000f, { 0.998626f, 0.027381f, -0.044687f, 0.000000f, -0.022339f, 0.993718f, 0.109660f, 0.000000f, 0.047409f, -0.108511f, 0.992964f, 0.000000f, -0.000707f, 0.000490f, 0.002375f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999414f, -0.015771f, 0.030385f, 0.000000f, 0.017866f, 0.997392f, -0.069932f, 0.000000f, -0.029203f, 0.070434f, 0.997089f, 0.000000f, 0.000808f, -0.000649f, -0.001078f, 1.000000f } },
		{ 70.000000f, { 0.998288f, -0.038139f, 0.044337f, 0.000000f, 0.043115f, 0.992157f, -0.117329f, 0.000000f, -0.039514f, 0.119039f, 0.992103f, 0.000000f, 0.002471f, -0.001170f, 0.000096f, 1.000000f } },
		{ -50.000000f, { 0.776931f, 0.289988f, -0.558825f, 0.000000f, -0.490831f, 0.834865f, -0.249168f, 0.000000f, 0.394288f, 0.467875f, 0.790968f, 0.000000f, -0.016254f, 0.004307f, -0.018175f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.919206f, -0.028273f, 0.392762f, 0.000000f, 0.042614f, 0.998704f, -0.027840f, 0.000000f, -0.391465f, 0.042328f, 0.919219f, 0.000000f, -0.005082f, -0.002408f, 0.007493f, 1.000000f } },
		{ -70.000000f, { 0.997844f, -0.025623f, -0.060425f, 0.000000f, 0.016517f, 0.989053f, -0.146632f, 0.000000f, 0.063521f, 0.145318f, 0.987344f, 0.000000f, -0.003914f, 0.007461f, -0.002876f, 1.000000f } },
		{ -0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.961048f, 0.095364f, 0.259409f, 0.000000f, -0.132716f, 0.982528f, 0.130483f, 0.000000f, -0.242433f, -0.159828f, 0.956912f, 0.000000f, -0.004446f, -0.000872f, 0.011518f, 1.000000f } },
		{ -70.000000f, { 0.999622f, -0.027027f, -0.005024f, 0.000000f, 0.026717f, 0.998188f, -0.053908f, 0.000000f, 0.006472f, 0.053753f, 0.998533f, 0.000000f, 0.000941f, -0.000173f, -0.000887f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -50.000000f, { 0.995490f, -0.088548f, 0.034042f, 0.000000f, 0.088336f, 0.996061f, 0.007687f, 0.000000f, -0.034589f, -0.004645f, 0.999391f, 0.000000f, 0.003442f, -0.000633f, 0.001284f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.995230f, 0.097557f, -0.000783f, 0.000000f, -0.097537f, 0.994786f, -0.029779f, 0.000000f, -0.002126f, 0.029714f, 0.999556f, 0.000000f, -0.004342f, 0.000933f, -0.000943f, 1.000000f } },
		{ -70.000000f, { 0.998194f, -0.051221f, -0.031390f, 0.000000f, 0.051886f, 0.998438f, 0.020744f, 0.000000f, 0.030278f, -0.022335f, 0.999292f, 0.000000f, 0.001109f, -0.000444f, -0.001123f, 1.000000f } },
		{ -0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.995154f, 0.039588f, 0.090012f, 0.000000f, -0.038683f, 0.999182f, -0.011773f, 0.000000f, -0.090404f, 0.008234f, 0.995871f, 0.000000f, -0.002097f, 0.000210f, 0.000540f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.982282f, -0.094343f, -0.161933f, 0.000000f, 0.108066f, 0.991069f, 0.078123f, 0.000000f, 0.153116f, -0.094238f, 0.983704f, 0.000000f, -0.003462f, 0.002668f, -0.002704f, 1.000000f } },
		{ 70.000000f, { 0.954135f, -0.079553f, -0.288612f, 0.000000f, 0.085686f, 0.996285f, 0.008659f, 0.000000f, 0.286851f, -0.032992f, 0.957407f, 0.000000f, -0.003301f, -0.003344f, -0.002844f, 1.000000f } },
		{ -50.000000f, { 0.993750f, 0.097278f, 0.054752f, 0.000000f, -0.093192f, 0.992983f, -0.072805f, 0.000000f, -0.061450f, 0.067248f, 0.995842f, 0.000000f, 0.001369f, 0.000592f, 0.001417f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.941624f, 0.301838f, -0.149127f, 0.000000f, -0.297566f, 0.953353f, 0.050715f, 0.000000f, 0.157478f, -0.003379f, 0.987517f, 0.000000f, -0.042276f, 0.003563f, -0.002743f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.914310f, -0.301715f, -0.270193f, 0.000000f, 0.311732f, 0.950150f, -0.006127f, 0.000000f, 0.258573f, -0.078626f, 0.962787f, 0.000000f, 0.011736f, -0.007957f, -0.006992f, 1.000000f } },
		{ -100.000000f, { 0.718997f, -0.690140f, -0.082157f, 0.000000f, 0.616682f, 0.578972f, 0.533380f, 0.000000f, -0.320540f, -0.434164f, 0.841877f, 0.000000f, -0.007828f, 0.054580f, 0.047765f, 1.000000f } },
		{ -50.000000f, { 0.986607f, -0.117366f, 0.113281f, 0.000000f, 0.093095f, 0.975409f, 0.199778f, 0.000000f, -0.133942f, -0.186557f, 0.973271f, 0.000000f, -0.001273f, 0.012122f, 0.037994f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 30.000000f, { 0.997928f, -0.031841f, -0.055908f, 0.000000f, 0.020520f, 0.981087f, -0.192476f, 0.000000f, 0.060980f, 0.190930f, 0.979708f, 0.000000f, -0.000739f, 0.001202f, -0.012494f, 1.000000f } },
		{ -70.000000f, { 0.996255f, 0.085567f, 0.012414f, 0.000000f, -0.086442f, 0.988838f, 0.121360f, 0.000000f, -0.001891f, -0.121978f, 0.992531f, 0.000000f, -0.000898f, -0.009055f, 0.004749f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999715f, -0.019024f, -0.014434f, 0.000000f, 0.017810f, 0.996635f, -0.080006f, 0.000000f, 0.015907f, 0.079727f, 0.996690f, 0.000000f, 0.001176f, 0.005920f, -0.006032f, 1.000000f } },
		{ 70.000000f, { 0.997248f, -0.011710f, -0.073205f, 0.000000f, 0.000635f, 0.988760f, -0.149510f, 0.000000f, 0.074133f, 0.149052f, 0.986047f, 0.000000f, 0.006468f, 0.011863f, -0.017817f, 1.000000f } },
		{ -50.000000f, { 0.997936f, -0.064026f, 0.004917f, 0.000000f, 0.064060f, 0.997921f, -0.007138f, 0.000000f, -0.004450f, 0.007438f, 0.999962f, 0.000000f, 0.000853f, 0.000231f, -0.000903f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.991991f, -0.028647f, 0.123013f, 0.000000f, 0.054317f, 0.976037f, -0.210717f, 0.000000f, -0.114029f, 0.215711f, 0.969776f, 0.000000f, 0.001379f, -0.003941f, -0.004534f, 1.000000f } },
		{ -35.000000f, { 0.998019f, -0.011209f, 0.061901f, 0.000000f, 0.017903f, 0.993916f, -0.108675f, 0.000000f, -0.060306f, 0.109568f, 0.992148f, 0.000000f, 0.000366f, -0.001608f, -0.002877f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.998861f, 0.013142f, -0.045859f, 0.000000f, -0.009178f, 0.996287f, 0.085598f, 0.000000f, 0.046814f, -0.085080f, 0.995274f, 0.000000f, 0.000315f, 0.000425f, 0.003884f, 1.000000f } },
		{ 70.000000f, { 0.998089f, 0.033985f, -0.051605f, 0.000000f, -0.027851f, 0.992945f, 0.115258f, 0.000000f, 0.055158f, -0.113600f, 0.991994f, 0.000000f, 0.000775f, -0.000084f, 0.008132f, 1.000000f } },
		{ -50.000000f, { 0.733925f, -0.382642f, 0.561194f, 0.000000f, 0.235264f, 0.918284f, 0.318442f, 0.000000f, -0.637185f, -0.101684f, 0.763974f, 0.000000f, 0.005913f, 0.004044f, 0.003294f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.744167f, 0.202005f, -0.636718f, 0.000000f, -0.126498f, 0.978548f, 0.162609f, 0.000000f, 0.655907f, -0.040465f, 0.753756f, 0.000000f, -0.008073f, 0.002009f, 0.002723f, 1.000000f } },
		{ -70.000000f, { 0.783924f, -0.586628f, 0.203299f, 0.000000f, 0.600854f, 0.799290f, -0.010519f, 0.000000f, -0.156324f, 0.130399f, 0.979060f, 0.000000f, 0.009366f, -0.006586f, 0.000896f, 1.000000f } },
		{ -0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.831002f, 0.511731f, -0.218101f, 0.000000f, -0.544543f, 0.828431f, -0.131055f, 0.000000f, 0.113617f, 0.227672f, 0.967087f, 0.000000f, -0.012831f, -0.003192f, -0.001364f, 1.000000f } },
		{ -50.000000f, { 0.996598f, 0.079885f, 0.020280f, 0.000000f, -0.079672f, 0.996760f, -0.011074f, 0.000000f, -0.021099f, 0.009421f, 0.999733f, 0.000000f, -0.001252f, -0.000025f, 0.000297f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.995412f, -0.092599f, -0.024083f, 0.000000f, 0.092387f, 0.995675f, -0.009756f, 0.000000f, 0.024882f, 0.007486f, 0.999662f, 0.000000f, 0.001141f, -0.000246f, -0.000366f, 1.000000f } },
		{ -70.000000f, { 0.997928f, 0.054534f, 0.034152f, 0.000000f, -0.054804f, 0.998472f, 0.007045f, 0.000000f, -0.033716f, -0.008902f, 0.999392f, 0.000000f, -0.002021f, -0.000247f, 0.000154f, 1.000000f } },
		{ -0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.996755f, -0.071031f, -0.037872f, 0.000000f, 0.071034f, 0.997473f, -0.001274f, 0.000000f, 0.037867f, -0.001420f, 0.999282f, 0.000000f, 0.001821f, -0.000302f, 0.000504f, 1.000000f } },
		{ -100.000000f, { 0.994922f, -0.100605f, 0.002800f, 0.000000f, 0.097243f, 0.968093f, 0.230955f, 0.000000f, -0.025946f, -0.229510f, 0.972960f, 0.000000f, -0.004102f, -0.013361f, -0.009402f, 1.000000f } },
		{ -50.000000f, { 0.998508f, -0.017372f, -0.051775f, 0.000000f, 0.015164f, 0.998971f, -0.042733f, 0.000000f, 0.052464f, 0.041885f, 0.997744f, 0.000000f, 0.000544f, 0.000211f, 0.003334f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 30.000000f, { 0.999153f, 0.009568f, 0.040013f, 0.000000f, -0.012691f, 0.996831f, 0.078527f, 0.000000f, -0.039135f, -0.078968f, 0.996109f, 0.000000f, -0.000542f, -0.003742f, -0.005495f, 1.000000f } },
		{ -70.000000f, { 0.998530f, -0.050528f, 0.019639f, 0.000000f, 0.025088f, 0.751858f, 0.658847f, 0.000000f, -0.048055f, -0.657386f, 0.752020f, 0.000000f, -0.006860f, -0.024341f, -0.038766f, 1.000000f } },
		{ -35.000000f, { 0.999711f, -0.005932f, 0.023289f, 0.000000f, -0.002005f, 0.945098f, 0.326781f, 0.000000f, -0.023949f, -0.326733f, 0.944813f, 0.000000f, -0.002407f, -0.011644f, -0.016161f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999912f, 0.007583f, 0.010897f, 0.000000f, -0.006254f, 0.993082f, -0.117253f, 0.000000f, -0.011711f, 0.117175f, 0.993042f, 0.000000f, -0.001456f, -0.001176f, 0.012273f, 1.000000f } },
		{ 70.000000f, { 0.987799f, -0.079826f, 0.133718f, 0.000000f, 0.101380f, 0.981397f, -0.163042f, 0.000000f, -0.118215f, 0.174609f, 0.977516f, 0.000000f, -0.013090f, 0.001018f, 0.037848f, 1.000000f } },
		{ -50.000000f, { 0.985397f, 0.078808f, -0.150935f, 0.000000f, -0.079508f, 0.996833f, 0.001399f, 0.000000f, 0.150567f, 0.010622f, 0.988543f, 0.000000f, 0.003440f, -0.000313f, -0.002383f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.991183f, -0.021658f, 0.130716f, 0.000000f, 0.022526f, 0.999733f, -0.005163f, 0.000000f, -0.130569f, 0.008062f, 0.991406f, 0.000000f, -0.000157f, 0.000170f, 0.006290f, 1.000000f } },
		{ -70.000000f, { 0.888176f, 0.453890f, -0.071602f, 0.000000f, -0.454950f, 0.890515f, 0.001675f, 0.000000f, 0.064523f, 0.031088f, 0.997432f, 0.000000f, 0.021866f, 0.002922f, 0.001172f, 1.000000f } },
		{ -0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.952313f, -0.303635f, 0.030080f, 0.000000f, 0.300495f, 0.950408f, 0.080169f, 0.000000f, -0.052930f, -0.067307f, 0.996327f, 0.000000f, -0.014201f, -0.008171f, -0.002248f, 1.000000f } },
		{ -70.000000f, { 0.993178f, 0.068563f, -0.094325f, 0.000000f, -0.040734f, 0.961915f, 0.270297f, 0.000000f, 0.109265f, -0.264610f, 0.958145f, 0.000000f, 0.001821f, -0.000268f, -0.005758f, 1.000000f } },
		{ -35.000000f, { 0.998561f, 0.026315f, -0.046730f, 0.000000f, -0.021040f, 0.993708f, 0.110006f, 0.000000f, 0.049331f, -0.108864f, 0.992832f, 0.000000f, 0.000635f, -0.000456f, -0.002335f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.999383f, -0.015477f, 0.031527f, 0.000000f, 0.017667f, 0.997363f, -0.070391f, 0.000000f, -0.030354f, 0.070905f, 0.997021f, 0.000000f, -0.000772f, 0.000633f, 0.001119f, 1.000000f } },
		{ 70.000000f, { 0.998298f, -0.037429f, 0.044728f, 0.000000f, 0.042451f, 0.992201f, -0.117195f, 0.000000f, -0.039993f, 0.118894f, 0.992101f, 0.000000f, -0.002396f, 0.001117f, 0.000065f, 1.000000f } },
		{ -50.000000f, { 0.777046f, 0.289101f, -0.559124f, 0.000000f, -0.488892f, 0.836700f, -0.246816f, 0.000000f, 0.396464f, 0.465139f, 0.791493f, 0.000000f, 0.015716f, -0.004206f, 0.018258f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.914227f, -0.031072f, 0.404008f, 0.000000f, 0.045830f, 0.998587f, -0.026909f, 0.000000f, -0.402601f, 0.043116f, 0.914360f, 0.000000f, 0.005224f, 0.002733f, -0.008315f, 1.000000f } },
		{ -70.000000f, { 0.997177f, -0.037903f, -0.064816f, 0.000000f, 0.028511f, 0.989721f, -0.140139f, 0.000000f, 0.069462f, 0.137895f, 0.988008f, 0.000000f, 0.003489f, -0.007048f, 0.002848f, 1.000000f } },
		{ -0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.959973f, 0.099047f, 0.261995f, 0.000000f, -0.139169f, 0.980425f, 0.139278f, 0.000000f, -0.243071f, -0.170165f, 0.954966f, 0.000000f, 0.004622f, 0.001260f, -0.012228f, 1.000000f } },
		{ -70.000000f, { 0.999611f, -0.027415f, -0.005135f, 0.000000f, 0.027106f, 0.998231f, -0.052914f, 0.000000f, 0.006576f, 0.052755f, 0.998586f, 0.000000f, -0.000972f, 0.000157f, 0.000833f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -50.000000f, { 0.995656f, -0.086424f, 0.034628f, 0.000000f, 0.086180f, 0.996243f, 0.008480f, 0.000000f, -0.035231f, -0.005459f, 0.999364f, 0.000000f, -0.003320f, 0.000639f, -0.001414f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.995649f, 0.093163f, -0.002164f, 0.000000f, -0.093186f, 0.995194f, -0.030078f, 0.000000f, -0.000649f, 0.030148f, 0.999545f, 0.000000f, 0.004164f, -0.000891f, 0.001073f, 1.000000f } },
		{ -70.000000f, { 0.998196f, -0.050516f, -0.032461f, 0.000000f, 0.051194f, 0.998480f, 0.020425f, 0.000000f, 0.031380f, -0.022050f, 0.999264f, 0.000000f, -0.001071f, 0.000445f, 0.001180f, 1.000000f } },
		{ -0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.995141f, 0.039277f, 0.090285f, 0.000000f, -0.038382f, 0.999195f, -0.011633f, 0.000000f, -0.090670f, 0.008111f, 0.995848f, 0.000000f, 0.002116f, -0.000207f, -0.000544f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 50.000000f, { 0.998662f, -0.049005f, -0.016489f, 0.000000f, 0.048078f, 0.997458f, -0.052592f, 0.000000f, 0.019024f, 0.051729f, 0.998480f, 0.000000f, 0.000459f, 0.000674f, 0.000305f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 35.000000f, { 0.982945f, -0.096586f, -0.156492f, 0.000000f, 0.110388f, 0.990498f, 0.082031f, 0.000000f, 0.147082f, -0.097907f, 0.984267f, 0.000000f, 0.003357f, -0.002588f, 0.002895f, 1.000000f } },
		{ 70.000000f, { 0.961683f, -0.070426f, -0.264964f, 0.000000f, 0.069610f, 0.997496f, -0.012481f, 0.000000f, 0.265180f, -0.006441f, 0.964178f, 0.000000f, 0.002550f, 0.003528f, 0.002573f, 1.000000f } },
		{ -50.000000f, { 0.992866f, 0.104616f, 0.057200f, 0.000000f, -0.101715f, 0.993481f, -0.051477f, 0.000000f, -0.062212f, 0.045292f, 0.997035f, 0.000000f, -0.001252f, -0.000985f, -0.001305f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ -70.000000f, { 0.942532f, 0.298536f, -0.150030f, 0.000000f, -0.293745f, 0.954376f, 0.053663f, 0.000000f, 0.159206f, -0.006508f, 0.987224f, 0.000000f, 0.042393f, -0.003625f, 0.002680f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 70.000000f, { 0.914484f, -0.303301f, -0.267819f, 0.000000f, 0.314368f, 0.949300f, -0.001639f, 0.000000f, 0.254738f, -0.082695f, 0.963468f, 0.000000f, -0.011550f, 0.007694f, 0.006986f, 1.000000f } },
		{ -100.000000f, { 0.715323f, -0.693156f, -0.088587f, 0.000000f, 0.622906f, 0.575041f, 0.530392f, 0.000000f, -0.316702f, -0.434583f, 0.843112f, 0.000000f, 0.007989f, -0.054385f, -0.047776f, 1.000000f } },
		{ -50.000000f, { 0.986365f, -0.122616f, 0.109769f, 0.000000f, 0.098148f, 0.973681f, 0.205699f, 0.000000f, -0.132102f, -0.192121f, 0.972440f, 0.000000f, 0.001339f, -0.012103f, -0.037715f, 1.000000f } },
		{ 0.000000f, { 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f } },
		{ 30.000000f, { 0.998057f, -0.028727f, -0.055293f, 0.000000f, 0.017230f, 0.980022f, -0.198142f, 0.000000f, 0.059881f, 0.196805f, 0.978612f, 0.000000f, 0.000764f, -0.001123f, 0.012314f, 1.000000f } },
	};

	OrbisAnim::CommandBlock::ExecuteCommandInterpolateMatrix1DImpl(&hierarchyHeader, &params, s_entries, s_stateData);
}

static void HierarchyParentingCommand_Seg5Cmd2(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0010, 0x14F0 + 3 },	// Child[310]: m_brow_04_bind, Parent[129]: brow_grp
		{ 0x0020, 0x14F0 + 3 },	// Child[311]: l_brow_02_bind, Parent[129]: brow_grp
		{ 0x0030, 0x14F0 + 3 },	// Child[312]: l_brow_04_bind, Parent[129]: brow_grp
		{ 0x0040, 0x14F0 + 3 },	// Child[313]: l_brow_07_bind, Parent[129]: brow_grp
		{ 0x0050, 0x14F0 + 3 },	// Child[314]: l_brow_14_bind, Parent[129]: brow_grp
		{ 0x0060, 0x14F0 + 3 },	// Child[315]: l_brow_21_bind, Parent[129]: brow_grp
		{ 0x0070, 0x14F0 + 3 },	// Child[316]: l_brow_28_bind, Parent[129]: brow_grp
		{ 0x0080, 0x14F0 + 3 },	// Child[317]: l_brow_29_bind, Parent[129]: brow_grp
		{ 0x0090, 0x14F0 + 3 },	// Child[318]: l_brow_31_bind, Parent[129]: brow_grp
		{ 0x00A0, 0x14F0 + 3 },	// Child[319]: l_brow_44_bind, Parent[129]: brow_grp
		{ 0x00B0, 0x14F0 + 3 },	// Child[320]: r_brow_02_bind, Parent[129]: brow_grp
		{ 0x00C0, 0x14F0 + 3 },	// Child[321]: r_brow_04_bind, Parent[129]: brow_grp
		{ 0x00D0, 0x14F0 + 3 },	// Child[322]: r_brow_07_bind, Parent[129]: brow_grp
		{ 0x00E0, 0x14F0 + 3 },	// Child[323]: r_brow_14_bind, Parent[129]: brow_grp
		{ 0x00F0, 0x14F0 + 3 },	// Child[324]: r_brow_21_bind, Parent[129]: brow_grp
		{ 0x0100, 0x14F0 + 3 },	// Child[325]: r_brow_28_bind, Parent[129]: brow_grp
		{ 0x0110, 0x14F0 + 3 },	// Child[326]: r_brow_29_bind, Parent[129]: brow_grp
		{ 0x0120, 0x14F0 + 3 },	// Child[327]: r_brow_31_bind, Parent[129]: brow_grp
		{ 0x0130, 0x14F0 + 3 },	// Child[328]: r_brow_44_bind, Parent[129]: brow_grp
		{ 0x0140, 0x1530 + 3 },	// Child[329]: m_mouth_06_bind, Parent[159]: mouth_grp
		{ 0x0150, 0x1530 + 3 },	// Child[330]: l_mouth_03_bind, Parent[159]: mouth_grp
		{ 0x0160, 0x1530 + 3 },	// Child[331]: l_mouth_09_bind, Parent[159]: mouth_grp
		{ 0x0170, 0x1530 + 3 },	// Child[332]: l_mouth_11_bind, Parent[159]: mouth_grp
		{ 0x0180, 0x1530 + 3 },	// Child[333]: l_mouth_14_bind, Parent[159]: mouth_grp
		{ 0x0190, 0x1530 + 3 },	// Child[334]: l_mouth_15_bind, Parent[159]: mouth_grp
		{ 0x01A0, 0x1530 + 3 },	// Child[335]: l_mouth_18_bind, Parent[159]: mouth_grp
		{ 0x01B0, 0x1530 + 3 },	// Child[336]: l_mouth_19_bind, Parent[159]: mouth_grp
		{ 0x01C0, 0x1530 + 3 },	// Child[337]: l_mouth_22_bind, Parent[159]: mouth_grp
		{ 0x01D0, 0x1530 + 3 },	// Child[338]: l_mouth_23_bind, Parent[159]: mouth_grp
		{ 0x01E0, 0x1530 + 3 },	// Child[339]: l_mouth_25_bind, Parent[159]: mouth_grp
		{ 0x01F0, 0x1530 + 3 },	// Child[340]: l_mouth_30_bind, Parent[159]: mouth_grp
		{ 0x0200, 0x1530 + 3 },	// Child[341]: l_mouth_31_bind, Parent[159]: mouth_grp
		{ 0x0210, 0x1530 + 3 },	// Child[342]: l_mouth_32_bind, Parent[159]: mouth_grp
		{ 0x0220, 0x1530 + 3 },	// Child[343]: l_mouth_33_bind, Parent[159]: mouth_grp
		{ 0x0230, 0x1530 + 3 },	// Child[344]: l_mouth_36_bind, Parent[159]: mouth_grp
		{ 0x0240, 0x1530 + 3 },	// Child[345]: l_mouth_37_bind, Parent[159]: mouth_grp
		{ 0x0250, 0x1530 + 3 },	// Child[346]: l_mouth_40_bind, Parent[159]: mouth_grp
		{ 0x0260, 0x1530 + 3 },	// Child[347]: l_mouth_43_bind, Parent[159]: mouth_grp
		{ 0x0270, 0x1530 + 3 },	// Child[348]: r_mouth_03_bind, Parent[159]: mouth_grp
		{ 0x0280, 0x1530 + 3 },	// Child[349]: r_mouth_09_bind, Parent[159]: mouth_grp
		{ 0x0290, 0x1530 + 3 },	// Child[350]: r_mouth_11_bind, Parent[159]: mouth_grp
		{ 0x02A0, 0x1530 + 3 },	// Child[351]: r_mouth_14_bind, Parent[159]: mouth_grp
		{ 0x02B0, 0x1530 + 3 },	// Child[352]: r_mouth_15_bind, Parent[159]: mouth_grp
		{ 0x02C0, 0x1530 + 3 },	// Child[353]: r_mouth_18_bind, Parent[159]: mouth_grp
		{ 0x02D0, 0x1530 + 3 },	// Child[354]: r_mouth_19_bind, Parent[159]: mouth_grp
		{ 0x02E0, 0x1530 + 3 },	// Child[355]: r_mouth_22_bind, Parent[159]: mouth_grp
		{ 0x02F0, 0x1530 + 3 },	// Child[356]: r_mouth_23_bind, Parent[159]: mouth_grp
		{ 0x0300, 0x1530 + 3 },	// Child[357]: r_mouth_25_bind, Parent[159]: mouth_grp
		{ 0x0310, 0x1530 + 3 },	// Child[358]: r_mouth_30_bind, Parent[159]: mouth_grp
		{ 0x0320, 0x1530 + 3 },	// Child[359]: r_mouth_31_bind, Parent[159]: mouth_grp
		{ 0x0330, 0x1530 + 3 },	// Child[360]: r_mouth_32_bind, Parent[159]: mouth_grp
		{ 0x0340, 0x1530 + 3 },	// Child[361]: r_mouth_33_bind, Parent[159]: mouth_grp
		{ 0x0350, 0x1530 + 3 },	// Child[362]: r_mouth_36_bind, Parent[159]: mouth_grp
		{ 0x0360, 0x1530 + 3 },	// Child[363]: r_mouth_37_bind, Parent[159]: mouth_grp
		{ 0x0370, 0x1530 + 3 },	// Child[364]: r_mouth_40_bind, Parent[159]: mouth_grp
		{ 0x0380, 0x1530 + 3 }	// Child[365]: r_mouth_43_bind, Parent[159]: mouth_grp
	};

	OrbisAnim_Parenting(14, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

// head_helper_pose_01_mm
static void NdiMultMatrixCommand_Seg5Cmd3(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		18,
		0,
		OrbisAnim::Location(0x0002)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.040570f, -0.054850f, 0.043415f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x0042),
		OrbisAnim::Location(0x0082),
		OrbisAnim::Location(0x00C2),
		OrbisAnim::Location(0x0102),
		OrbisAnim::Location(0x0142),
		OrbisAnim::Location(0x0182),
		OrbisAnim::Location(0x01C2),
		OrbisAnim::Location(0x0202),
		OrbisAnim::Location(0x0242),
		OrbisAnim::Location(0x0282),
		OrbisAnim::Location(0x02C2),
		OrbisAnim::Location(0x0302),
		OrbisAnim::Location(0x0342),
		OrbisAnim::Location(0x0382),
		OrbisAnim::Location(0x03C2),
		OrbisAnim::Location(0x0402),
		OrbisAnim::Location(0x0442),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// head_helper_pose_02_mm
static void NdiMultMatrixCommand_Seg5Cmd4(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		15,
		0,
		OrbisAnim::Location(0x0482)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.040570f, -0.054850f, 0.043415f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x04C2),
		OrbisAnim::Location(0x0502),
		OrbisAnim::Location(0x0542),
		OrbisAnim::Location(0x0582),
		OrbisAnim::Location(0x05C2),
		OrbisAnim::Location(0x0602),
		OrbisAnim::Location(0x0642),
		OrbisAnim::Location(0x0682),
		OrbisAnim::Location(0x06C2),
		OrbisAnim::Location(0x0702),
		OrbisAnim::Location(0x0742),
		OrbisAnim::Location(0x0782),
		OrbisAnim::Location(0x07C2),
		OrbisAnim::Location(0x0802),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_wrist_helper_pose_02_mm
static void NdiMultMatrixCommand_Seg5Cmd5(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		8,
		0,
		OrbisAnim::Location(0x0842)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		-0.000000f, 1.000000f, 0.000000f, 0.000000f,
		-0.000000f, -0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.003516f, -0.034394f, 0.027728f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x0882),
		OrbisAnim::Location(0x08C2),
		OrbisAnim::Location(0x0902),
		OrbisAnim::Location(0x0942),
		OrbisAnim::Location(0x0982),
		OrbisAnim::Location(0x09C2),
		OrbisAnim::Location(0x0A02),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_wrist_helper_pose_01_mm
static void NdiMultMatrixCommand_Seg5Cmd6(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x0A42)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.005717f, 0.018039f, 0.024116f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x0A82),
		OrbisAnim::Location(0x0AC2),
		OrbisAnim::Location(0x0B02),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_elbow_helper_weighted_01_pose_01_mm
static void NdiMultMatrixCommand_Seg5Cmd7(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		6,
		0,
		OrbisAnim::Location(0x0B42)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, -0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		-0.000000f, -0.000000f, 1.000000f, 0.000000f,
		-0.000000f, 0.000000f, -0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.003442f, -0.044731f, -0.011798f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x0B82),
		OrbisAnim::Location(0x0BC2),
		OrbisAnim::Location(0x0C02),
		OrbisAnim::Location(0x0C42),
		OrbisAnim::Location(0x0C82),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_shoulder_helperBend_pose_03_mm
static void NdiMultMatrixCommand_Seg5Cmd8(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		14,
		0,
		OrbisAnim::Location(0x0CC2)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.048422f, 0.074019f, -0.004183f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x0D02),
		OrbisAnim::Location(0x0D42),
		OrbisAnim::Location(0x0D82),
		OrbisAnim::Location(0x0DC2),
		OrbisAnim::Location(0x0E02),
		OrbisAnim::Location(0x0E42),
		OrbisAnim::Location(0x0E82),
		OrbisAnim::Location(0x0EC2),
		OrbisAnim::Location(0x0F02),
		OrbisAnim::Location(0x0F42),
		OrbisAnim::Location(0x0F82),
		OrbisAnim::Location(0x0FC2),
		OrbisAnim::Location(0x1002),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_wrist_helper_pose_01_mm
static void NdiMultMatrixCommand_Seg5Cmd9(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		4,
		0,
		OrbisAnim::Location(0x1042)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, -0.000000f, 0.000000f,
		-0.000000f, 1.000000f, -0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, -0.000000f, -0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.005717f, -0.018039f, -0.024116f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x1082),
		OrbisAnim::Location(0x10C2),
		OrbisAnim::Location(0x1102),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_wrist_helper_pose_02_mm
static void NdiMultMatrixCommand_Seg5Cmd10(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		8,
		0,
		OrbisAnim::Location(0x1142)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, -0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, -0.000000f, 0.000000f,
		-0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.000000f, 0.000000f, -0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		-0.000000f, 1.000000f, 0.000000f, 0.000000f,
		-0.000000f, -0.000000f, 1.000000f, 0.000000f,
		-0.000000f, -0.000000f, -0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.003516f, 0.034394f, -0.027728f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x1182),
		OrbisAnim::Location(0x11C2),
		OrbisAnim::Location(0x1202),
		OrbisAnim::Location(0x1242),
		OrbisAnim::Location(0x1282),
		OrbisAnim::Location(0x12C2),
		OrbisAnim::Location(0x1302),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_elbow_helper_weighted_01_pose_01_mm
static void NdiMultMatrixCommand_Seg5Cmd11(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		6,
		0,
		OrbisAnim::Location(0x1342)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, -0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		-0.000000f, -0.000000f, 1.000000f, 0.000000f,
		0.000000f, -0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.003442f, 0.044731f, 0.011798f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x1382),
		OrbisAnim::Location(0x13C2),
		OrbisAnim::Location(0x1402),
		OrbisAnim::Location(0x1442),
		OrbisAnim::Location(0x1482),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_shoulder_helperBend_pose_03_mm
static void NdiMultMatrixCommand_Seg5Cmd12(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		14,
		0,
		OrbisAnim::Location(0x14C2)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.048422f, -0.074019f, 0.004183f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x1502),
		OrbisAnim::Location(0x1542),
		OrbisAnim::Location(0x1582),
		OrbisAnim::Location(0x15C2),
		OrbisAnim::Location(0x1602),
		OrbisAnim::Location(0x1642),
		OrbisAnim::Location(0x1682),
		OrbisAnim::Location(0x16C2),
		OrbisAnim::Location(0x1702),
		OrbisAnim::Location(0x1742),
		OrbisAnim::Location(0x1782),
		OrbisAnim::Location(0x17C2),
		OrbisAnim::Location(0x1802),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// spine_d_helper_pose_01_mm
static void NdiMultMatrixCommand_Seg5Cmd13(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		25,
		0,
		OrbisAnim::Location(0x1842)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.050341f, 0.058440f, 0.054079f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x1882),
		OrbisAnim::Location(0x18C2),
		OrbisAnim::Location(0x1902),
		OrbisAnim::Location(0x1942),
		OrbisAnim::Location(0x1982),
		OrbisAnim::Location(0x19C2),
		OrbisAnim::Location(0x1A02),
		OrbisAnim::Location(0x1A42),
		OrbisAnim::Location(0x1A82),
		OrbisAnim::Location(0x1AC2),
		OrbisAnim::Location(0x1B02),
		OrbisAnim::Location(0x1B42),
		OrbisAnim::Location(0x1B82),
		OrbisAnim::Location(0x1BC2),
		OrbisAnim::Location(0x1C02),
		OrbisAnim::Location(0x1C42),
		OrbisAnim::Location(0x1C82),
		OrbisAnim::Location(0x1CC2),
		OrbisAnim::Location(0x1D02),
		OrbisAnim::Location(0x1D42),
		OrbisAnim::Location(0x1D82),
		OrbisAnim::Location(0x1DC2),
		OrbisAnim::Location(0x1E02),
		OrbisAnim::Location(0x1E42),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// spine_d_helper_pose_02_mm
static void NdiMultMatrixCommand_Seg5Cmd14(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		24,
		0,
		OrbisAnim::Location(0x1E82)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.050341f, 0.058440f, 0.054079f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x1EC2),
		OrbisAnim::Location(0x1F02),
		OrbisAnim::Location(0x1F42),
		OrbisAnim::Location(0x1F82),
		OrbisAnim::Location(0x1FC2),
		OrbisAnim::Location(0x2002),
		OrbisAnim::Location(0x2042),
		OrbisAnim::Location(0x2082),
		OrbisAnim::Location(0x20C2),
		OrbisAnim::Location(0x2102),
		OrbisAnim::Location(0x2142),
		OrbisAnim::Location(0x2182),
		OrbisAnim::Location(0x21C2),
		OrbisAnim::Location(0x2202),
		OrbisAnim::Location(0x2242),
		OrbisAnim::Location(0x2282),
		OrbisAnim::Location(0x22C2),
		OrbisAnim::Location(0x2302),
		OrbisAnim::Location(0x2342),
		OrbisAnim::Location(0x2382),
		OrbisAnim::Location(0x23C2),
		OrbisAnim::Location(0x2402),
		OrbisAnim::Location(0x2442),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_upAnkle_helper_pose_01_mm
static void NdiMultMatrixCommand_Seg5Cmd15(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		9,
		0,
		OrbisAnim::Location(0x2482)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, -0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, -0.000000f, 0.000000f,
		-0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.000000f, 0.000000f, -0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.007121f, -0.020979f, 0.028957f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x24C2),
		OrbisAnim::Location(0x2502),
		OrbisAnim::Location(0x2542),
		OrbisAnim::Location(0x2582),
		OrbisAnim::Location(0x25C2),
		OrbisAnim::Location(0x2602),
		OrbisAnim::Location(0x2642),
		OrbisAnim::Location(0x2682),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_upAnkle_helper_pose_02_mm
static void NdiMultMatrixCommand_Seg5Cmd16(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		12,
		0,
		OrbisAnim::Location(0x26C2)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, -0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		-0.000000f, -0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, -0.000000f, -0.000000f, 0.000000f,
		0.000000f, 1.000000f, -0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.000000f, 0.000000f, -0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.006391f, 0.040609f, 0.002274f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x2702),
		OrbisAnim::Location(0x2742),
		OrbisAnim::Location(0x2782),
		OrbisAnim::Location(0x27C2),
		OrbisAnim::Location(0x2802),
		OrbisAnim::Location(0x2842),
		OrbisAnim::Location(0x2882),
		OrbisAnim::Location(0x28C2),
		OrbisAnim::Location(0x2902),
		OrbisAnim::Location(0x2942),
		OrbisAnim::Location(0x2982),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// l_knee_helper_weighted_01_pose_02_mm
static void NdiMultMatrixCommand_Seg5Cmd17(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		5,
		0,
		OrbisAnim::Location(0x29C2)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.030592f, 0.087459f, 0.020365f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x2A02),
		OrbisAnim::Location(0x2A42),
		OrbisAnim::Location(0x2A82),
		OrbisAnim::Location(0x2AC2),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_upAnkle_helper_pose_01_mm
static void NdiMultMatrixCommand_Seg5Cmd18(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		8,
		0,
		OrbisAnim::Location(0x2B02)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, -0.000000f, 0.000000f,
		-0.000000f, 1.000000f, -0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.000000f, -0.000000f, -0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.007121f, 0.020979f, -0.028957f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x2B42),
		OrbisAnim::Location(0x2B82),
		OrbisAnim::Location(0x2BC2),
		OrbisAnim::Location(0x2C02),
		OrbisAnim::Location(0x2C42),
		OrbisAnim::Location(0x2C82),
		OrbisAnim::Location(0x2CC2),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_upAnkle_helper_pose_02_mm
static void NdiMultMatrixCommand_Seg5Cmd19(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		11,
		0,
		OrbisAnim::Location(0x2D02)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		-0.000000f, 1.000000f, 0.000000f, 0.000000f,
		-0.000000f, -0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, -0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.006391f, -0.040609f, -0.002274f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x2D42),
		OrbisAnim::Location(0x2D82),
		OrbisAnim::Location(0x2DC2),
		OrbisAnim::Location(0x2E02),
		OrbisAnim::Location(0x2E42),
		OrbisAnim::Location(0x2E82),
		OrbisAnim::Location(0x2EC2),
		OrbisAnim::Location(0x2F02),
		OrbisAnim::Location(0x2F42),
		OrbisAnim::Location(0x2F82),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// r_knee_helper_weighted_01_pose_02_mm
static void NdiMultMatrixCommand_Seg5Cmd20(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::MultMatrixParams params = {
		0x11BF67,
		6,
		0,
		OrbisAnim::Location(0x2FC2)
	};

	static CONST_EXPR float defaultValues[] = {
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f,
		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		-0.030592f, -0.087459f, -0.020365f, 1.000000f,
	};

	static CONST_EXPR OrbisAnim::Location inputLocs[] = {
		OrbisAnim::Location(0x3002),
		OrbisAnim::Location(0x3042),
		OrbisAnim::Location(0x3082),
		OrbisAnim::Location(0x30C2),
		OrbisAnim::Location(0x3102),
		OrbisAnim::Location(0xFFFFFFFF),
	};

	static CONST_EXPR U8 invertMat[] = {
		0,0,0,0,0,0,
	};

	static CONST_EXPR U8 dataFormat[] = {
		3,3,3,3,3,0,
	};

	OrbisAnim::CommandBlock::ExecuteCommandMultMatrixImpl(&hierarchyHeader, &params, defaultValues, inputLocs, invertMat, dataFormat);
}

// head_helper_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg5Cmd21(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0002),
		{
			OrbisAnim::Location(0x321A),
			OrbisAnim::Location(0x321E),
			OrbisAnim::Location(0x3222),
		},
		{
			OrbisAnim::Location(0x3226),
			OrbisAnim::Location(0x322A),
			OrbisAnim::Location(0x322E),
		},
		{
			OrbisAnim::Location(0x3232),
			OrbisAnim::Location(0x3236),
			OrbisAnim::Location(0x323A)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// head_helper_pose_02_decMat
static void NdiDecomposeMatrixCommand_Seg5Cmd22(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0482),
		{
			OrbisAnim::Location(0x323E),
			OrbisAnim::Location(0x3242),
			OrbisAnim::Location(0x3246),
		},
		{
			OrbisAnim::Location(0x324A),
			OrbisAnim::Location(0x324E),
			OrbisAnim::Location(0x3252),
		},
		{
			OrbisAnim::Location(0x3256),
			OrbisAnim::Location(0x325A),
			OrbisAnim::Location(0x325E)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_wrist_helper_pose_02_decMat
static void NdiDecomposeMatrixCommand_Seg5Cmd23(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0842),
		{
			OrbisAnim::Location(0x3262),
			OrbisAnim::Location(0x3266),
			OrbisAnim::Location(0x326A),
		},
		{
			OrbisAnim::Location(0x326E),
			OrbisAnim::Location(0x3272),
			OrbisAnim::Location(0x3276),
		},
		{
			OrbisAnim::Location(0x327A),
			OrbisAnim::Location(0x327E),
			OrbisAnim::Location(0x3282)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_wrist_helper_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg5Cmd24(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0A42),
		{
			OrbisAnim::Location(0x3286),
			OrbisAnim::Location(0x328A),
			OrbisAnim::Location(0x328E),
		},
		{
			OrbisAnim::Location(0x3292),
			OrbisAnim::Location(0x3296),
			OrbisAnim::Location(0x329A),
		},
		{
			OrbisAnim::Location(0x329E),
			OrbisAnim::Location(0x32A2),
			OrbisAnim::Location(0x32A6)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_elbow_helper_weighted_01_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg5Cmd25(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0B42),
		{
			OrbisAnim::Location(0x32AA),
			OrbisAnim::Location(0x32AE),
			OrbisAnim::Location(0x32B2),
		},
		{
			OrbisAnim::Location(0x32B6),
			OrbisAnim::Location(0x32BA),
			OrbisAnim::Location(0x32BE),
		},
		{
			OrbisAnim::Location(0x32C2),
			OrbisAnim::Location(0x32C6),
			OrbisAnim::Location(0x32CA)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_shoulder_helperBend_pose_03_decMat
static void NdiDecomposeMatrixCommand_Seg5Cmd26(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x0CC2),
		{
			OrbisAnim::Location(0x32CE),
			OrbisAnim::Location(0x32D2),
			OrbisAnim::Location(0x32D6),
		},
		{
			OrbisAnim::Location(0x32DA),
			OrbisAnim::Location(0x32DE),
			OrbisAnim::Location(0x32E2),
		},
		{
			OrbisAnim::Location(0x32E6),
			OrbisAnim::Location(0x32EA),
			OrbisAnim::Location(0x32EE)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_wrist_helper_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg5Cmd27(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x1042),
		{
			OrbisAnim::Location(0x32F2),
			OrbisAnim::Location(0x32F6),
			OrbisAnim::Location(0x32FA),
		},
		{
			OrbisAnim::Location(0x32FE),
			OrbisAnim::Location(0x3302),
			OrbisAnim::Location(0x3306),
		},
		{
			OrbisAnim::Location(0x330A),
			OrbisAnim::Location(0x330E),
			OrbisAnim::Location(0x3312)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_wrist_helper_pose_02_decMat
static void NdiDecomposeMatrixCommand_Seg5Cmd28(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x1142),
		{
			OrbisAnim::Location(0x3316),
			OrbisAnim::Location(0x331A),
			OrbisAnim::Location(0x331E),
		},
		{
			OrbisAnim::Location(0x3322),
			OrbisAnim::Location(0x3326),
			OrbisAnim::Location(0x332A),
		},
		{
			OrbisAnim::Location(0x332E),
			OrbisAnim::Location(0x3332),
			OrbisAnim::Location(0x3336)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_elbow_helper_weighted_01_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg5Cmd29(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x1342),
		{
			OrbisAnim::Location(0x333A),
			OrbisAnim::Location(0x333E),
			OrbisAnim::Location(0x3342),
		},
		{
			OrbisAnim::Location(0x3346),
			OrbisAnim::Location(0x334A),
			OrbisAnim::Location(0x334E),
		},
		{
			OrbisAnim::Location(0x3352),
			OrbisAnim::Location(0x3356),
			OrbisAnim::Location(0x335A)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_shoulder_helperBend_pose_03_decMat
static void NdiDecomposeMatrixCommand_Seg5Cmd30(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x14C2),
		{
			OrbisAnim::Location(0x335E),
			OrbisAnim::Location(0x3362),
			OrbisAnim::Location(0x3366),
		},
		{
			OrbisAnim::Location(0x336A),
			OrbisAnim::Location(0x336E),
			OrbisAnim::Location(0x3372),
		},
		{
			OrbisAnim::Location(0x3376),
			OrbisAnim::Location(0x337A),
			OrbisAnim::Location(0x337E)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// spine_d_helper_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg5Cmd31(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x1842),
		{
			OrbisAnim::Location(0x3382),
			OrbisAnim::Location(0x3386),
			OrbisAnim::Location(0x338A),
		},
		{
			OrbisAnim::Location(0x338E),
			OrbisAnim::Location(0x3392),
			OrbisAnim::Location(0x3396),
		},
		{
			OrbisAnim::Location(0x339A),
			OrbisAnim::Location(0x339E),
			OrbisAnim::Location(0x33A2)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// spine_d_helper_pose_02_decMat
static void NdiDecomposeMatrixCommand_Seg5Cmd32(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x1E82),
		{
			OrbisAnim::Location(0x33A6),
			OrbisAnim::Location(0x33AA),
			OrbisAnim::Location(0x33AE),
		},
		{
			OrbisAnim::Location(0x33B2),
			OrbisAnim::Location(0x33B6),
			OrbisAnim::Location(0x33BA),
		},
		{
			OrbisAnim::Location(0x33BE),
			OrbisAnim::Location(0x33C2),
			OrbisAnim::Location(0x33C6)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_upAnkle_helper_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg5Cmd33(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x2482),
		{
			OrbisAnim::Location(0x33CA),
			OrbisAnim::Location(0x33CE),
			OrbisAnim::Location(0x33D2),
		},
		{
			OrbisAnim::Location(0x33D6),
			OrbisAnim::Location(0x33DA),
			OrbisAnim::Location(0x33DE),
		},
		{
			OrbisAnim::Location(0x33E2),
			OrbisAnim::Location(0x33E6),
			OrbisAnim::Location(0x33EA)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_upAnkle_helper_pose_02_decMat
static void NdiDecomposeMatrixCommand_Seg5Cmd34(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x26C2),
		{
			OrbisAnim::Location(0x33EE),
			OrbisAnim::Location(0x33F2),
			OrbisAnim::Location(0x33F6),
		},
		{
			OrbisAnim::Location(0x33FA),
			OrbisAnim::Location(0x33FE),
			OrbisAnim::Location(0x3402),
		},
		{
			OrbisAnim::Location(0x3406),
			OrbisAnim::Location(0x340A),
			OrbisAnim::Location(0x340E)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// l_knee_helper_weighted_01_pose_02_decMat
static void NdiDecomposeMatrixCommand_Seg5Cmd35(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x29C2),
		{
			OrbisAnim::Location(0x3412),
			OrbisAnim::Location(0x3416),
			OrbisAnim::Location(0x341A),
		},
		{
			OrbisAnim::Location(0x341E),
			OrbisAnim::Location(0x3422),
			OrbisAnim::Location(0x3426),
		},
		{
			OrbisAnim::Location(0x342A),
			OrbisAnim::Location(0x342E),
			OrbisAnim::Location(0x3432)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_upAnkle_helper_pose_01_decMat
static void NdiDecomposeMatrixCommand_Seg5Cmd36(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x2B02),
		{
			OrbisAnim::Location(0x3436),
			OrbisAnim::Location(0x343A),
			OrbisAnim::Location(0x343E),
		},
		{
			OrbisAnim::Location(0x3442),
			OrbisAnim::Location(0x3446),
			OrbisAnim::Location(0x344A),
		},
		{
			OrbisAnim::Location(0x344E),
			OrbisAnim::Location(0x3452),
			OrbisAnim::Location(0x3456)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_upAnkle_helper_pose_02_decMat
static void NdiDecomposeMatrixCommand_Seg5Cmd37(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x2D02),
		{
			OrbisAnim::Location(0x345A),
			OrbisAnim::Location(0x345E),
			OrbisAnim::Location(0x3462),
		},
		{
			OrbisAnim::Location(0x3466),
			OrbisAnim::Location(0x346A),
			OrbisAnim::Location(0x346E),
		},
		{
			OrbisAnim::Location(0x3472),
			OrbisAnim::Location(0x3476),
			OrbisAnim::Location(0x347A)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

// r_knee_helper_weighted_01_pose_02_decMat
static void NdiDecomposeMatrixCommand_Seg5Cmd38(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	static CONST_EXPR OrbisAnim::CommandBlock::DecomposeMatrixParams params = {
		0x11BF71,
		0,
		{ 0.000000f, 0.000000f, 0.000000f },
		OrbisAnim::Location(0x2FC2),
		{
			OrbisAnim::Location(0x347E),
			OrbisAnim::Location(0x3482),
			OrbisAnim::Location(0x3486),
		},
		{
			OrbisAnim::Location(0x348A),
			OrbisAnim::Location(0x348E),
			OrbisAnim::Location(0x3492),
		},
		{
			OrbisAnim::Location(0x3496),
			OrbisAnim::Location(0x349A),
			OrbisAnim::Location(0x349E)
		}
	};

	OrbisAnim::CommandBlock::ExecuteCommandDecomposeMatrixImpl(&hierarchyHeader, &params);
}

static void HierarchyCopyCommand_Seg5Cmd39(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	ORBISANIM_MARKER_SCOPED("Copy", OrbisAnim::Perf::kYellow);
	*(float*)(locJointParams + 0x0AA0) = *(float*)(locSdkScalarTable + 0x3218);
	*(float*)(locJointParams + 0x0AA4) = *(float*)(locSdkScalarTable + 0x321C);
	*(float*)(locJointParams + 0x0AA8) = *(float*)(locSdkScalarTable + 0x3220);
	*(float*)(locSdkScalarTable + 0x3140) = *(float*)(locSdkScalarTable + 0x3224);
	*(float*)(locSdkScalarTable + 0x3188) = *(float*)(locSdkScalarTable + 0x3228);
	*(float*)(locSdkScalarTable + 0x31D0) = *(float*)(locSdkScalarTable + 0x322C);
	*(float*)(locJointParams + 0x0A80) = *(float*)(locSdkScalarTable + 0x3230);
	*(float*)(locJointParams + 0x0A84) = *(float*)(locSdkScalarTable + 0x3234);
	*(float*)(locJointParams + 0x0A88) = *(float*)(locSdkScalarTable + 0x3238);
	*(float*)(locJointParams + 0x0AD0) = *(float*)(locSdkScalarTable + 0x323C);
	*(float*)(locJointParams + 0x0AD4) = *(float*)(locSdkScalarTable + 0x3240);
	*(float*)(locJointParams + 0x0AD8) = *(float*)(locSdkScalarTable + 0x3244);
	*(float*)(locSdkScalarTable + 0x3144) = *(float*)(locSdkScalarTable + 0x3248);
	*(float*)(locSdkScalarTable + 0x318C) = *(float*)(locSdkScalarTable + 0x324C);
	*(float*)(locSdkScalarTable + 0x31D4) = *(float*)(locSdkScalarTable + 0x3250);
	*(float*)(locJointParams + 0x0AB0) = *(float*)(locSdkScalarTable + 0x3254);
	*(float*)(locJointParams + 0x0AB4) = *(float*)(locSdkScalarTable + 0x3258);
	*(float*)(locJointParams + 0x0AB8) = *(float*)(locSdkScalarTable + 0x325C);
	*(float*)(locJointParams + 0x0B00) = *(float*)(locSdkScalarTable + 0x3260);
	*(float*)(locJointParams + 0x0B04) = *(float*)(locSdkScalarTable + 0x3264);
	*(float*)(locJointParams + 0x0B08) = *(float*)(locSdkScalarTable + 0x3268);
	*(float*)(locSdkScalarTable + 0x3148) = *(float*)(locSdkScalarTable + 0x326C);
	*(float*)(locSdkScalarTable + 0x3190) = *(float*)(locSdkScalarTable + 0x3270);
	*(float*)(locSdkScalarTable + 0x31D8) = *(float*)(locSdkScalarTable + 0x3274);
	*(float*)(locJointParams + 0x0AE0) = *(float*)(locSdkScalarTable + 0x3278);
	*(float*)(locJointParams + 0x0AE4) = *(float*)(locSdkScalarTable + 0x327C);
	*(float*)(locJointParams + 0x0AE8) = *(float*)(locSdkScalarTable + 0x3280);
	*(float*)(locJointParams + 0x0B30) = *(float*)(locSdkScalarTable + 0x3284);
	*(float*)(locJointParams + 0x0B34) = *(float*)(locSdkScalarTable + 0x3288);
	*(float*)(locJointParams + 0x0B38) = *(float*)(locSdkScalarTable + 0x328C);
	*(float*)(locSdkScalarTable + 0x314C) = *(float*)(locSdkScalarTable + 0x3290);
	*(float*)(locSdkScalarTable + 0x3194) = *(float*)(locSdkScalarTable + 0x3294);
	*(float*)(locSdkScalarTable + 0x31DC) = *(float*)(locSdkScalarTable + 0x3298);
	*(float*)(locJointParams + 0x0B10) = *(float*)(locSdkScalarTable + 0x329C);
	*(float*)(locJointParams + 0x0B14) = *(float*)(locSdkScalarTable + 0x32A0);
	*(float*)(locJointParams + 0x0B18) = *(float*)(locSdkScalarTable + 0x32A4);
	*(float*)(locJointParams + 0x0B60) = *(float*)(locSdkScalarTable + 0x32A8);
	*(float*)(locJointParams + 0x0B64) = *(float*)(locSdkScalarTable + 0x32AC);
	*(float*)(locJointParams + 0x0B68) = *(float*)(locSdkScalarTable + 0x32B0);
	*(float*)(locSdkScalarTable + 0x3150) = *(float*)(locSdkScalarTable + 0x32B4);
	*(float*)(locSdkScalarTable + 0x3198) = *(float*)(locSdkScalarTable + 0x32B8);
	*(float*)(locSdkScalarTable + 0x31E0) = *(float*)(locSdkScalarTable + 0x32BC);
	*(float*)(locJointParams + 0x0B40) = *(float*)(locSdkScalarTable + 0x32C0);
	*(float*)(locJointParams + 0x0B44) = *(float*)(locSdkScalarTable + 0x32C4);
	*(float*)(locJointParams + 0x0B48) = *(float*)(locSdkScalarTable + 0x32C8);
	*(float*)(locJointParams + 0x0B90) = *(float*)(locSdkScalarTable + 0x32CC);
	*(float*)(locJointParams + 0x0B94) = *(float*)(locSdkScalarTable + 0x32D0);
	*(float*)(locJointParams + 0x0B98) = *(float*)(locSdkScalarTable + 0x32D4);
	*(float*)(locSdkScalarTable + 0x3154) = *(float*)(locSdkScalarTable + 0x32D8);
	*(float*)(locSdkScalarTable + 0x319C) = *(float*)(locSdkScalarTable + 0x32DC);
	*(float*)(locSdkScalarTable + 0x31E4) = *(float*)(locSdkScalarTable + 0x32E0);
	*(float*)(locJointParams + 0x0B70) = *(float*)(locSdkScalarTable + 0x32E4);
	*(float*)(locJointParams + 0x0B74) = *(float*)(locSdkScalarTable + 0x32E8);
	*(float*)(locJointParams + 0x0B78) = *(float*)(locSdkScalarTable + 0x32EC);
	*(float*)(locJointParams + 0x0BC0) = *(float*)(locSdkScalarTable + 0x32F0);
	*(float*)(locJointParams + 0x0BC4) = *(float*)(locSdkScalarTable + 0x32F4);
	*(float*)(locJointParams + 0x0BC8) = *(float*)(locSdkScalarTable + 0x32F8);
	*(float*)(locSdkScalarTable + 0x3158) = *(float*)(locSdkScalarTable + 0x32FC);
	*(float*)(locSdkScalarTable + 0x31A0) = *(float*)(locSdkScalarTable + 0x3300);
	*(float*)(locSdkScalarTable + 0x31E8) = *(float*)(locSdkScalarTable + 0x3304);
	*(float*)(locJointParams + 0x0BA0) = *(float*)(locSdkScalarTable + 0x3308);
	*(float*)(locJointParams + 0x0BA4) = *(float*)(locSdkScalarTable + 0x330C);
	*(float*)(locJointParams + 0x0BA8) = *(float*)(locSdkScalarTable + 0x3310);
	*(float*)(locJointParams + 0x0BF0) = *(float*)(locSdkScalarTable + 0x3314);
	*(float*)(locJointParams + 0x0BF4) = *(float*)(locSdkScalarTable + 0x3318);
	*(float*)(locJointParams + 0x0BF8) = *(float*)(locSdkScalarTable + 0x331C);
	*(float*)(locSdkScalarTable + 0x315C) = *(float*)(locSdkScalarTable + 0x3320);
	*(float*)(locSdkScalarTable + 0x31A4) = *(float*)(locSdkScalarTable + 0x3324);
	*(float*)(locSdkScalarTable + 0x31EC) = *(float*)(locSdkScalarTable + 0x3328);
	*(float*)(locJointParams + 0x0BD0) = *(float*)(locSdkScalarTable + 0x332C);
	*(float*)(locJointParams + 0x0BD4) = *(float*)(locSdkScalarTable + 0x3330);
	*(float*)(locJointParams + 0x0BD8) = *(float*)(locSdkScalarTable + 0x3334);
	*(float*)(locJointParams + 0x0C20) = *(float*)(locSdkScalarTable + 0x3338);
	*(float*)(locJointParams + 0x0C24) = *(float*)(locSdkScalarTable + 0x333C);
	*(float*)(locJointParams + 0x0C28) = *(float*)(locSdkScalarTable + 0x3340);
	*(float*)(locSdkScalarTable + 0x3160) = *(float*)(locSdkScalarTable + 0x3344);
	*(float*)(locSdkScalarTable + 0x31A8) = *(float*)(locSdkScalarTable + 0x3348);
	*(float*)(locSdkScalarTable + 0x31F0) = *(float*)(locSdkScalarTable + 0x334C);
	*(float*)(locJointParams + 0x0C00) = *(float*)(locSdkScalarTable + 0x3350);
	*(float*)(locJointParams + 0x0C04) = *(float*)(locSdkScalarTable + 0x3354);
	*(float*)(locJointParams + 0x0C08) = *(float*)(locSdkScalarTable + 0x3358);
	*(float*)(locJointParams + 0x0C50) = *(float*)(locSdkScalarTable + 0x335C);
	*(float*)(locJointParams + 0x0C54) = *(float*)(locSdkScalarTable + 0x3360);
	*(float*)(locJointParams + 0x0C58) = *(float*)(locSdkScalarTable + 0x3364);
	*(float*)(locSdkScalarTable + 0x3164) = *(float*)(locSdkScalarTable + 0x3368);
	*(float*)(locSdkScalarTable + 0x31AC) = *(float*)(locSdkScalarTable + 0x336C);
	*(float*)(locSdkScalarTable + 0x31F4) = *(float*)(locSdkScalarTable + 0x3370);
	*(float*)(locJointParams + 0x0C30) = *(float*)(locSdkScalarTable + 0x3374);
	*(float*)(locJointParams + 0x0C34) = *(float*)(locSdkScalarTable + 0x3378);
	*(float*)(locJointParams + 0x0C38) = *(float*)(locSdkScalarTable + 0x337C);
	*(float*)(locJointParams + 0x0C80) = *(float*)(locSdkScalarTable + 0x3380);
	*(float*)(locJointParams + 0x0C84) = *(float*)(locSdkScalarTable + 0x3384);
	*(float*)(locJointParams + 0x0C88) = *(float*)(locSdkScalarTable + 0x3388);
	*(float*)(locSdkScalarTable + 0x3168) = *(float*)(locSdkScalarTable + 0x338C);
	*(float*)(locSdkScalarTable + 0x31B0) = *(float*)(locSdkScalarTable + 0x3390);
	*(float*)(locSdkScalarTable + 0x31F8) = *(float*)(locSdkScalarTable + 0x3394);
	*(float*)(locJointParams + 0x0C60) = *(float*)(locSdkScalarTable + 0x3398);
	*(float*)(locJointParams + 0x0C64) = *(float*)(locSdkScalarTable + 0x339C);
	*(float*)(locJointParams + 0x0C68) = *(float*)(locSdkScalarTable + 0x33A0);
	*(float*)(locJointParams + 0x0CB0) = *(float*)(locSdkScalarTable + 0x33A4);
	*(float*)(locJointParams + 0x0CB4) = *(float*)(locSdkScalarTable + 0x33A8);
	*(float*)(locJointParams + 0x0CB8) = *(float*)(locSdkScalarTable + 0x33AC);
	*(float*)(locSdkScalarTable + 0x316C) = *(float*)(locSdkScalarTable + 0x33B0);
	*(float*)(locSdkScalarTable + 0x31B4) = *(float*)(locSdkScalarTable + 0x33B4);
	*(float*)(locSdkScalarTable + 0x31FC) = *(float*)(locSdkScalarTable + 0x33B8);
	*(float*)(locJointParams + 0x0C90) = *(float*)(locSdkScalarTable + 0x33BC);
	*(float*)(locJointParams + 0x0C94) = *(float*)(locSdkScalarTable + 0x33C0);
	*(float*)(locJointParams + 0x0C98) = *(float*)(locSdkScalarTable + 0x33C4);
	*(float*)(locJointParams + 0x0CE0) = *(float*)(locSdkScalarTable + 0x33C8);
	*(float*)(locJointParams + 0x0CE4) = *(float*)(locSdkScalarTable + 0x33CC);
	*(float*)(locJointParams + 0x0CE8) = *(float*)(locSdkScalarTable + 0x33D0);
	*(float*)(locSdkScalarTable + 0x3170) = *(float*)(locSdkScalarTable + 0x33D4);
	*(float*)(locSdkScalarTable + 0x31B8) = *(float*)(locSdkScalarTable + 0x33D8);
	*(float*)(locSdkScalarTable + 0x3200) = *(float*)(locSdkScalarTable + 0x33DC);
	*(float*)(locJointParams + 0x0CC0) = *(float*)(locSdkScalarTable + 0x33E0);
	*(float*)(locJointParams + 0x0CC4) = *(float*)(locSdkScalarTable + 0x33E4);
	*(float*)(locJointParams + 0x0CC8) = *(float*)(locSdkScalarTable + 0x33E8);
	*(float*)(locJointParams + 0x0D10) = *(float*)(locSdkScalarTable + 0x33EC);
	*(float*)(locJointParams + 0x0D14) = *(float*)(locSdkScalarTable + 0x33F0);
	*(float*)(locJointParams + 0x0D18) = *(float*)(locSdkScalarTable + 0x33F4);
	*(float*)(locSdkScalarTable + 0x3174) = *(float*)(locSdkScalarTable + 0x33F8);
	*(float*)(locSdkScalarTable + 0x31BC) = *(float*)(locSdkScalarTable + 0x33FC);
	*(float*)(locSdkScalarTable + 0x3204) = *(float*)(locSdkScalarTable + 0x3400);
	*(float*)(locJointParams + 0x0CF0) = *(float*)(locSdkScalarTable + 0x3404);
	*(float*)(locJointParams + 0x0CF4) = *(float*)(locSdkScalarTable + 0x3408);
	*(float*)(locJointParams + 0x0CF8) = *(float*)(locSdkScalarTable + 0x340C);
	*(float*)(locJointParams + 0x0D40) = *(float*)(locSdkScalarTable + 0x3410);
	*(float*)(locJointParams + 0x0D44) = *(float*)(locSdkScalarTable + 0x3414);
	*(float*)(locJointParams + 0x0D48) = *(float*)(locSdkScalarTable + 0x3418);
	*(float*)(locSdkScalarTable + 0x3178) = *(float*)(locSdkScalarTable + 0x341C);
	*(float*)(locSdkScalarTable + 0x31C0) = *(float*)(locSdkScalarTable + 0x3420);
	*(float*)(locSdkScalarTable + 0x3208) = *(float*)(locSdkScalarTable + 0x3424);
	*(float*)(locJointParams + 0x0D20) = *(float*)(locSdkScalarTable + 0x3428);
	*(float*)(locJointParams + 0x0D24) = *(float*)(locSdkScalarTable + 0x342C);
	*(float*)(locJointParams + 0x0D28) = *(float*)(locSdkScalarTable + 0x3430);
	*(float*)(locJointParams + 0x0D70) = *(float*)(locSdkScalarTable + 0x3434);
	*(float*)(locJointParams + 0x0D74) = *(float*)(locSdkScalarTable + 0x3438);
	*(float*)(locJointParams + 0x0D78) = *(float*)(locSdkScalarTable + 0x343C);
	*(float*)(locSdkScalarTable + 0x317C) = *(float*)(locSdkScalarTable + 0x3440);
	*(float*)(locSdkScalarTable + 0x31C4) = *(float*)(locSdkScalarTable + 0x3444);
	*(float*)(locSdkScalarTable + 0x320C) = *(float*)(locSdkScalarTable + 0x3448);
	*(float*)(locJointParams + 0x0D50) = *(float*)(locSdkScalarTable + 0x344C);
	*(float*)(locJointParams + 0x0D54) = *(float*)(locSdkScalarTable + 0x3450);
	*(float*)(locJointParams + 0x0D58) = *(float*)(locSdkScalarTable + 0x3454);
	*(float*)(locJointParams + 0x0DA0) = *(float*)(locSdkScalarTable + 0x3458);
	*(float*)(locJointParams + 0x0DA4) = *(float*)(locSdkScalarTable + 0x345C);
	*(float*)(locJointParams + 0x0DA8) = *(float*)(locSdkScalarTable + 0x3460);
	*(float*)(locSdkScalarTable + 0x3180) = *(float*)(locSdkScalarTable + 0x3464);
	*(float*)(locSdkScalarTable + 0x31C8) = *(float*)(locSdkScalarTable + 0x3468);
	*(float*)(locSdkScalarTable + 0x3210) = *(float*)(locSdkScalarTable + 0x346C);
	*(float*)(locJointParams + 0x0D80) = *(float*)(locSdkScalarTable + 0x3470);
	*(float*)(locJointParams + 0x0D84) = *(float*)(locSdkScalarTable + 0x3474);
	*(float*)(locJointParams + 0x0D88) = *(float*)(locSdkScalarTable + 0x3478);
	*(float*)(locJointParams + 0x0DD0) = *(float*)(locSdkScalarTable + 0x347C);
	*(float*)(locJointParams + 0x0DD4) = *(float*)(locSdkScalarTable + 0x3480);
	*(float*)(locJointParams + 0x0DD8) = *(float*)(locSdkScalarTable + 0x3484);
	*(float*)(locSdkScalarTable + 0x3184) = *(float*)(locSdkScalarTable + 0x3488);
	*(float*)(locSdkScalarTable + 0x31CC) = *(float*)(locSdkScalarTable + 0x348C);
	*(float*)(locSdkScalarTable + 0x3214) = *(float*)(locSdkScalarTable + 0x3490);
	*(float*)(locJointParams + 0x0DB0) = *(float*)(locSdkScalarTable + 0x3494);
	*(float*)(locJointParams + 0x0DB4) = *(float*)(locSdkScalarTable + 0x3498);
	*(float*)(locJointParams + 0x0DB8) = *(float*)(locSdkScalarTable + 0x349C);
	*(float*)(locJointParams + 0x0DB8) = *(float*)(locSdkScalarTable + 0x349C);
	*(float*)(locJointParams + 0x0DB8) = *(float*)(locSdkScalarTable + 0x349C);
}

static void HierarchySdkDrivenRotCommand_Seg5Cmd40(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	const char* __restrict locJointParams = (const char*)pContext->m_locJointParams;
	const char* __restrict locSdkScalarTable = (const char*)pContext->m_locSdkScalarTable;

	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3140)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3188)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31D0)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0A90) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3144)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x318C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31D4)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0AC0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3148)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3190)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31D8)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0AF0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x314C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3194)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31DC)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0B20) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3150)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3198)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31E0)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0B50) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3154)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x319C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31E4)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0B80) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3158)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31A0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31E8)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0BB0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x315C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31A4)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31EC)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0BE0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3160)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31A8)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31F0)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0C10) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3164)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31AC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31F4)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0C40) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3168)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31B0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31F8)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0C70) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x316C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31B4)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31FC)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0CA0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3170)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31B8)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3200)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0CD0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3174)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31BC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3204)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0D00) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3178)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31C0)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3208)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0D30) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x317C)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31C4)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x320C)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0D60) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3180)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31C8)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3210)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0D90) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3184)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31CC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3214)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0DC0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3184)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31CC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3214)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0DC0) = q;
	}
	// SdkDrivenRotOperation (EulerToQuat)
	{
		ORBISANIM_MARKER_SCOPED("Euler2Quat", OrbisAnim::Perf::kMagenta);
		sceMath::Aos::Vector3 euler(
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3184)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x31CC)),
			DEGREES_TO_RADIANS(*(float*)(locSdkScalarTable + 0x3214)));
		sceMath::Aos::Quat q = sceMath::Aos::Quat::rotation(euler, sceMath::kXYZ);
		*(sceMath::Aos::Quat*)(locJointParams + 0x0DC0) = q;
	}
}

static void HierarchyParentingCommand_Seg5Cmd41(const SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	ORBISANIM_MARKER_SCOPED("Parent", OrbisAnim::Perf::kGray);
	OrbisAnim::JointParentingQuad::Element const parentingTable[] = {
		{ 0x0390, 0x0FB0 + 3 },	// Child[366]: head_helper_pose_01, Parent[68]: head_helper
		{ 0x03A0, 0x0FB0 + 3 },	// Child[367]: head_helper_pose_02, Parent[68]: head_helper
		{ 0x03B0, 0x1030 + 3 },	// Child[368]: l_wrist_helper_pose_02, Parent[73]: l_wrist_helper
		{ 0x03C0, 0x1030 + 3 },	// Child[369]: l_wrist_helper_pose_01, Parent[73]: l_wrist_helper
		{ 0x03D0, 0x1070 + 3 },	// Child[370]: l_elbow_helper_weighted_01_pose_01, Parent[78]: l_elbow_helper_weighted_01
		{ 0x03E0, 0x10B0 + 3 },	// Child[371]: l_shoulder_helperBend_pose_03, Parent[79]: l_shoulder_helperBend
		{ 0x03F0, 0x1130 + 3 },	// Child[372]: r_wrist_helper_pose_01, Parent[87]: r_wrist_helper
		{ 0x0400, 0x1130 + 3 },	// Child[373]: r_wrist_helper_pose_02, Parent[87]: r_wrist_helper
		{ 0x0410, 0x1170 + 3 },	// Child[374]: r_elbow_helper_weighted_01_pose_01, Parent[92]: r_elbow_helper_weighted_01
		{ 0x0420, 0x11B0 + 3 },	// Child[375]: r_shoulder_helperBend_pose_03, Parent[93]: r_shoulder_helperBend
		{ 0x0430, 0x0EB0 + 3 },	// Child[376]: spine_d_helper_pose_01, Parent[63]: spine_d_helper
		{ 0x0440, 0x0EB0 + 3 },	// Child[377]: spine_d_helper_pose_02, Parent[63]: spine_d_helper
		{ 0x0450, 0x1230 + 3 },	// Child[378]: l_upAnkle_helper_pose_01, Parent[100]: l_upAnkle_helper
		{ 0x0460, 0x1230 + 3 },	// Child[379]: l_upAnkle_helper_pose_02, Parent[100]: l_upAnkle_helper
		{ 0x0470, 0x1270 + 3 },	// Child[380]: l_knee_helper_weighted_01_pose_02, Parent[105]: l_knee_helper_weighted_01
		{ 0x0480, 0x12F0 + 3 },	// Child[381]: r_upAnkle_helper_pose_01, Parent[108]: r_upAnkle_helper
		{ 0x0490, 0x12F0 + 3 },	// Child[382]: r_upAnkle_helper_pose_02, Parent[108]: r_upAnkle_helper
		{ 0x04A0, 0x1330 + 3 },	// Child[383]: r_knee_helper_weighted_01_pose_02, Parent[113]: r_knee_helper_weighted_01
		{ 0x04A0, 0x1330 + 3 },	// Child[383]: r_knee_helper_weighted_01_pose_02, Parent[113]: r_knee_helper_weighted_01
		{ 0x04A0, 0x1330 + 3 }	// Child[383]: r_knee_helper_weighted_01_pose_02, Parent[113]: r_knee_helper_weighted_01
	};

	OrbisAnim_Parenting(5, &hierarchyHeader, (OrbisAnim::JointParentingQuad const*)parentingTable);
}

static Status EvaluateRigSeg0(SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	HierarchyParentingCommand_Seg0Cmd0(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg0Cmd1(pContext, hierarchyHeader);

	return kSuccess;
}

static Status EvaluateRigSeg1(SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	HierarchyConstantCommand_Seg1Cmd0(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd1(pContext, hierarchyHeader);
	HierarchySdkDriverRotCommand_Seg1Cmd2(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd3(pContext, hierarchyHeader);
	NdiPairBlendCommand_Seg1Cmd4(pContext, hierarchyHeader);
	NdiPairBlendCommand_Seg1Cmd5(pContext, hierarchyHeader);
	NdiPairBlendCommand_Seg1Cmd6(pContext, hierarchyHeader);
	NdiPairBlendCommand_Seg1Cmd7(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd8(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg1Cmd9(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd10(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd11(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd12(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd13(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd14(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd15(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg1Cmd16(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd17(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd18(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd19(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd20(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd21(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd22(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd23(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd24(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd25(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd26(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd27(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg1Cmd28(pContext, hierarchyHeader);
	NdiBendTwistDriverCommand_Seg1Cmd29(pContext, hierarchyHeader);
	NdiBendTwistDriverCommand_Seg1Cmd30(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd31(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd32(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd33(pContext, hierarchyHeader);
	NdiPairBlendCommand_Seg1Cmd34(pContext, hierarchyHeader);
	NdiPairBlendCommand_Seg1Cmd35(pContext, hierarchyHeader);
	NdiPairBlendCommand_Seg1Cmd36(pContext, hierarchyHeader);
	NdiPairBlendCommand_Seg1Cmd37(pContext, hierarchyHeader);
	NdiPairBlendCommand_Seg1Cmd38(pContext, hierarchyHeader);
	NdiPairBlendCommand_Seg1Cmd39(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd40(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd41(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd42(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd43(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd44(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd45(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd46(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd47(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg1Cmd48(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd49(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd50(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd51(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg1Cmd52(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd53(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd54(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg1Cmd55(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd56(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd57(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd58(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd59(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd60(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd61(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd62(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd63(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd64(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd65(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd66(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd67(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd68(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg1Cmd69(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd70(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd71(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd72(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd73(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd74(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd75(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd76(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd77(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd78(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd79(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd80(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd81(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg1Cmd82(pContext, hierarchyHeader);
	NdiBendTwistDriverCommand_Seg1Cmd83(pContext, hierarchyHeader);
	NdiBendTwistDriverCommand_Seg1Cmd84(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd85(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd86(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd87(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd88(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd89(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd90(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd91(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd92(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd93(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd94(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd95(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd96(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg1Cmd97(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd98(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd99(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd100(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd101(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd102(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd103(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd104(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg1Cmd105(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd106(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd107(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd108(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd109(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg1Cmd110(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd111(pContext, hierarchyHeader);
	NdiBendTwistDriverCommand_Seg1Cmd112(pContext, hierarchyHeader);
	NdiBendTwistDriverCommand_Seg1Cmd113(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd114(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd115(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd116(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd117(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd118(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd119(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd120(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd121(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd122(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd123(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg1Cmd124(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd125(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd126(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd127(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg1Cmd128(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd129(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd130(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd131(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg1Cmd132(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd133(pContext, hierarchyHeader);
	NdiBendTwistDriverCommand_Seg1Cmd134(pContext, hierarchyHeader);
	NdiBendTwistDriverCommand_Seg1Cmd135(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd136(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd137(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd138(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd139(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd140(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd141(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd142(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd143(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd144(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd145(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd146(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg1Cmd147(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd148(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd149(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd150(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg1Cmd151(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd152(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd153(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd154(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg1Cmd155(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd156(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd157(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd158(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd159(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd160(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd161(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd162(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd163(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd164(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd165(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd166(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd167(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd168(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd169(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg1Cmd170(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd171(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg1Cmd172(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd173(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd174(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd175(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd176(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd177(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd178(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd179(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd180(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd181(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd182(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd183(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg1Cmd184(pContext, hierarchyHeader);
	NdiBendTwistDriverCommand_Seg1Cmd185(pContext, hierarchyHeader);
	NdiBendTwistDriverCommand_Seg1Cmd186(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd187(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd188(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd189(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg1Cmd190(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd191(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg1Cmd192(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg1Cmd193(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd194(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd195(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd196(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd197(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd198(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg1Cmd199(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd200(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd201(pContext, hierarchyHeader);
	NdiAngleDriverCommand_Seg1Cmd202(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg1Cmd203(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd204(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd205(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg1Cmd206(pContext, hierarchyHeader);

	return kSuccess;
}

static Status EvaluateRigSeg2(SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	HierarchyParentingCommand_Seg2Cmd0(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg2Cmd1(pContext, hierarchyHeader);

	return kSuccess;
}

static Status EvaluateRigSeg3(SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	HierarchyConstantCommand_Seg3Cmd0(pContext, hierarchyHeader);
	NdiInterpolateMatrix1DCommand_Seg3Cmd1(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg3Cmd2(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg3Cmd3(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg3Cmd4(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg3Cmd5(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg3Cmd6(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg3Cmd7(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg3Cmd8(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg3Cmd9(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg3Cmd10(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg3Cmd11(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg3Cmd12(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg3Cmd13(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg3Cmd14(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg3Cmd15(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg3Cmd16(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg3Cmd17(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg3Cmd18(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg3Cmd19(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg3Cmd20(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg3Cmd21(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg3Cmd22(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg3Cmd23(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg3Cmd24(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg3Cmd25(pContext, hierarchyHeader);

	return kSuccess;
}

static Status EvaluateRigSeg4(SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	HierarchyConstantCommand_Seg4Cmd0(pContext, hierarchyHeader);
	NdiInterpolateMatrix1DCommand_Seg4Cmd1(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg4Cmd2(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd3(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd4(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd5(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd6(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd7(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd8(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd9(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd10(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd11(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd12(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd13(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd14(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd15(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd16(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd17(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd18(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd19(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd20(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd21(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd22(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd23(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd24(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd25(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd26(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd27(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd28(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd29(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg4Cmd30(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd31(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd32(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd33(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd34(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd35(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd36(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd37(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd38(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd39(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd40(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd41(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd42(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd43(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd44(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd45(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd46(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd47(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd48(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd49(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd50(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd51(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd52(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd53(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd54(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd55(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd56(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd57(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg4Cmd58(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg4Cmd59(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg4Cmd60(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg4Cmd61(pContext, hierarchyHeader);

	return kSuccess;
}

static Status EvaluateRigSeg5(SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader)
{
	HierarchyConstantCommand_Seg5Cmd0(pContext, hierarchyHeader);
	NdiInterpolateMatrix1DCommand_Seg5Cmd1(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg5Cmd2(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg5Cmd3(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg5Cmd4(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg5Cmd5(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg5Cmd6(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg5Cmd7(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg5Cmd8(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg5Cmd9(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg5Cmd10(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg5Cmd11(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg5Cmd12(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg5Cmd13(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg5Cmd14(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg5Cmd15(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg5Cmd16(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg5Cmd17(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg5Cmd18(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg5Cmd19(pContext, hierarchyHeader);
	NdiMultMatrixCommand_Seg5Cmd20(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg5Cmd21(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg5Cmd22(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg5Cmd23(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg5Cmd24(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg5Cmd25(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg5Cmd26(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg5Cmd27(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg5Cmd28(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg5Cmd29(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg5Cmd30(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg5Cmd31(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg5Cmd32(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg5Cmd33(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg5Cmd34(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg5Cmd35(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg5Cmd36(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg5Cmd37(pContext, hierarchyHeader);
	NdiDecomposeMatrixCommand_Seg5Cmd38(pContext, hierarchyHeader);
	HierarchyCopyCommand_Seg5Cmd39(pContext, hierarchyHeader);
	HierarchySdkDrivenRotCommand_Seg5Cmd40(pContext, hierarchyHeader);
	HierarchyParentingCommand_Seg5Cmd41(pContext, hierarchyHeader);

	return kSuccess;
}

Status EvaluateDogSkelRig(U32 hierarchyId, SegmentContext* pContext)
{
	if (0x43cb1054 != hierarchyId)
		return kFatalErrorMismatch;

	const uint32_t kNumSegments = 6;
	typedef Status(*RigEvalFn)(SegmentContext* pContext, const OrbisAnim::HierarchyHeader& hierarchyHeader);
	static RigEvalFn rigEvalFns[kNumSegments] =
	{
		EvaluateRigSeg0,
		EvaluateRigSeg1,
		EvaluateRigSeg2,
		EvaluateRigSeg3,
		EvaluateRigSeg4,
		EvaluateRigSeg5,
	};

	OrbisAnim::HierarchyHeader hierarchyHeader;
	hierarchyHeader.m_pJointParams = (void*)pContext->m_locJointParams;
	hierarchyHeader.m_pJointTransforms = (void*)pContext->m_locJointTransforms;
	hierarchyHeader.m_pScalarTable = (float*)pContext->m_locSdkScalarTable;
	hierarchyHeader.m_pDependencyTable = (void*)pContext->m_pDependencyTable;

	return rigEvalFns[pContext->m_iSegment](pContext, hierarchyHeader);
}

